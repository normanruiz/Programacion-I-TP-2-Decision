%!PS-Adobe-2.0
%%Creator: dvips(k) 5.999 Copyright 2019 Radical Eye Software
%%Title: Guia de trabajos practicos - Parte 2.dvi
%%CreationDate: Sun Jan 19 23:20:11 2020
%%Pages: 26
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: LMRoman17-Regular LMRoman12-Regular LMRoman12-Bold
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: /usr/local/bin/dvips -o
%+ "Guia de trabajos practicos - Parte 2.ps"
%+ "Guia de trabajos practicos - Parte 2.dvi"
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2020.01.19:2020
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 872 2018-12-21 20:39:31Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.30, 2018/12/17
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup xGridOffset add y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-ts1.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmts1[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase.ts1
/.notdef
/.notdef
/.notdef
/.notdef
/quotedblbase.ts1
/.notdef
/.notdef
/twelveudash
/threequartersemdash
/cwmcapital
/arrowleft
/arrowright
/tieaccentlowercase
/tieaccentcapital
/tieaccentlowercase.new
/tieaccentcapital.new
/.notdef
/cwmascender
/blanksymbol
/.notdef
/.notdef
/.notdef
/dollar
/.notdef
/.notdef
/quotesingle.ts1
/.notdef
/.notdef
/asteriskmath
/.notdef
/comma
/hyphendbl
/period
/fraction
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/.notdef
/.notdef
/angleleft
/minus
/angleright
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/mho
/.notdef
/bigcircle
/.notdef
/Orogate
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/ohm
/.notdef
/.notdef
/.notdef
/dblbracketleft
/.notdef
/dblbracketright
/arrowup
/arrowdown
/grave.ts1
/.notdef
/born
/divorced
/died
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/leaf
/married
/musicalnote
/.notdef
/.notdef
/orogate
/.notdef
/longs
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/tildelow
/hyphendbl.alt
/breve.ts1
/caron.ts1
/hungarumlaut.ts1
/dblgrave.ts1
/dagger
/daggerdbl
/dblverticalbar
/perthousand
/bullet
/centigrade
/dollar.oldstyle
/cent.oldstyle
/florin
/colonmonetary
/won
/naira
/guarani
/peso
/lira
/recipe
/interrobang
/gnaborretni
/dong
/trademark
/permyriad
/paragraph.alt
/baht
/numero
/discount
/estimated
/openbullet
/servicemark
/quillbracketleft
/quillbracketright
/cent
/sterling
/currency
/yen
/brokenbar
/section
/dieresis.ts1
/copyright
/ordfeminine
/copyleft
/logicalnot
/published
/registered
/macron.ts1
/degree
/plusminus
/two.superior
/three.superior
/acute.ts1
/mu
/paragraph
/periodcentered
/referencemark
/one.superior
/ordmasculine
/radical
/onequarter
/onehalf
/threequarters
/Euro
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/multiply
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/divide
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 userdict       begin       /draftcopy-CurrentPage 0 def       /draftcopy-old-BOPhook
{ } def       currentdict /bop-hook  known{             /draftcopy-old-BOPhook
/bop-hook  load def       } if       /bop-hook{         draftcopy-old-BOPhook
        /draftcopy-CurrentPage draftcopy-CurrentPage 1 add def    
    draftcopy-CurrentPage 2 ge         draftcopy-CurrentPage 99999
 le         and         { gsave 200 70 translate 65 rotate        
 /Times-Roman findfont           130 1  mul scalefont setfont     
     0  0  moveto           0.90 setgray          (Norman Ruiz)  show
          grestore         } if       } def       end
 
@fedspecial end
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E752429B985F23EBA0C9875AD055D8B1F640D10DB8F40BBF062F476691
EDAA1D05C5591EEDC1B75251BFF8576F1C9CC5C0E521392A2F0D5F869F8AA462
B3883A673A976328E1F0DAA22B80CB7737DE2537E7B54F5E1643E30046E87CF3
8D9A45A973757BC16CC50504033125D2A68A1C97CA095C56B3D62783960780B3
1693596869FAF5692AA8FA6643FCD7F55E72948D2DC55AFC5016FB2C48AF9D85
192393C682B739EB43CAD8C3FD4053B2D53CF911352E2BA87A65F8949B0B7918
EA727DE4A08DE07B71365B8F31103159F65D30A7A318C1056BF638CD20BB56D8
6F22ED3EACC46F750F405FAF96268E80A409CD8AE0F36B68AA8C5FD2E0E871DB
D2628AEC086AAFC9F04CC93440E1A8B0ACC1DCADB778837360339A25C08E3B0C
E768240F0E8CE9FF939E4B1A6365664AAB69761B7A9C7B95BD29B09B930B0D82
F2C39F9BC0B94E56C48DCB22D8F0CA6C633BE68E5977EB3D88103E4230C6A08B
B4FB0CDEA7D44636102D47AB90B92FA42243943EB3E77E6CC38DEDBB2DB8BE77
78936B70FAE12EB1E2913B766CA2BAC3FA555CBADAF2CBF6B7A216FC93470554
2C841542BC1FDB26DBE389CED193E28A19CE9CBA64FCEB47C4D9C7891741E0A1
23FBBE971ED93F797C02EA830678317452481FB78DFEFDB25A3645AD3979D2F4
AA17C624CAB35B85963C6DED262AED5DE92278F31B2E573FD86696D98800443F
32CF695BC103A3ACA687FBB3F42AF9C89123C719005844588667C3DA28AFA523
BAEADF7BED1F3B5D595DF571540D0855FA377DFA6880F525878D6A3D1980C7D1
05554ACC5D07ACEA1E0D27664F6DFB6EFF878D0A68604565D0BF75FD8BE023FA
36D164B7BE25F9F811A466CE04C2CE5A774EE3288A245769B7ED30FCFA10230A
D6C9E809341BF5E55E58F3288F7298D62092922F07027352BC7C9612CFCB7018
B3394AF7EE7076395E67C3CF9B71BE069AE6C6C412F86A496E7C77173A0CDA0B
CC46683C239700CF259CF668B9F5C990DE3196B84BE792F51E17583FD4A83178
989638A37897AA769D74E0B3A299DD94B314F9BAFA7217AC70D8D9D02544A545
F6880EED34399A835514CCB97938F3E012AF4D68C140C6CE231015D93CEFC522
CF56EDA6F3147B3861904FBF8BEE6DB3D2E71479CD3A02BE03C555B0808D40B9
53D2EC56876076A116EE7E81836676237F88C519F8DBF39EC35FE41D78CF1665
E3FFD09C78FFF428AC27BCF0318D0849935822699E31F5115E7854A22F46951A
51F24526F7190B18B313DC58AA2EAF631A48ABE394668C6F1CE9AEADFB56116F
FB38C388F96143BA870537CC8B3E5F2DC39F9B930ECC63475BBB8C5F9A45218D
E05C4E6F250F6E544D6011F65EF4808D3D0158097CDB6E280AA402229A6B78E6
AC615258668BFD3469CD663592BF1214E5EF1C116C4DB47B805E2F60771168CF
79CF10DC2DA8F2BE94869AA570DF2AA5852113C51CFC85C1E41516CE412CB410
BD026231E22A9CD0F664D76D385CC1170476B17BCDA45C640C583F16DA207028
0C58570A966383AA9F7CE59375525369CA6A559BEF0E05F11CA9C72A278C045B
1D2572EC08DE1424D2420D550177794FB3DEBEBE9E4105AAD34FF119AB2483CC
A034A95AF0B24B801710B398D9E9A95138859A819011423AB5921DE8EAC56ADB
58FB18C27A41CE503CAF2E7EA6F673ED5F34F1C1D20B609A152EDECFA26872BC
3C8C802A1517D9C6FDA3474591F19D573EB051F551990D0331B2DEBFA31B5010
3F6332290E522C15C69352124E1051A715399BBD1A6D3704BCBBE1FFF89E56CF
9C3EF605898309C7C3D20DFBFD10DF5FA30F409A76AE8021045DC09C95C9AE4B
4EF735A5414D985F6F79100E7045B930267F0EEA9BE820E13291132AE91118E4
7B8432BD1AD7A9CD912F2BFF83A2C4705A26FCBB7F8E45CB2FD9AA2EA98E381A
01BA4C4E31747123F20A0A721766F9D9A6769FF80B400B1EDBFCAC63CE15283E
72EC447BADD5BD58B053A11BD770399E31FB3B3D856FBCF6235BAD1F0D38E26C
3518FE6411F2A5FD4809C085AC2D60FA311DC99B9100C1A59CEF4C877053161B
59682BF5F2D85F2DA7EA0FE603D477F6E80DEAE0F250811BCC646D8CE2956C78
B897A5000D73AD32BD99B92E6E63BF8D79777859EC0F7FAE47F5A0CA878106F5
5462D3027DEA15E36AACC0E7349C8E60D6F2439E2D50DCB9D96C6C20D11266F7
913970C783EF6D587F638339D1E89A4878ED27E515FED0D26FEEE69602B2BD58
D146C077FAC71FD55A5490C89142F2844CB7E6352B01A448D4BD7A06D8EC0F00
E69984EC55E0B487FDEBB3F7FC3F4093CC6E13B87084E461E23A4D6862F0EEA2
84DAEA8343FE913EA90B9ADC7D025C2B8EA3689D75AA38B5222166C447B82E75
52DE05711B3883394BA9D683C161A48059A0463B17F3DFE8A73B46E913B99D2A
38E7FCC667A5B810B665519E7E1450E00BB9D0279537763ACA5F131550E83404
04E208B9C0B0A118F40332BDBB431AA70981E77AA5E5E76F43E730D9D3D047D0
B3EC66EF1D37916398FB8CE955E12D8A89ADEB1AE1EDCF91BD788D8F261962B4
3870D5928D160218A297BBD3BEA22E12E9C4197D0F3835C0942AD6487F5C9B20
C9A597910685A9BEE4CBA868D352ADC10A564782DF3BD57758FD145E769D4E88
BF43D19050DA58FFD64EB7B1D37BA13752B6C966C7A1397D80160687245269D0
F27E87B2186D931D624120B81967E58ABF5DD66AE39640224A518BF378B5CD26
761D1ECD916FC625A90EE8A7E00080300F0A05D265549982D56614814E10FB25
DA53070C2BBB4411D9608F4FF0B2E171820C734BD20399504F034BFE4C20E7A3
1326783358CF8D4FA48C1AB81741FA70BC0E0A4BBD104C7E5AC05CE49C6375E8
9F0EAB2B56BBB89144CE810C78D8CA02BD7CE2AEF79E27A7CC1D6B68A5B9F504
BED3487D1424CA82B8CC60A0156706987C7D0DB913F1BBF8A7B9A275E3345BBA
213B3DF67C4111E9564B59B724BD65916BFEEFE9BF03AF9D84DD2AB94847F33A
3AB3757D2C8CB688D50EEA68DEAD0613A62C3000C037092ED0A93F8486FDD7C1
CE928A3B7A62E15FF0E53E8441C88EA7EDDB16ACDD26093F27AD276C7EBE9E54
1686DA5E26A4CAEAC39715DEC0AC3226F89606D8EF5ACD55D67B059BF6E8F30E
E359EA6416D91CE21ED908D6F8E0DF883970D349DA85F749026AB7D8CBC93B9C
B12EFD2936C1B63ED2B929C033A7F9759BF94C668AD787FF73B1BC042E3BA32D
6008B89E8E030D46B0E9F0247510E37735D1055E32143E97A11060CF072D7955
9B316AD1B56F342BD5347564C463171E3B2271E4F2B25C44E345854FB204CF96
E9441266931727DBFC72CD872C534A411593D10A734F54D32BC5663D02A3008D
95BE5EC1AE472B75ABCE6A6BB030727318366835FCC219DFFAD9A7F7D2850C50
C01F95F2BC7443FFD645E8EB8863132403F6552F82A6C3CF2AE112F8EE4E7A06
63367535A261D18BB1A26E4C2157472E938C018477D107652BD59E002C56B3DD
423BE925DD0B46BB86D33CD66D069CB847A315262F8F4F114D713DDE8D3C9B37
40FE2E9D8D012D2D358ED89B9258E54CADBBB3CC59D3FBE6A84F1F9521B6E05D
0A0B2E0FCA57280FBA427EBCC9F86882CD96EEB8F3DDC554ECFEC9AAC229C31F
9E8C66735C59EA38E3BCACCC6F85A6E4576CE0D0B850C5F5505B61D785C6568F
D459FA6AB02F16E58ECE66C909B7040538B5E7DE80B6DE055DC28C1B3CD4A50D
077FE7AE2463F40DA89824D1C5D17DC70E135F666D6CBDEF35A8DF7CB22CD7D3
71D2156E4C040D7FFF62F56653DD40C4DF8D976A9561F7A2A4AAA27D75E805BB
F6F2438217BA5121CC668458620DB3D381D5677019CAB09FD5A5ED804CF9A763
367BEC85D9D26CDF0AEAD7D8C7AD77072FB9419F12077754BA3854A60A3676CE
5844945CE732C268C6BB20D3A28813680FD8BA18BF655ED97EE45989D6781357
B5B413B6E97541FE06864484D4629BD483AF6E2109089894073709DB34C1F5FE
63935BB8431F7E829B9FA5A21173244A15B102222B1C8D1651E7DB72782C46D8
4AB230F78CDD9B74D0D17672F0AE1327243C3D00DA2F61CBB612AAF94D5FA688
675B555FBB346AD5F2B5229F163101D4B98559AD18A41A8FD3A88B4FDFF9A4FF
ACB66E5DB49804228E74B02B2E1E8FA3B00C9278BB0428971CC9818FC947D897
5301E53B187DE4E19B4429446C0981B34070CFBF71A5FD30059783C16070C4D6
DC4777ED7A723EA37BCF5808E562A93805FCDA2034A6E5CFAF53CAF1C31EAABE
44B4E65AC234DAE81FC2CE7BA777B592888D38EDE68FFB3EFE83870BBDE47A05
F1DEF0CCA48FAB214208284A8F508D04F0C6C3B9418C1094CBAB96EE405DCF58
E3A569DF070920495F8084DFFCBAADFE1AF8356BCEEEBDF0605A719EDD4C0486
768E3BEC5E192ACC1FBF937035DB4920F0B8EF034C9CD1F0FAA258942085741E
E832FAB1F7ED83D153379339E47749CCF7812E0A4CB2D756FB0E9E49038148FA
7E2B948DED6C44828FBFBF98843FD61AAC4452EE1DEF48F9594F94E973E95CD7
826754E0C9F973B650EA43465B99D376580FE5BFE1A7FCCE35DAA893E5CB7EAF
FF55AAD957CA814FA0EDBF77A708B547E6AF5472D97786ABEC83FADF34A6E5CF
AF53CAF1C31EAABE44B4E65AC233295597A2E3D1C3964D8E87EB47950899C82E
7D266EAB2031E01F44EC9827715D8D755A09BA38A0C320169FF5BAE229F6FAD1
15EB0ECE8AE791EDC71A47F2AB39A10443B69EC10B0CCD7C0C2478EB2FEEA0C6
9754128BFC9A06CA8A2F7A801C7AFACD58F93FCD83DCF3EF58FE4CCCD5E5EB29
BEDC9314736E9046AED39FFA15066BD90F7CE3BAE8CF73F5D60BD9C4958040D3
EC1CEBE50FBA278C97A70F6AB8025660CA3EAA7C93B7524614BE7C9534ADE290
1191A2315EA8C071AB639CA550E5AE24EC79F3AFE821DB58148E2064C5033F89
3073DAEE9D88B75EE46A48E9C4D49E716E828DB7B5550269959F55E4C6C1C1C3
851FECAF5B1A0431422798FB65706F4DD2EB18FCECC2FE44C19959DF9D1404A2
EAFDA86D1E81944C5799AA78626137F8D985DDAE015BB925FBF9287B75346C38
64B99A0C16F468BE1E3146E3DB0B5D153B2C709819EC81406BB6FA3185D22CF2
EC2936B633E255DAD15F08252EDF5979C14C46A1ACCBBC666101A5B7F62E4817
6AB5869BC6CAE5210C7927F8B75D150CE5DB410E5BB0A3167213B0CD5C2CEA9A
479B91525E75380798186A358C7747EE66624D0ACEE45E07701B96A72F867DB8
C7AFA139B53E0E08B40556500E0916A4648BF5BEBC528B5B1B0964FA2672D57B
22AFF5724FEBC52FA0649E775A3ED9D6D92DDE4B0DA61C03BF4360FEA49064FD
E91299E990F80599286293CA59BCA5728615CC410AB3F3A2FC452F24D98DDD52
69E773AEB6AE9F7EA6B4A09ABA03C4D7BF8DD94EFD5105EE20AE0BDDD958176C
666D2CCBD34C82A66030D729C4DCF2E9E0ED2A8A24A32CADD00CD37515D35FB2
D63518E33F2360022700959A62CACF5C06CCBC40FC0F4228F77FFCCA2F2F7CAF
D93CA182B259B2F04447FA751B9472F92BDF5A7DB5D93C74332E50B7F2DB2F0B
476E52D38BF9BA9A7880F7EE5E00A451AFEBF0CC8F8B3468F736647968BDA688
4B7F119EE2778B37954C323F241C907781F378AEA2029391050B3C63C63268A5
67C4A1BCCD70F1933FB9C200A1B33851E0120CF579A344D0CC32979A1EEEC60D
4F7510CCD3C188F08FF2AA1C81B05CE1A8AECC900BEE740B4A1080CD6B8032AB
362D65C77F144A456D5A77B0C43821F047EA1EBC1371BF8A5B0B825DB940B212
5C16F982248B4082EAD47E0BCE784F633E3161FA92D07113713A9493F1445D1D
495AF2F29A81950E679223C715544FEF5FD7E58E3515583D4E7B30619818726A
59A44CA794BEF7A8BC67A29AE0A974673C28618CA233B1A1EEFB478579F9F925
6290F1F7781C2C9F770140C2914A9BF9A9DFDC5F469B812685A5890DC3FA0F4D
04A82F5E64E2E417C6B64D761EB0CE7F13942BD6742536D84BF114564ACB36CB
F058A6C4D16EDEFCF6744D0149327F0FFBDFDB44916E3347813D39E4B5F46C2D
53EF9C3AE9D59A7C2F7E922C5B6350E39BD8A90B1DBD9977A5F4C7FC67E89618
38FBC011354AB3D302594FD5CF737F928C39006FABA8A748F021AEE121E2043C
445A6F7ADB67E6217CAB9650846EB6F36896AFEB6A74BB6B54D5BAF97A531007
8C1A8FCE60C68273795FF8EC6F39CBA82BDDCDAC84C3FEFED3EB63AB8603C1AD
A3A7DD72A1D655812B8406F0133DA80CE65A75CA26236DF9E5BDF16C953B37CE
3EF01CD10EBE0429935F498EC1D6DE2E5487F76D5B025A7B766FFA65AEA58C77
DC4ED68C27DD8795DFD790BD49B512DE1EFB3DF0C2A85DB7429BC242A2746730
41F9EFC88D77D02D39EC1157D538C0B41C1685DF61133E1B498BD7FF2FD14AAB
2ACA0DFFAF62D9DF30CCB56BFAAA6E393840CC3F2DB1D754F974A142800F1E8C
1FF6647BAFD829244AF2BC290824B10C3779A1D3035E280F7796B3FF181058A1
50426089EC7071143F5174D36A57A37B48585FB0D0EB6006F869E42FC542FAAF
9B43F7E3C7FB4EF007EBB868DA7F878BDF6355C623059042AA5B6AC074B7425C
2118FE177FD6094EC7065BED4052593D1710094AA106AAD876D5DAFAD2787113
209C4CA1AD094338F09076A091CA69B1ACA5AA995EDCA2CD0CB0C295C99A614B
1869F207E6BAFA869CB82B6DDD4DC935FDFA790C5036965090789D4F09309A68
2485948E77F4FFA832A28378D5955C2CE2C8F166B7D18498AEAB8114BBA5CD32
D55AA3E61DCAE5E57A9D3AD3DED4F1EB821AE4DE7B72A427EF5C938B1C0AA82C
69CB5E80986222FE30B30AA25C83A75F87A074BAB277B8A66C8413A8F87A809D
38FCDFCEF8BB438200C2C3C5F25285A14EA4652CCD2A3970A8BCAA0C6F4E1984
C107C8FD9285F08FC3C879AE6D42023BE0EA5F43707CFD45E588F7F0CEA77179
76FBB04E6A3577A5BE194255A3335FD103803857B8046544BF2723FF4B433348
844E1D39319341D0F40B15EFC6B8101C4762D9ECD77341CC0B724110B2616D47
D0EDF1478DDB4AC917D47D225EEF876FDB36916216B3A404AA2B7B5C052AEA02
AA8783293F6EB8ACC485B94BBF8425761F19EC6C599FEFB3D1D4343512ADA1B7
8E710A10079F211FAA5227E06F25631EAB997942759F3D10E56C2735396E21EA
48F9C3340083FAC01F1A052E23200E94DCDA8807FC3021A529C5962C8E06573D
4825BD189574153F8FE0E4EFDBABE883AEAA879FF07E6137447A43961425A180
51A0C0C2C144FF68E997B6F7BEF0C52DB9469CFC0E9E9A6D7958D265791C7EBF
6F454E4AE91268CEEF58C3CD492EE4DF2AB538CF7A8E44625D054460A5615380
D8C889C8A9583F1C1AEC7DFFCC255E05EB60237AA698CC59FBC88191DD4FA5A6
48D00962C212A36B457AA65B0CCB5B4252159BB63EB9A420A2A0A701EBA73263
00222F231ACCCF7EDE034DCC447400F1DEAB13D48C7EA4641BF198937149ABFC
BE49B4313B42A81058C34BC3F8E4098C22E5A050397513C7BDF795DE7334E31E
8BAEF4799FF68EDBBA8148EA7FE1DC957DCE9258FAE9F7BA325933AF2A3C98F8
7DD26807A8F01E645A850C35B267F87726155A4E50C3B0C3EC1B39BEB744C46E
B5162C712A7237C6AB8B7A5B2C785D22BDF3130D6EF52F14202317FC40F6C9E4
9FEBC2B0D19288E8F608D032C4E96971E63516E5C4D6123C4813ED027FF66BBD
3DD789619909A6BE5CB9117199FBD2373591BA46791886B52275052894C39DAD
40632EC98DABB7DA1ECC190CE90C9891FA22B9DA61393CB3323FE1C8C0DACA57
171717E42CCFB6922C2D5D6FDE3D0553CAB203DA81CE574645944506E6C19714
41D40B4705A4725AC38A9889F4CC471D3DA016F0C8E94A28CE4A5A6EE1355F01
3C34AF5166D68BE43DE31109B39281A3A7C1932B531FCAB29F4C8E7D591AE049
4A4BF14767F03739BD5C28196C45BF03932E9270A38A5D5FF22CBC93263859DA
F623F712DB9005025839E884ED4CA596EFE210FD4640958636673A031C4EB0CB
CA8FE2C5FA3DA9FACBBC0AAFD78BF4868035D3D6878F70D749016797FB13F821
9408324081979ECA8231422739C0C58B4ADD86BF559C79A1E194F53282A0F062
7B5CA50CD7CCB722D0DF0E95C19B7520AC3D10A0374AF59FF5CD1537D39C9F7E
CB616448B0D94CBD0F69A6812235C6E72D07B539231270DD055EA707AD557A53
8A57F5FAD2717B07EC5EC512D732AE2BCEF21BA7BF8DA8993679CFF2A83F7C00
50DC2F5DED04CEAD7FC2FFABDC31DACC0163FCEAC4FA882EB97C873969EFA04E
E2C07EE994D92CFB878BB725B0E81E119B3C1DC388C6946F69B2851293F53316
1005D90CA384045DC239D4F58FA4D983558086958FF839797DB45168A9F3FEF6
B8BF664B50B9EB097FF31C13D0010E4A3B947F6998826D10A9E46BA2E54676F8
26D7C8EFE0E9E69A7D63DE373262D4B653BF98D2CCD6A88B0A67C909E66B7698
5E7B9D02C497D8C3C443D24E1D49BEAEE01747C25241C75A3E4F2BC469525994
48EA77982CDE7F785031558DD0ABF07A2CD4E6CEA274C554B884C3BD0416A680
5C6D9831ABE7F42F58A103DA58DE056B7B0F8795CCCB1CBD4239EEA37BAE03B2
6056CCEDF294BF5042ADCDF0B0AF2F35E7B70FA048FE672F22A7DC5E0BA296F8
BC572DD635CA7208D2F6C07190BFB61B710DDA6CC608A623FD4459C787E49FB0
7C1F349D3BEFAAB89187A28EF131E429251F2CF33CB4A8AB0DB6CC37838A6472
C601C215037E94AC89415BBBC83406A402F3A83FCE9918EE8E8D4BBDEF36BCEE
41CA956E753851CB3588E22936FBFB63A58300298B12F5AF81E8CB4A17B989F2
DDC463DD6F84DAB963F521327200652022022F51EF63B2D374A4906DCB43730D
B05B8837C20F9EF9B7CB7F1D174B2E94953F541C3B84D430D23F51EBB25D9B1B
174C5549F4B373D0C8429FC71B910D3806C365080E5159E51E664E2BF18399EC
680F3D14718453A83C906F22B71C52C912A550242A393A1BBEF41FCA98C8CAE1
F50A8D81F244A01498B59AAD06E09E5C8C3364DEA98B2691D0AF9A6EAEAB6297
F1DE23785F7A324F5B6011D4FE891B918DC0343A01080548802256FCD88E0A7F
105E13164CE1E1777485A1AD3B8ADCCA509943631BB3CAFFD7558991E2863EBB
B9DA783E537DF41944F91F7E8EB96106147AE0CC255E05EB602685147B90E840
3631869981BF1D3A71951CF1A385659B1712AD9B58BD9B0FB9944CD74FAFCFD1
AA6E87F704E72AD1162F330362C94A7D24A9F0C24AC1F2C37FBC40225F97C1A8
0E20385D4B83145AF95FEBC160B0436A5A8BC2455D7C0DD3BB0AB14C9FC65A58
4CBD3C65762E66D8A5580945FEFDF28654505C7F7FB50EDDEE2C8FE82A3E9ABB
3C4B89E108BA2572D80E6A42885C6207D748AA4E11DFDE03CCC5709F6D806CFF
FDB6FDF9361520D39A5DA4EF75C3E09284C1B5477518EF3FAA5A3B4643E1D47C
4F2674B5171A78B05B425795DAD7EAD09C442C316EA9C58CB39775D460226F20
388BBF95B3342044FBBADE15005E66A31AAAAFCAE6A03034E2281BEC8D06F7B7
ADF0AE7F706A40F0BCD6C3905D07EEFCACD74368BDAA743E069395B41D5BB131
FCDAFB5CB678DA317AA30828B4750954645CE99CB2DC823134BB06D2AF45F42D
E4DCC38ABB09467049791F9C23F4101F3EAE2CF8F223E473598B1C88BFFA914D
4F014978CD1B82677EDFE86FE965D0CCA18ED7B135C3300D4E6C8B686A49D427
CCD0DA4E773644EBC7FB4F3C9FFC8023DE1604FD41C754EA8686B99BCDBFC25E
CADA33E3F6D66E6A404512EA065022CEB523F5EB442BF47047FF186B26AE1DCC
2AA5081B915F16CA931083C850C04BC1F7AD4479096446E4FE0C6A3AEC08AA39
479584AE9A37142A3EE712ED8EB2DEEAEA6A176A7336E70C94832B1C5D52485D
1913F5F6C757234D7E2EF92B60B5FF3515A335A5F3DC114009CDF5B02498ABDC
3F8F945E8803662299C3FE983D7D85435A6224E8796609D033D80A82CC481EAD
70AADE0E2676CAC466E7D9EBFBC4FF52507C34739FC6E798467FB71DAC5EF9CC
1D0383F85FB9B692A0A29241EE13B4F6714D41A2D50364CBA576C1AAB84E0885
7D835DC38388AF38715635A425704C61242B4B1983A5D0B134C8052495CBAA9D
2C49F0CE9ACC73F75B045E923878E5F33D28C98CD7E3D96AEAF24AB88D33935F
BAE571B21A230452D3C09C48A2519E1892AD2AB3528E7F851C7566BA81164918
688A78CF91BBA1F76ED06C85C5B8042D50FD4A7194CCAAE0699B3F45C891150B
847315C78C38828BD9B03911AECA8427C74133EF89CC4C080871D14CF0881BBD
1006BC9B62A95FE764579DE0CC59D03792837AE695F08C12A56EF81F36DE3C68
165796E9ED5690969E28179AE774047799C5B210BAAAF8270E01B6108762EA60
4562763A7C1D2F668E5AB234D6994EE0F8636DC084F68DDE5EBD3AD2BFE211D4
38C1A870AF16F72EAE3AD612DAD9059A3D7F3BD63827E28F17D57CEDE7175A4C
76D86C83882ED85FFB721A5FCBA3AC1C1F7445179E9140E054811B3EA3F5D23B
9220A659E44717F2AF1CD8FAE438A579EBA81C0456BF0297BBD91F79D3C27B01
8A7A3D4787A965192CA6DCF61AB5B28E406FD9088E193381D8039D07BDF69F6A
B567ED977E8B5AD928F1387A2C393B778B7611053D31BBC4670C6FFE45FF2529
9417CA5172248E9945997576593D9271B16920B943368E282BD56F1F25312B41
B125B4A46DA4550DB20C2618CB6456292B8DB08399673F0DC75F1BDBE806E51B
29437763093880A3C18EC4503D3F55A3374474F1D4BE7275309D0E9CF99917A1
902F53E42BCE146452D063A460FDCFAFE5F39E7D95DA9DE8FE516923D8CC810E
306A5D5950FBFC139EF250FC2A6B8179F719AC6B30787677BDB976CC84917871
8824AB8E417CBBF6433BB9F2BF304D1D67420A050A960230095553782491A414
555572D81B74F704786221F2C415B3480FE8DEBF394D18921C6015EB8AAB4E8B
4863BA455B8CC1EB4881A9EC3A7D5F3595F786B633EC0000644D679B9F17FFED
44F44192525D19AAF44C00055D90094EB79BF159A65B012A2EACFC2FD63BED6A
20076B0AEAD03AB485F43DD669E9F6D78F7F3A3BA18BA17A9A1547F1D8811412
A2EB048EE8120FB303DB00DCB25974FAF91DC77B8AAB2239DEFDB964B9A39EBF
8B3AA5417368085E864B29147A2253EBDEF475BD7A8D9F975B2D53EF2921E8BE
24A1592F6A0B472AA97B877D0A36763B4BCB3721B6370725CCF2BA061DE84855
EC95E959CAFA3A1CC72F7CD60952852C53379530E0A6BD4A59A8187E78FC3779
3E289C5B7376D99A638AC0DC101E2DC496FCAC962C6C24DF5B892BE187B00481
144E142F433CF3C9512D50FAA648A9822FEE5B4BB37010E988DE700AD42F0210
0F16EFA05F3922C53A814EAA7809F0E9A2CCA6D7DE0506DC5353F3D13AD666CB
A8F8C56E27E62856163D152A7105F942DC1CB22923131131AE570FDDD11483A0
23C049F778514357E82EC809E055FEC4576B73978871D125317E14B83714D18F
84E5C4E50BC74E452AF2C2FE513C93C7EB2528CC8B0472B5A579EC88E8BA12F5
C2FF85F88B0CC9508AFA4B6C0252CFBD56AF94BB65F50DA12ABDF5C63C5B1602
823BBFC0C03B7A421A81F7595E7B1E7421871F8648C187E542A45CD9DF121103
BD22765CEE1518EA3F8F5C9B1CA965B78641B435C57071E75128AE9382D0F6F1
B098675BF3042A3E56C84399FC1851A50C395F7036CC9A304FD0C555D8887530
5BAB86BE291DEA72A6897F5696C127D3C11BF012F62927A18BF65FE2D537102A
9309D966B7EF122B970652DE125064D9D247307FDF5269B44DAAA80E7B4DAD28
6C0B446B0DD83E247502747D6F4CA1BA700D97CD1B89A257114045D754FD825E
9053438601E832AC8A3D146E3FAEDDB8D0B98B056F4797583A5F1CC5DB3DFA66
5A46AD11556824222EB397348C0743D0F234829B8A9C0B39ED96503F247C0260
9D1B371A0E9B0B9F260CCF63AAE519616F237C3FE57645355991B4511E39D8B7
1F1B8622A7A5D1984B5EA2C6CDA1A2B095AFDF0D7EE69B65E0181D693698070E
988D2190616F793DB31310AA0A8F45140EE4FAEF362FB83BF619817A00CFE9FC
5B0A0FDF982B147D2291194C29FA3F773B665ADFF0135A65ACB5311765991CFC
FC4B1625B27267DDB7191C87277C0193F91D9D898C2A52FFDF5240166D84A2C4
8EBA62A63C347D512DAD1E9B2F42F3F8F92DA0B1B3A34E9BB9BCAE0E89082ED1
8574A4037C51EFE1B3C161E0965B220EF5104EFFE258C055F04848F36CF72B5D
3FD84E73F22023C63FEF39B8BA4E1C998593AFE260F9E5F5A40A469C0464406B
7A1AE86765963882D94F90EDEAC8A3A8DCA72E26C987F09AF3C4AD2438B43532
7779649370B565AF4AF38BEE8E5AA5EBB7FE13BDE7A2897E69408B6925AC5072
9A5390AD55041C7A9E6DDFBF4CC6E06F7F4E221AA17F75D36F7194C366E3F91B
1730A230B9886D898CB6B51822E9C6092E9773769CE59391338C51207B01ED36
B53F1E1FA003F01800173EFB8A2D96FE16DA2F528CDA5592C3247B8CDF493624
36CFEB7A1DC6A7028A0ADDC43FA3076B2674E5A7285AC593686101542A0830AC
A6918C86EE5D21DBD34CD35275F29F181789FDFD66939DCC18BDEB94FE8B9E0D
D781E6D392AD188FCA5ED5CC9D1A8CF9027A5F84AE6EE0099D7594F90228B1E0
5A090D42B1D281079C1EF28048EF351166857DE5B2B016A4B47DCA203C6C6EE5
F2571808A37A998C561ABE01BCEA8D861E6EA214481C40C05B4506473F525372
BDE229F1BC277751454170B6DBCD902BF083329CF7489512BB4C998595438ECD
A6041A2E9D4CA8C4389E525553A8791632EAE32B6E8D2193932EF60D694BB35A
F8B365EDCEF861445EB8E445EFDE8E04D0CEC9D3472BEA86D0DA84B4059D9BD9
8E4777F4FAB2853669F4B4DC168A19486FB4C1D31E05643BE95D9461B0ABFE70
105DFA58305BFB1B83CFFC76259E25860A3544DE8DEC200EDB3A2C7866C97767
8C571CCC9FFFBCC6B653C59C5287D92E1A8CB5A195036AE42DFBAFB1E188B411
619A92A04A4332AE7D030564A0EF74AB93B42D675F953E92A64E782EF8345AAA
0EA74EFE4492AC0F942D4F8D5814CBD0A6EA1306BA16CFC5D47C6DE264B0935C
C349DD5F31BACE6BDDFF6716D141BCDD4FA9D6617B775401B5400D9C28610AA8
D48B790EDB4BD5CF0864692F04B5CABC5928AE68403AC7D2174BADE4B196DE9E
61C5FC4B3D12D7367371EAF1BCBEBF03F18C2C839AB44CDDB4DC2BFBBEB52F81
6EFDBA9CFF83AC072C75218AC4F66E033D3B8D6DDC59C6DA3DB9B063A7C548C5
8576081E074536FEA1F9734C08FE0B84109D86437D096DC2576D4E6091269F30
FED66BD929918A29501B77161586A6D16D0296B3D4677A6D2AED73403C90884F
55AF936438B4F66BD66D2B1C6378EBA79DF5CB0D5BDDA62504A20E6FADFC81AA
949D18BE7A0C27B1870062A9EE8AE41F583F14AC54981D7C999B88588E3BDEA8
34A3B0F64592C48D53709AAEE0BF09A319FAEBDEE27D69DAB92802C091E2894A
B1B6E4F2872DB1B19899E4BF85257C42A6ED10B028536FE345B5E929CB01DFC6
E4AE406203A42C91FF4A99DFB002671EDDD247A356EF1F09DEEB5B7798D02A78
8D8D5C1AB2851588C367EB91FDE0F320FF41E45F607673BED1D4343512ADA1B7
8E710A10079F211FAA5227E6063453510645FF66168961B7D66288CF36C97474
DF133F74EAED1AA2DC43E40AA823E706B59A366BC76F01E2B649110CEE64FEC1
12E525B7397893AA3D939EA7116A4882908FAA63F7A90AC16BAD16D41CCFCB9F
98E7642F05B1C31E48ADB3D9C7183B8EC192360878D62CF47125D4AF76C72E9D
95AA2B96376A3B83379B8B8ACBACD4CD1E898D431C0106DED8EE779C6561659D
E55298253B0B6DEB705E77AEC7686E7239AE6BEF8873E2414668CB1662B2A8AE
90301A28BA4D14E7FACE24737C044BBA551F58B9B7400DD215C4961B4BF5DB2B
C3064F6A82A2245EC1732D4E2DD52B5848B220B04AABD14C5092F60F1C34AD72
5927A1468C4192AE8D8799A91A9EB19EA03D4880DCDE7F79220FFD0A87F51530
D69B11D90001545C4F385D60CCCE14E388A7FBE9450BDC4365D2E660A69845C0
6CC1EB4C3D782F2BB7EFF536480AA43F0D960075B6041A6BBA98CF908FCD532F
97CED47ED2F24D460DB6E43E1334A065390AAFDBA137D3B30AE2D428B2793378
0414B8DFAA71CCF2633EDCAEB9A88117633BBD60B0A8C799B488B68D6CA9C60D
3A774AC7448624EBE6A7D0067E37C0C98245E415F460780114F9E0E089B3BA3F
B5F7E22DEE36154C1A9FA36793CDAF2C98FBA727B8BCDBC1AC8F4557B8E2DD8F
082C1C06DABB32BCFD7EADC3FA5A495CEEFC2E5D15C8D09D13B0A98AB430342A
8C76E4521EF1341732AE1694E5C1EA3D87459FCA9ED5123D2C60F9DE58CFFC07
B7FEA769AD6DB847C5FFBF83A9135CC19699425BA5768AA9E2269D0AF9511B66
2551A7BD6FC76D51F52A8547D95025D9B717498EFC65F8B5D38042D86D3DB8E9
DC170CBF5F561E004C322217D2A01680D7EC23747A396D4B63AA2A08EBB83D28
8B240920710C102E07B058E5043EFFB246B66F0E152F2E3B592ED9E467BA41B4
D4A6C25F2BFAE740EF719D1C27F71B50303BFB33BE569D2D280A18D8354E4A59
B4F7FCEBC86BCD866CDB1531610AB8F10668A8CCCC9DB2CF6CEEE7B2D6E24ADD
3F895D12855BC4D8EFF39ABAA0D3138F5E51E6484AF6EECB73D8DE36946FBFC4
D184CB3471F958F98B5D411933144BD6EFEECCD0A65DBB37026729AEB90253B0
22FE6E299D8536EC3DC87A4D3FB3D3EA12EE51A708C6EA3EE34242CC3D37CD02
5624C7B916A98BFD34E7811526561FEA86CABE7BD4241CB4AF9E7DBE74C7DAB5
2EF2E3DC5AC97F25502F6B1DEB7FCD05662D9807CC48EC8B8DE4224378144F99
2EE1202FA5224BA74AB500482FA63DFDA98189B1C7022A2FBC90C5B6C0745AF4
0B30A241B262FD63934AEE9655941884D3B9FFABCA4F49031745D8620384BC3A
AFE7A94C7C573F0711EF874B2B84317DA3CC28FAE4EC46819FA3CDFD931CCC69
00B258DECDC3E77C89E6F4808F7AED76D89B3C3DF7FD48646D6A812D934D815F
0F72D4FFDFE5332262C12D8255314897422139DD5CB532A8A566ECEB61CF2BF6
035B98EA90F559625C437D4982DBC5E131E55AB411974C623C8BA08E65650BE1
18AAA0984B2CB6DAD323811A946008743118F5F985261411A0F356AD73F32685
9D2CB98E99180E8013E922561CBF71B7903E361DAA5BC1326E0488726E2D6F67
2352A15B496EC3FD4E828D323882FB90B91DE0892143A3166E8D48C039D359F2
E8A6DC5EB9B6D9D3B4CFF4CD3FCB48075E30670982DAB244253B8FDB3BF67A6E
AB2D85E1224DCEE480B4C93C463A4D7E48F5DAAA4F97931494D07E520120D3AE
5EF9C240EB792EB349A684547B6F5E170EB99AD5E6CEA274C554B884C3BD0416
A6805C6D9831ABE1DDD6F54CE999BCE6425C6A0BE4F2A54569A59D638F477701
DE2E6DD79A6CBE75AC692FA0725A24BCA26C14530589BEA51FA99398860E1C25
2C17EE576B7ED658ABF84A272876F04BF1B180B36040D8AF94F0747C51AF4684
9FB08A52C9349C362FD595A48C117213B7502DAE7A2CD736D37460CE2099273F
1622C089AB3CB216A5C27D6347378910D6CACAEC65AFA2F6BF9C9FDEA1FAE0D2
5E6E70BA3DB431A3146628D371C2D158A1BA65C8D2D47CEBBF67DF0B2C30952A
4DD9221DE09A77B967058F386432F3709E60BB4E038223B7A6E419ABFC558993
7753F78BBC70D112B59BA801D75428F331EB561A6F257C8BC672F02A6F3A1C67
1D6471E07D4B70D8A19389EF17F259F821BCE199F59281F5D884990D92861BA0
BEA5DA5691654EC7D88996599333FDAEBAAB30E04E3C78DAB918F954D8FFFB83
9DEAEA332CA6D50B5A6E3B5AE6BCCD2299E89F7BA5A517D1522E930BAC7F0C31
6E428E93741A4C1C240FE921E1C73A525E467DF8744A057F57EFD7F5B32799B6
104CB54EADD6F5486D710DE2EAFB42EF548BEB991F9404E08B6FB89F0E332B4A
CEE7BAFA437DE92E7E7CD84C29B954F01D78D540244F1A2AB32FA86A9A03D51A
4D891F01DEDC14AE61D69F128E67C1DE137FB0F1CACF41EEA1FCF76D07C76DD7
6C609D7132DCC80324E9E7B69AD561D450E261F98A900F000513FF1A01B6A012
283527EB8BC4C518E986CD9B22424C079B8D837F06A99861AF1A622AA22A7068
A748C88DC338C3C53286D07E50EDBAE96E2F977566D227C89956CA5118226C15
6D5BA53D2FADADA2872DC3E2C775A9E06FF69D3E635851E1B94FA0EF759C006D
83B9020CC042D645800F41685B66162B7BA50B9C41D63ECEA06A80ADB6E90988
6A258CBB9ECDF441357E7578099A55F53C3191ED51EF2886DD136E9B0699F302
FE4948654D6196120DB4316E166F1E87493CE53EA0BAF783A51E36C7470D3FC8
55A45D783BE420D0EBF9B243D0A97D742AB753CAAC86B733B67DEF84AD3F9E4E
97C0F357DABA8E637E9A6726F5479937AB6E48160D68E1DCA34F82F5C7DAC8DA
44B2655D8FF16526410CE158403B4CFB64EB4D80157F57E0509773264C8E4C45
27B0F3E12D1BEB96398CA437E97FBA9320B1C9566C43D5774F18A1AD10A9187C
32D91D47628C149C55F1DE2CBBB2F3B2D3F3B7005E9F83E783452A7DD7AAAF52
4606F1BE68537E823DA67CDF7320A7EBD38206738562BA7FD5A2880A9D3034C5
FB520162005AA4516AC684A1B90112646D602B703DBD715E1A1F39AA50287178
531F0BB511B9CA3F9CF10143D7A3770D4A2D67FBA2754AEBC032E9987CC2FFB9
AB979BD67A27DA5807A56B571A85976BA78D8CA670F4A16BFF2376D3245E2839
72604E3D58684EE0DDDC9C1F8AA659C6E06D1D68E9F7ABB5727BD280A74B5A86
0155B96B4CD17D25C1F6918616CE476C16F142E64F0673FBCDF58BAD19C9CFA9
D528D104702E4CB81E9F8B9AC35F698D0E71E9DE15606F3AE2572374361ABCE3
7BE82743080083CD71FC05546BACBCB01D2A84350BE58AD4D37CD7AD0324C05D
698C4A7CBFEB6691922E402C42AA2625E7E6724F5D76AB01278ABE46F435783C
FC752D3D41882C5EEC10FBD5970708A95E06EE267AA4EF08F385D3FD07D7F340
42F221544D50E078677CBFF073FD4478C100F92E1E09C29D03CD3D510530E3FD
EF9F233C7F55A5A5F4052789BB0B46C21B346636559FF6183719B34248238B44
0C8ACF2B4EC72C1A62821E2EE07EDFB52DD4C818EB9DDC623A15DA0432E4E6B1
5F9E7C2C8477AB5B1C5A25CE0D674CFF5899A0884293BDEB690DC928A68EFFBD
0C1263DFA3A326B77B817ADBF1E5A669A87C3886435AD51EF092B106B071FBB0
14CAD6B16DE5F5148FB3E95D59E1B6BD92860849D4DDF863AA472BA10E968F74
47F1D321A813CFF878EF80797B412FE1CC951F462E304D266F02C02F8CFD7CE4
2978A925AECC28E9BE0408AF6AEC79040768E5B137C45DD0C264F4FC57A50381
07C970641E672F74864A369F52E246723C7D0D809AE6BB7029B66A287D2BA92A
6C12AED6DC94B85331D8EFF10A82718E34EB26B4886C5A65368A3F252779C43E
6AA18AE7A0F781E23DB946D1210EB3FB33CC9366A1488228F3D9AA53720C1F3B
D4AD7F0A7A9D3E844904E806E10B9F9AC27B3D3535155FF8EDBABC9173948013
BFDBDBF63791CB7135C24F67C4008DB748C8E0D80DF10534E396038D2F706609
6D8EB13A25599EC9085E2B9E7DA09D90B7A66FF85EB8607564B22D1CEF8D022D
4C4BC04EA151AF5A4ED081C2610D456B96261B8A5DFF9AD69969D093C3B78B39
2E74D40CE4F5037BF3F802667689E196B77C55113B3F46604F512915B11602CA
145F6067672FB8716571BB0B2EF608AE1C4E8BACB9B687540DAE88F71C5DAE5A
6D3F7F62685A19DC0800FA613272C061A2D99F8C01DF7792836B18697134143D
76C8B2184A53DC34FB96990975B3709D0EF6FE140A6AE50E48C6C1963967ECCD
4DAEF0C9A5C8991992A2A1A278B2E9A7E7C3CE68481869E5D9C2B469AB08033B
D828F6ADEAD24254A1E62ACD213192985AF79EE6D445BEF843D218EB69FBED49
42F524AD86D1F924964DA89C967693A2479826AFABDECC433AFBDA712A5F01E2
CF453C1EE606370A71FA7EFF2D8666332BEB82131C98574DACC3C458B6723E3C
1B9F7DEA75E432BCF9558D05FDA5C1509BB9B7E64F11EBD2B1472F5F59E0E5BD
4CF987BA07D046F144FC920192BED48B5F166FBEBC52B6102DC6838B6D167DFD
3C53D670327E1BA7EC7103BDE77ADE41630AD8E744CFC1B43348C344E28D70A1
59A619BD2BD09A30C8E6A179CE89563B772613025B6C1EA9A0E4DB49AF082EAE
B47651885A69F06F22CEEB9192BB01E4F7668B8621139DF2D89E61146CEC85E9
0D9EC6CAAA1E0C2E353E8170E0C6A270799C6D1D1882B477DC8F8C673D793D87
1E2E45B19800E26D42C631603CACF7F0F9D51AAC0BA2AC47C0ECC8267D8ADBCD
244F0C11087A73911B71D02F67854287651265DEE2C684E4F4E774CAD66ADDF8
41E70439FB0B27E5AA90FDF423567A9C9F8B6344B31A02E12E1409C108839FEB
67CD51BBBE94D7D97082C8417E1719C3FFCD3C47B5C7E1D325F02A9BA3373BC1
17C5828B8ED9E0073CB68BE6FBD08EA555B871E6D6557DCC4857C3CB37686697
F5D74FEA5CFA197769F41E43D9493B4E713CD69F9E3F45CD82E6891224A5614B
F4EF1DD2FD31DDEFF8EEB937A64E5D3D4F344C2CEF37572E4BD892DA454AD777
E1C7C86996B95C59BA14D3E597D9BD47E5D3B31770C119005236906B6B49A9E2
D48836209FD44EA76C173DD562C939478D23E48A74F2C72F7E683E51BC4D0556
B70DF888CEEA5E73FCB142E2EB01CB51FF64E1D14C3A2E667C08763A1CE79DF1
586378263B970E4C03253DF2C844D6B6066747C05D4E9E67B89E3760B59AB281
A739E8C33B06ACF50F29F5A7276975721431F653F79C141B912A243491376680
6A6E0025660AA2435C79A8266DD7736F8DE9FCC47AA193BCF6411321D6EDAA90
8DEDD807F1DC80243CCA42D30A70074631CEBC771ABAD9C87BDC7FF6BD24F975
C15C4E52F038F5EB123F5DD8B610CA36C8A6051774DAD79E4E3DD10CA06A9193
086496DD709A239A40BEBAF05CA22C94624084DA481371460AB990555BE6A705
C38565CE02C0350F3C3908A0E9E9D55190F15B7722380DE52F7B9A1B6EB323B1
CB6A987B3CC9ABEADA0440A13599261073FC8F97CCFBF0068BBC189562163602
A8298579F595F99C5C3DB2A40A641128FE17EDC526F59DABA970CB14E758BEBD
F0D49F450324BC79C6F9D980A247710BD33BF7087FC0B1249758925DA7EC0FE9
64BB824061DE09135230206A827E5D090A80BF5A6CB5BBA82A02C9691C05C093
9F1E33923283BFD52DDEC2D7DC09D713BC24610EB7B476A69F111F8D69149BB8
FE62CE26B1F7DC1B9FB7FE98574EFA7A5B9CBE34AA8132345A010C52D9A13047
F92408B6BFA087704BF45C38DE3E985EBFAEC86C9FE5DDFE927E2A756C2AF5CF
FBC09C22EF5F69DB736D8F6C864A245E59194918F14EB663FE45769895505540
36B1C82D0DBB4E074AF12078C1A5217AD9C42307EDCA326D18DB4FC12F7A8E98
20207DF26473C9C949A2D7336AA1182A8380E74F8D4D4FAFE246FEF66C656BAA
613D3ECDCB90D6D2CBED701DAB5CD51BE8FE47BBCF8D430FEF741C8EFD42A179
2CE5A2B6C325C39CD88E4B559CC75753B4A8BCF98679477C990194DFF8D61E8E
BF0F4C0A581F78A7B9658DBB9A2217CFF1B05EB9640C309A5DEC47E17D66FDD3
DC423DE42F74DB66A926919033A66B41D243CEE0A63536BB972BF5FEB9212BF5
835E422EF6FCCDC659BAE3D20DCC2D765942CF355984F3345A5FB2AC4BF491BE
6C96E4A3E280E97F5742A5C2C8249146E5F0381677CF8A9418D62DB543B865B7
B4C5AD2AF184A4C3FF125A0742C6E50275E46460F6DBAAB372244C84107B983B
1A5825DE3426C00EDFF20384F08EE78F508778BDDF177521EA624C54D6D7AA13
FDD13235C62181881A7E9D65A245677681E7EBDDBDCD2CB962E13DC29B29A5D4
A101A025FB09B9281605A11D2E161D0DAE79AF1673DCB20F3AC9524184E3EBA1
8D6AD7BE5DE71E8E38F2ADE06A1F50FF254EB5EAB5A88709239F49725C691171
313E06BE10AC89C0A600DA591F812C272C20E6F80DAC6D4CFE8CA5D00B9CA142
D4C3CA74ADB8257A7FA38CF4B134DAC44DA42F84C3EE936115D7169300998754
3ECC187FE0DDA83D193F385F1496CC87C9A5BC44612823C838AA837476C47F7E
976B743409E90753DC1A0FD75224CF02B622DF6D91D4199A8C9FA8CF7BBB5FEC
D9AC6B1DA2D5D8FCD132607964E58D19D8317B77DCB090E456C1A83904F00C6F
8129E347C6489FD4FC798ADAC4DE09772A21B3974899A4C8F890F590030D66AE
0765F65D7585FEBA4DBB0CBF250BAAAB98CE755A9500F806DD10BDC9B0505DAF
EA612A7830ABD70C305258B4D9F7DB1F6D7B018A4020B4EC65ADC3A6B3E03668
6C04E7278720165613D95B33442D89735D609CB0F6C0971EC9C5875A3B85B629
8C3E37CC6630F796F8CE5ACC4F49566EDF37EE388D1062032B0926410DCD7B27
AB2364B15A1059D1E741630D662CE04C6B0ED3634DEE998D6778C4FCB6621B84
EEC2F6CE19C98E0D36586CE437F473CBC9809A68DC93432DD59F1CD8267BB8E4
84F4DB11FDFD11B254DA5A793C8FA25D7BDD0AA168B00F3C11400F975C5F03E9
A6605052AE320D90A59D8320CB58859AFA55EC350F2C42910D120E2E8524D791
A1AA2ED4A814CF1ED8104F24183C132DDFA19491452861C75C68B5B1C1791129
C526E7EAE150B2D3D157CA6CF67E7DDB0E5570A70C393231DFD6C0E7635BE37E
23FB873E2488086BA272753E307CC0556B6EB20F6A60F1173DD50937EE2285B5
F4C11177E1628753FA52B1CADD9C9EFCC5B157338F7BB4F858753C25FE7F0047
92797291E068A28BA5B57D6720A5D3F6144C50DE4AA03019DB9E8FB1C4330EAD
D31ACE5D70E4A43CB7FE344EBE3AE0E52D9C3EA6DE3CE77719311E1BBC032D06
6D8C81A528D626FE1CD34F27DEBDC42E5E29213DC1298676F871EC0375911B07
1DB79A9634828749A6F3AEE5D83C91AECDB5C751179DABF152BED6C665E4C149
41B3BE69F86CD3C802FD59BADA3433A0253E83CD9CA40AD9B3BBE84235B1E451
7F49A868C4FFC458419F9B969A0D6C120A6621BD68991FD5593F3197223C9F0D
4D74301C8435A64C9A456DD6265D8D0D15BFFD4124F5317BA382A902F008AB5B
92AC6BF1104B2CC456431E7781FA764F314AC16BB1740C1B9A34534A154E2B04
0648E12BF30706C80B42BB37178508EB5EB02F088194A068CC8F5838B932E834
44BC237F0D2BF7BE1D620EB6BDF13A968868778685A0756D6FC9E086EB9077E8
BBB185167FF073AEE7EB7EB621EF7D258B306E1D326A133EA5051B917BD9652E
F583571C25F5DB1F1244774386688D471C133CDD3F6A0CDE19F92787597AB872
C70647E10F9AD20540C11CA4AE6C4C5BAAC784FF8E0AF8A0ABC2E62D2E80AD67
9EE74A875CB81117860851C3F524B3FBBE962BC9BC61AB5B4505DAC87DC3BD0F
9A93F0BF422DF870E28D734DDC83068B6EC8D3E52FE27481E946079BD7D05CD5
1DB221CAC21B6DD96604B1948760C45533882052CD47181C522FCBF73C1782B4
E53F291A7FD40567A7E7C99DA863073ED07FCC3AC591484FA6B314A559596603
0478E4334C2F2A938280CE4735EAAC3B04AB26DC2596EC82AECC9180EC403981
6A00C95E62960A51C8275F812EA8ECBFDFDDF93EB790B3112BDF1F9C3E5E92EC
2017CB1EAE80995228C239D95F215135E2C61D559991ED5F64E18887CD987999
B6ED8D82D9CFF37767DB571FAE6AED4365A5152E7A0F3AFD06F2B219A6CE3F64
8E905DE32F9848F9A42DF41AC56CFDED584726806D7126756524C0FABD33553F
A71C10A239CCBD5711618EBC8C7032E309C9D420911373602D71A58857864D6C
E7295F6513FC15FDF323A7899A1BA694A320774FC770313AB9558AB5F9CB60A2
B2B7D3726D4D06CAA2CB08BE11FB8EB109278BCECF4B659DBABB4AC20EB75E7E
F41A4D5C2C4625F1DC35098DEA7E69B3E3BB0C3393F99E84F89E0BE0C83631EA
6A0B2F7E1EBD994067B4A90695D4D77C117B78224948053F2F83AB1DA0B42BD3
4784E2A1BEE51CF70140F9AE6CA9ED6375A68FCFC8963EC77FC8ED2739AEA6D7
B99D066794BEAF0EB7F110A4DC32DE58928B59A875DAD61C76F5CDD4EC5A431D
09E7307A1D58076DF9DEE1C864902C87D7922E56CD83205249E2CBE414A9EAB2
91D61FF851067307FAB0ADB527A20000B2D49835C34DE75CAF4932693BCE009A
5801BED57FD873378141C0D5E654274F0A884B4E81A58647CF9CDC518CB55133
4B31801C22BAC713DE7CEEF020D20AA33F51413323BC8250901D653A70D47671
678C8F5FC47D48819DE8E8AD38D9632C6F9348055F9A8B00B3994D82BC69FFA6
9B14BBD009A0C0F023D4D6706CCC054450BC04C0AE0FB4F043144C99F35A215B
53DD2A8F46538BB1F7D664B4981879C6981A506D46D00A4EFDC5C309F693AC3A
D7FB22BA4BDD28DF0811FD0F8198F20755509B9B2762CD95B4BE8C22431014B5
4551378F52F29CBB22BEAEA5C4120096F0216A62A4CCE62E5E2182AF7389E50E
D336290176B3E0B546698B6A12F524DC97030DFAEA967EF40D3DECCF250DF79F
6BDC3E4100F0A4A05FC58D3771E245DA8DF59AC1DE9DA239566EF511443A44E3
3CD6263D8475A02775E65749B11A1D1951586B4F8CDABBD99760A8420D6F8530
77AEF7EFBFC4192764C48EF040CCF53D9B6D16417A93E7E8AF1747AA7ADC1A7C
F33A7B5905412A63F288F85645B0DE47D1F8A866D9CF3306707631F5C6139DE6
6EA86054E2297F52BAAE20D97E1FC3DE57410DA12ED9BA78F96F09A6189A631D
055BE403F40E7E821AD2CEA704740A4031935D1DD12DDD89CDCD7CFD31928C85
8C1E1460367812C1AA99A432D1D3B125BEF53861F051DB49D00F82EA43370E6F
28DB5DE10920E4E09C2C63CFEEEC12351C5B069D0B8C6A16A9C18CDAF28707A9
105F1B664619F2F0828BB054916D49D696E0C188986BD3673FFAD5EF6D07968B
BB7CC49699FB8816F2052B5CAD0B41467295852D6808EED272D50566ABF8A5FB
CC751A7D639E32C569B568F112736EC85AE9369F96DD4C5A69890997C8243C40
4AF7E10F76CCFFABDE9A8C859471E2E346171058EC301300795136D7A6076354
6F0D3BB4670370BFBD73E9B2AFCF909CBBED980636F693C4122F832CDC1E4157
4605591407E0A882575B6426A82F101D8FEB1CBF633184CB857962B4748549A2
EEAA996F4CECA9D43A2BAFA4423177AC588352B7AFAE06A7761ECB1484D64371
C744BC7DF2A62D7F9B5160029C2C808865F2E4A0183C3F12358E6647B84ECAEE
609B63A22ADF574D314348DD5A81B96A24B340365FAD20A29EF38C14A7D31F07
4565A14EB60996D85458E19DAD78AD44C7C99DD91D71CC2A3E0EF740120A568B
F3D060C8A2C7CBB362ED6586B2CBBD94EAF2E7ED4CC4A671F5031C4C1A09D4FA
7A93198AF1A931967BD52D0C5B4A951E9D6D1515E067FE74E6572B0D2FB1FEDB
90E9B0ADF4D5EF841A3E4C99A75DB103C3AE71702350D62048D1958D36E172F8
B16BFB2B9ABA68B9495E15ED996F3AFAFA8B8FD737DC59B385F7A70A6C3D6D39
AB0BDE4E8A048DE4026A9FCCF6A3070335F65B05427E6D300B417DF52C331B84
29375CF65BD5C77819E5D1E2696EE70519534343E3827C0F23D079A35B39296D
48E85DDBB67BBD21E4FD09D999F897B4E3EE469BCB07BF3085BFA87F183CC0CA
3266EA48BE13FED8F40D12C0D6DDD6E86ABAD65178C157BA43FB8027ED09B468
C9F53D74DCD9DCE4684D2ADDA83AB066095C01A6E0CC24EBF6E7C0BA86651864
8AAD0812AC4899921DCF8300B818383FE550B3DF19AD8BE0C041D4B25FA514BA
B9F71497FB0B5F6FE0FB86C51BA743225AF63F50ED7799609AE871DAE4F8D036
1EB39B6E1338BEE3601773287512DFA96E2CE6100C3628129650B3675612197D
D34000D9B35BC93FF2EFF7DB3731D14EC41C4F80598937ECAAD0FE2A9EC2744C
84C939845F6296C8329066FD7220DF1315C0E7745529A915F8AB2861DAB731C2
76CD56F6D0306E38D9F73D6FE757A5E3F3C4B5D73C0DB0F65716D6CF856DBF90
0704EB655446D297C39AD6067C60D1CC7A48175014D632C146169E18EC90AC73
9E8561644CBAEFD4D634E694DCD671AF75FBA7724394A898046D3F93A306F062
52934DC43E88B33E12469A20CE3D04571FA975775844A00027778C1DC2788647
907332C6C3A4E91C751F4C885C92E42A5A8CFCDBC6C42B91BEE0A8BC2614CAC3
5F07195F05765DE9027D03C18C6D1BC4FDD53E2958069A906E35BA14F0088BDF
5E020B27F5307E54B6F4A4858CEF9F21F9906798F440E5A3CFDDA5A71F8DB20E
14DC06904F068772DD9D4F594DBCACC60041E039B805BAE98B8E3A5A1F4C9366
9E2E80CE90879E1206F666C1FE5873BFCD365CA6D8644816FB9C09C269493800
1615D3C3CD437837CE4280A353BCB91302026EFE1F82D1EF8AA985DA68396A49
F3AA8A56ADCC26A1BF989EFCB25E06463312D485846414BAA188059E478130D4
0A54D14657C8FC5EC13263ECC8FF042AB49CEFF421FD4924020B3B11F1025BF9
6BE6F70DC2D902C668A573248CAB687743340FB38C4FC2D4E9C449E147E95DF4
0E344F37CCA8A1BF10497583E2530DAB12413A325D73CA0BFAC9CEFE1C972EBC
09E7CD710FFC85D4EFB2E11A6248C0763E3679C8C3675A673E6E6554D774D715
491E2407EE481A09CE83D67D926816D58D4E2306026405D970EBE10D77D99473
1C0513A20ED79233548C37269B71E48E06FC143335446AFA5462D276189F814C
93D69932295EEC50293FBE94DE6129431A6EB219CE4DB60769706FC824C284C9
5538B7FDFF75CD3641D65142DE876540CB8A5EA2C99F29B4A22D9E9AD1345E1E
994ECCEE28EA85B42F242468E66E3B2FA800D9944AD4226A2B14DFD19808EE1E
1C13F90EB117CAC9CC8A971B41D46E03F9C18DE07CD4058ACCE10D39633C0A68
643A11636472F5845AF507C8EBA6518215D75034142457558D69FB699E5EF78E
CB6C3E02F2391C4FFAAD44E1C321181170BB05CC2CAF62830C2C50EFD34C4EF0
5C71E16C6577104F6CD1E56B59747A1FDFE7AE75FBCB672B1B3FAC7C61DA6E68
3693241EB0CBCB1EEAB6E9391226DC3147E7B4F682116D96D8E1D86A54EFD1C1
1F0C802EAAE2465D8DFA46EAE6ABE863D7AFBDB909A0B9A947C720CEF049A97F
439393AC4BA9F2B4B8E959E8877C931CEE8F81F85DBFA44D2F9C0DE26C2417D3
62C41DD7FBCC9DA1C09209777C0495116BCB7D33A77E6558BCBF3290CD91DABE
CFB41C6DB983ED839187D445CA03234AD10ADF073F312A8B3CC3ECC121A4872C
7A2E643F42D81AB299B267AA36712541A117E690E3FDB6EE52E0BC45E66747BA
17A5AF7669BE5FDCA9FCDAC78950E83A808B59670709DF458000AA7477BE9040
B858268B29D85586F1E197DDF5BE99F76EA9547AE48A490896EBF9151AE7FE53
DA19BD34C1BB16555DDFFC600DD1485798B038DBFE54DFD91B57619324C5DCA1
C237B8697C0FF60AF2EC1488ECF4468C5BD8FFB970A18CF5A1CF3DEDEE81F75D
8B5CEB205425442B328703A8A47BA5B419C44D8310F79B48D59CDD5C44A672F9
820A608252D96331C25A10BAE939C2E533478ECE6CEB9EB61002F0A301C772AC
BC7A0A254B33C9C6A0CE07D2FB56BA7CAF0AA00C2C30952A4DD9221D8DB3777F
43EBDB92DE5575A7D3812452FD3AA97DB18038F937C8708F11B25CD110CFF50E
8EEA95CECD96CA4A2FB087258CFDD49BC425FD7D7EE5953A40F8BCE27C810BDF
978F17B469C463637218A766F14B803332E19DBF11EB71B8DE00C85449D43DC9
D1545A8D847E25726149ACED3AE5949F102D4C85D6F24C6851B219749CC899C8
5A6A97414AC74CC9EF1AD91B63F0F1CE0B6BD7390AB0E3183922C738E41AA810
75607335EA30C9C341FEF24C57A987A2B819B6FDEF3351734FB7903520B2E014
EAEB97D111AB6B2584BB1EB0E9F429E9DBAB6A516DDA5E76C3D5400158C27289
E20C373A057CD511412A2AF308222559DABF07BD914ABC6B9F012D4C70B8D76D
3D168F9CD580D7AD66A2DE7D9CAFBA0562AB6D2E18B39A33344959BAE4CB57E6
FF0CAB1468DC84FE0F3AA8AD97F434E3524EF72D4C5EE0DF31808CECB597CFFB
7CA94FBC23BAA5A113EC30784398DFF65DA62C90E39F43C689FE4605247509EC
69336998602318DE152D2F8C72F5CC1583F68416E49F71D056C7066F89231C91
C81AB8E5DDE14466C59EF46819DAB57FB7BAB5600641A9A805EA12B5550286FC
03A4B0291DEA72A6897F5696C127D3C11BF012F62927A41E89B29CD9930C9E18
593DD201B93D885973935C91C9C61FE748236AB4CF487FC291018FF502AE7410
AD4E79CA66A393B2611FF12D1B9627AF10910DBD64011C5B2717165B1836B09F
C74F9B037A23FDC85C21A80A68AE510704F729FEB3AC16B6E3061F8D2A2FA9EA
C9D735A9EAD4C689D1C554BC73218607850AEC152D77D1880741555F4B089778
D5E104CC29E7E8AAB298B260FF152DADAD834A432D37D14D1866701F762EF725
82DCAA116092B01B8216271C10111A6C65268FCE9BC9AF135276C81E07F1AB9C
6BD12A8C843DA6CF1498EF18BE533ECE9AF0904407BB163A248F9A2052CB8980
119F3F2EFECCCF2834F6C9B1EC9BE8C9C04FEB47FA5FD640739E1F09D5C24A8A
9CAA9A5D07DD4E68D1245B3D956F42146F9744EF6A4E7E84B46119AD70E23350
C13A50F6D110323B8E21035C6A98BC60E131ED9AE9AE515CCBCC013A0F9DE027
56108590F9F6E2380E0A2E690F758D2BD95321415E03AEA7CD03560FD765E4DF
9A51A71C431CA7A1DE64B26607D758E07D79A9450664751BBAF49FF7A3936254
C1E13AFB362FA6DD77AF40EA5FAE1C1EE82FD7EC0F93B3F80E136484827773BA
2CED4836EB5766031EFE4EDBB7A447DA4C99661BC83BBC77655DC7D7D0600280
97D521761ABABD7B66781551BF92D3103EBF224F9F9F718585EE5CCDE99138B5
C75C7C07F66C057F8811A4AE2135A41FF42EA4870FE04CECD92413AA146D6434
32F79AADFDE20FEED119AF2AB84FFEBD32881DDB7B0ECCFFCE5E082CD7FF9228
05C21ABD92B1B3813E02672FEBF3700BEFDAE47688F52328AB1A81E08DE4A980
8979B2FEF19018012754089BD49AF82A9776B09D5CD6919ADF2E9932C4295E25
982DE1DC5A7CE3D8B61CECF668D3B57D6EF154E44DD2822D40E023A04D6F2539
0030995DBF48DBC939DB010332BE7D2DB973B9D7BC899DFEF1751E7E403F5F11
2556067ECBE9453F98204214A3C541925997CB0AF99DC1251FA8EDFCF62FA417
B7F1BDB61AE87F1906CFADE3EFCF095AA187EB3D0870B8B42D8C0FDBBC83D006
7A8069A068E7AF13A606E5054E364844F0BF03BE50426089EC7071143F517325
4B673D6230D5F2776ABE58CB9B13DB857C0A6824B38447F59D83E31A42902243
B83D0B554184EC841236836F8DD1CA8215C19E753B53BDABC1384F5553DDF08C
D65CC806469FB5D13A5E991E2EA79A5457C0CC70B58A5018F201304D0437CFC4
AA02CE07EF6731A963F7F6C74C3424715D62E959144CA3BE1D52EE1687261717
8039001EB766CDC21195A6A7487485A275D4FF465552FBC5C4A8FFAE0D6B157F
D406FA22876812040E0AFC953C2158D476D0FE0725DEE6886BDE038E272917CA
80A0254541A3FE4712B1D0739BEA5B0586EDC6E39D808566A3E5DF65F790B7D6
27679909F5CE6D50AFECD3E00CB2CD741475AE26EEDF1FA520CB01BFB6C1B68F
AB60A148B91BFB72FA938A8960413EE329553FE07A785B01DA6C6311D79CEDBA
8BEEFEACAD344D445D16F0D1FA9D300924702BA7788B39A866AEB8855A815E65
501CD6AFFFC0A69B14BBD009A0C0F023D4D6706CCC054635CD299613813684DC
597FE51BE13F6E5753A079544ABD9E23AF2E0879C58516AC14F250F1A329FAB5
4F53153BE8F3DAD9530F7383E3B9EE0B8A588FE99B7B875034892C346912A367
6703E3589F8E35B4F425A023EC0FDA8B73C48BCB2E17329B1B30C213CA73E745
515DFB5E3CD8A2CB8E1DB03BAB8CF7D678D9916169393F84630D51AF810548F0
5D3EDE0435F57FCCEE637518F5812EB351B655815438ED09D678C2C287675D73
154A460057914C456336CB4876924602E53DD9BFD2DAC29A0339A42F6A342FAF
A1F7DEB194A2E03372C07EC4D6535417772E66F4D60ECD06A453A6C102F17132
08C99AB6CCB0BB3E50A70B6A3E6E85C6E8273A0A358EF12B2D5FA77789F403D8
0BC3FB60217ED18BF7D7541264844FECA5CEDC552F7F63440D744A7DA9943B50
20F8574CE0C84517DD19771CF59EC97F7296BDE5428003144B110E5FE695D001
6D3808E464B92678BF4F829C4DE8EEAB71E100FFA457F1244C6B5E4238967370
A588E43EA7817B382BE2CEF2642F49C46C2073C7740637BF6D2B38447F6160ED
E6E31E85314E9031A6E6EA3C9D5D4269E2126A1EE90675F1D60FCFB1B6D26AA2
4377760FEA6FEE94F88F41DA2FF180A3D7E8EA917D96B6B1C07E4B12A77A5DD5
4FD4ED06BAAEAA4853054622DD8B15FF106593AAB0F4614B156BA8716E408987
4B317CEC679619E02CF05A799CD1D8894D145968FC237F1281293A4DF9885E41
864E311EA0F30D2DFC8DEE83F6A664BF3FFD81ACADF24378427684B6F259D490
7B3DA41F268ED51B685C2F679CFA0685F4892E0C80DECB5CF3FA87527C35F3CD
E94D950B1E8F4C440B5BAC980CFF66BE9DA2BD1B660010CC6E49E2AF262A9B23
992492626D803FE071A2DC7981C829116BF011FCC45247C82FE6FA959B5505A7
FAE6AEE9DCF1309C53571086A1EF88110925908148F724A5D21C50B3F72CB398
D097D7FC83EAF094FB08A17E360511788E9FC8F976502D50077BE9AA1668BE62
7189993779AFE65DA131C87FF582C8ACF9BF5602534BE942FF32DF248236BA0C
3AA704BEA3521ABEBAC57E0BB6721F8351D54902E948BF7A01BD97F34FD6BE42
5970F8C35D3B49240C96C6AB3C586AF1689FE77C7C772DDD390EF466D40B6C07
3D99F37D794E9FBD38B14F7F3747553CB4F280F99215C53C0CF3CF5BFAA68B09
F1F6C5AF36654BF6D9879520C63D33445F2161F6EC1BEAFBCFDD9C8B335E025A
19848C2B5DEC203E0B2890D204E55C3D6EF69FC60D33727DAE527CD305E61977
C2F8EB810574F71D1EEC0AFD83A8D88091CBB6B41CAC835A14B1FA3C5919589C
C2B5DC72244B76C82997949E07B104540071442DEB0538F7B02AAE4AA033E72C
290E08134D763B15BB6B2B3B7C1EA96FA426F0BBFC8CC688F21F4F14EBBEE9ED
27DB30878A978AB04C5F9A64768B17FECFA7C2E70A4086F25183DAA9D8806D61
E952BF60DB989AF3F538CF0D5D1234E2DB9A16B9C06DAD55B75E31AF8F5E1604
4A5448B72CF76FEB330788C6D8881540047B466EDDA8610C578650E9B6EA14B8
404CE3B23DD4EB3E437DA8C0E186C1646CAFE072D901CE7AB781066EFB6EB11C
FEA1E3D09C21EA0B241A9B8227A719A048A889D4701D567C3BCA88BBB1252846
713AA2B67ADE09E7E58BA9F3213E4AAE753E34A7C120CEE6144744E50AD48FAC
A927FC6E077DC85C01A5EF4EA9FD20CE0FA2FCB54161BFB9724EA8585BF50736
6B20EC9B779E0A61E6E8F50ADD39CD7A644428567A21B4DD6E68DA0E6D5A77B0
C43821F04133CFA85D7F90D278D7151D59D40D28184F00034AF1BF771340BD08
5085D8BEBAC637D3C1CEAF96B4581E1C91147BB6ACA8A5C76B0F25FF7E645584
A781B98E80520A5A6F1FA87B9A81A3249FCD0540EDBD9496769CD6DF3421326F
831A69254A546B6DA8EECA492D56B2F9F55B3675362684F24F3418F9B6CC9AB5
C8DFE79E40267EE1B200CB3738D894770AD27F2BAA1A8AC49D55D311D7B2784E
71B37F6DC5B93BDA314C4167C25603722DF8F19F19D7D8E6936425CD45C0A5A4
197BA038ADB36BFB0B0C56A78C9639778A72914EB3707E9E24D51CCB52F85814
F259731A5831CBBB712BD4433E492B5FDF3908E6BED58F3A1D66E217CC46FE08
016C3DC5161B74DE04DA7417C89C519090A230BA564503FFB362F8485896191B
E975E0741082FBA1FB7D44FCB548EE2EF56D3E57F221A0D220E13BE2C4F614E5
9B395D1D9823D7D5F126D93214B50F3A780029683207E4F685D084DFB3DC8491
7CA80C31C2E6B91A1058A0472CE2059E675557E53A7F82EE005220CAC2404DF0
7A4DE07D03E69BFBC8650851AA63AC4A5A3BEC9EBAD6B4171074B0B21AE134E5
9AF05367290EB018423A89E00DBD0556F6C94D006F88ACB8C90E71F6D9DF9C77
800E047CA409DA46AAACBD1D1541E27EEB9789D3538A24FAEA2264AD9C7AB786
BB30C40075386C8F174CF30767FCFB1BACE58B9B77225A134F852F6EC3B1A545
0C3B02390230B01950FC6AFAE6B3F4AB7E650489941EEE1241AED66A54F208BB
999F009BA80F4AF54C461594DD7A470EB9ED9E667094025A81C470D33021157B
3E8FF819421FA0D6027EF8C615112A29AD57AF9DCF94E5A792316DE508679B11
650697901D5FCF5FADC38FFCD51D055A1774C2CD4D57CDD31B28A52A90545B8A
2B4827B496F5569529861FAEFDC91E823E0A0EA92E7F1118BA10129B33CE9E12
9B6CBD118B22286E5D05B52DB94255C26DBBDCF38C6DEF4CD092F3178DEE22FB
51CB8AA7DF9D46AEA3F35946992569E9AEDDBED96DF549165D28DA7E2AFEAD63
6D8CFB24461F6FABB33CCEF0B31F785B33D7021568386E066F2C8957F5FA09B2
E55DD8BBDA154BFC934801E02668F8AD4ECBC04F2F8ECA02F8611845D9A61C37
B190C6D99617C33666A20F9451157B62FFCC5B7F2DA556AD4E4F26B986DD7400
F1AF7BBFDFC5143F6433DF53BEBA6510E7F1354AB94A445ABAB4C046B22D913A
93327994EE55106CC8FFE148569D092447236D266170DB807B9B4FAEB1E14EDD
66381ED443B5F3E244ADDB744C0CFB3A5DA3D8A4B4AD36A606C5C7A59B86DDE7
887664801B2FBDF97EAFA20FAC74B1BAAB877D779576544706218CF236274FE5
1BC49CB5407C6AA424A4826726ACE6969A6093407F54838A0D22C69892BD39DC
AEFBBB0536215DA4129428DDB9858347B3C61607A5774271EA1ED8B9FD770115
CBF9435D16906E6403319BB0A6D343A0DB700C128DEA44666D5CE799B95C67E8
08B41852248548A34078B914F8538CA9D0A8283E24FF4AA72AD911B89D75B8BF
4F0C86F09DCA65AD21495F453435719CF23C272BCFC8EE865A63908987FEA3A6
C2C1F1218B658A5B47DD94FC3D85580E60350C80E9A09D1E4626A1B591EB60DF
5609E814C2A98E862C05BD9CB398A07F0C55F24A8845CD2BC751170B446F25DA
E0FEBA30CC4B0FAB251425B5C9AE3B63B76242F86EB1552E59BC0FD37C0B554D
B1A80833D0831DAE1AE89B03925F140FCBC6FA0BB1165C56D89F2B78929A1A12
DBB09E5786BAEE982B41BDDD559D900CEA87DD703E0475E54907C227729B9636
D18BA01711735968BD0E06473682A4C2BB2DC513664D54E824A5045DD10F23D6
3B1574A134CC099A59CC51265B1E15D308C8C480C6C5DCE13C53AC721035E3BA
7DFA8A2074766E865DE0518A39091E12140E207C6B1D53E2C86508F9A5B1A703
2ACD1BD168938D3196FCCB0FC82CB15776CBC787FA4D49A9018DF5324135929E
2E36051D710DAFB9FBB829E87ABB36D0DF8A24933B195F4865A60C027ABB0D75
022872A75325959B57E680D12CB80F8578DA877317B70DCB65336696D094A80E
B00E885B950B6B1439F400890FDD005CCB3ACE3FAA57797866FF8F794073A488
B6006E614CA39A0D46E8E53AF57376FB91A2E37FD52734D447A5DF73FCE7F564
9E2087E0332E918D288036FE27D88D40E0AF40F73F7C7BAED273574DBF0442FD
6A53699A01731CA9174CF98F94CB06B44ED8ED86AD055769135C40B705167923
E06F9B8A6A70C5F8A7713B79E08E7A8A3D9BC3770875404E7BD5D4A6DB1CCDD7
6474C96B4CA92EAD6B702CFC6C099B9AAF49317EEBA052FAA53114071750B8D6
180B4C38ADE34D87B4042AE3A39AE80789C4AFC686F4E4A3F297233E2BE03667
031D99306B849D4B8A0F95ACAB51502D23711CC562B315F2CA593A2DD8912765
7F80501B7D71161EB65922F686E254274A5879DE38E405D0F35C88CFF4BD9813
FD816C55B2318E320B4B584372FC6D3C4FD32B61116CAE3B2A07D6A156E3EF0E
EA375ED8BA6870020513937C0BB00285986C10BABA1C73841DB4E0D84A7DCFC1
B3B906A29F38E0ECB73664581B10DE61BF744C09743651F69E771D5CD3C8E9AC
F8751B83D06D3077F95BAC5402EE8C084764E35B9882BDC14A65677B17B81E8F
DDCB7FE127961EABC54A86CC3559FFB2076CCB3BD93D5BF30A73820E63A6975C
16484CA55AB3350D1C2DC62F81EB0B1C2BB356AC8DEA0A558B468B84012B4B4B
5EDB0210EFE2D2653C9DC2C3784106E161E74C7A0EB4A0151C8DEE422034B6B3
40AF6CCDEE8EB7AA4CA6EBBA4B1A8FBDEFDE81690806E82CE28C7EF3E4B26E99
CC36DF79C2E1F60EF2FA2F979A3D813D25F3B9B0C42A5C4E26B33E78E352D89B
D7A2BFBD9B6752B6BBCDBE4B16021462B6D1310A7EF30DA24E32B6DF584D69DC
8DD5B41D098A043178B3C49F40789309D57D72451E099899D23BB9A6AAE615B7
4C47EB08C23943910BD4D7E381658C788EC48F8029BC45EC5403863141C2A25C
FE7E1CDB8D6F1F37934939A5DF54127DA452A39CE7AEA770C4DDD15EE099209C
29C14B995A965EFA01830F03E70CC2169FB417202447C343BAB5CF874D3B7C2D
6A762209611C7E741C2F01F61640B027F6AFE6B8BD4E94A70CF083F21B15FF39
62EA655D70261AB3B4D28644027F57698B8EFD8067C435FA9FC0B60BBA6C3106
E852CCF5ACFA3BBB196CE96B11FE72FCBCD2D3922ECB0C34BF5F9489EBEF24A0
58EDB625AAE4EB2536BC687B97B6B899E2CB2FADDDA6BCB3BBC2B66FFC0D775B
EC1EDFED3B509385AC067FEE10F9660A5E8F91DCB1BDE0957A75D0D0D852A8FB
814433D0DE5C8CC10B7028EA0EBD7F54339E91EB7F9A69E417284EE1CCB9FEA6
1375D0F8F35FE8924F60307104220576857EC16957DF1282ABD3F32C041F16F5
B535278A3736774719533516299D09F766DEECA2AD47662CCF04A4D2B2E93EC2
C81008C271D44861AFDE8583097EFF86462CE910BACA85EF39D00AF0F37F182B
9D0EE223613474EABDD0BA1F877B765AF9310DFB0823121EA56CAB546CD2C98E
176388F7A70A6C3D6D39ABAE5A19638614926140C102FBFF497ABFB59F890255
D65CECC93889ECF8A293F296222D0C72AE259AD56B867DCAF0DD1384720BA248
CA8FF3F621D19431AD79E47267753C300F52896E507972D90C2CAE18E7BA0DD9
F73B5864FA75C3BDF521BCDAEF8A895195A237D07B1E9F1C878EDF02C11615E4
628D6EEC791C6EF95F3BE75FA7A527260D0CBA59B887199FD7286946BBD28CFE
1A550558E81A68C99140C27709905A553EED8AA77690440941BA40646585047E
69959B75BAAEED609238569BA552937518221E8838DF13A57958675C83F33AA3
699B1F5DD8E59DF464FA6FC0255FDCCE0B208F61DCAD37F6FF38322461F0A654
6F72CA78F06A0DBB4489E38DD4A5C2E7FE0294D43D5D594D9FB83348B5FDCCB7
F7B94E2EB42486AF7390D73FA8789EF4E94A25A05F10607F8BF8BBC58151AF05
AE33C4D27CB2CCB5D21D980EDF18D601DB8D8D9E127EAB2649DFB2A732793E55
919A0993CC3BF2D976130C492AFEB4A7A8D8E8339AA68D78F1FE7133314BA811
2A46012887884FD0CFE28072401898A140580B32876A97820CA5AD547E11578C
91A4CD92967152E25C2F6C85637CBEDA3B1ED474CCF8CD176E1AB5439C70304E
CD6FBA260A7E01F3BFB917FF64E1003504EFAE0592117C77316B0C702C15CB47
0CDE6D2BC5992180C6103A573FAAB4F5A6C3EE9A66695628A87949CD0D4D2323
7CA289FAD63D4046C56521B9B2DC022227DD0B21819E209EFB56FD6B9ED3043D
4DA37DDC469E93B277CDADADF13E609536AD489182E029AA30C8E6135556E65A
5FC8E3F4093B2978C54A08B1344A069CA60AC599349A65D4CFC43A4E5B93E3F4
DF0147757A440D5D8D288D799A60E25ECE20563520EDC4632978F1F20E861035
A8E6A2A8C6D071BC67A71AEB2EAE9E1F2A11EAE4C96AC9BB0E37FC587B96A61E
DDB35A731BF73207CAB193C829805C9E5724E165F7A5826CE63F590E1B5057EB
036DC93C50E089FB89D000836C0CFE049E7882FA2A418D110C2427601C5563C0
8CAD0AF757DB2223BEC0732977F611B648AA284DA29CD81CF44EBCB93578CC9F
807687DA85EDBCE644F5AFF667C23B1FC9879047C0DF538FA1D8457BF5E0FA89
6A8EAB72842B50BF38696E8C5F5674631ECCD2DAB9CC265A4AFC8B620753B56D
606557B1C0714F04
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4850EDCB990134F321F1FD6696F64BA101037918C9
F3EB2C616987CEAA46F6C052EB3FF6F2FB9A6F974915B82B6608CD85F75F0664
5644A5E3888713099F73E90FBC9681A6432D6944A68175A656D126AB96DEEC97
7DFB9A5ECCECE68B7C706A15EA93F5FA7800171D760667E1336DDDED349310D0
BB68B865F3E43C4275DFD82036752613F3FC722D561C0B5BA22C873A42C13AFF
73B7A9B8096208922179B7EDF55236F13203049ED2D3A304BEF0120285E9FBC3
921898A37465752B57535DF5054235CB5A713FDF779C161E40A8A8AD8074AABD
6A06EA11E40F1F4F4090C99D86095BE64A36FA8733362A8D4A2273879968020D
41EAA7F6C1A9B682B344B7DC94AAEDADFD1BD39385A57F9383AA235717AF84AF
BF5D808D32071618FA11E2F7907B9626CA16609BFEE67DB56CFE2E2B90BED39B
54D866320877A767FE000D8A3386EB1AEB2D99809C71C946EB77ED556CD01675
A5D45FC8BD04EAF80C756386291444CFC1D7F12BB4B1304696B2080A14F56ED1
959BD60C7F7F5BFAF8497205D4BD589967F17FBA10C2EF19C1679C5AACA4F9EE
B15E13977CA81B5026C7E1EF4FDDFF62E82B16CBE3D401AAFA4D973976EF232F
76C9D0C0793684D68FE95129C326682238CE9807B35B2C2C0C32F4122724C159
AA1C41DD94D0808809572A0A32125FA4D78B525B256291CA389F839797A13591
6197A48D453611484DA293AAA6B62F5ECBC9D32FD482C74A5387629E03895C5B
946117AA34217BC77B1E075A4BB99145EA55CFD1D12CB1D2E72636AE538232C1
3966FC6E07843E4FC7A8FB27BFB4FF67CD278CA322575D7590D77B4E03E63F7A
848E639AEA6DDEF55107E8C5B9DFFAA47CB3CB5A614B77D0112527C9AD97FDAE
5BC457971A70DB3421293E16959B64702BA858C1217A8B3B836A947462E0B59B
37C8CBC667F0052E653D33F067997638BDCAED6DF3A8F1793F71E79A58BEF6EC
47F700C376341D757B09A3E31F6ABE9EB9021C1A6E311CBAB6DBBC8AECB140BD
DCACE9B1E80979B7487BA2CB786018E20A5E0355AA33D6FCEF382799F62A9A8F
F8262E8DE16E9245C61CF3FFE09AACEF315932D79117A513F6863D275B80A249
01CC70FA943FF9A9F5E8D5716835F17CE3FCD6FC5EF10AC25471C19ED3B2D164
93293F09EA311F49295310B0C1AF942753C52402014764CE7026803F091EBA60
AD877E9208260AE6AF24100E2B365BF89C5B679378A7F6A67087C57B5519A988
04735147BE66CDFF2481FE35DBEE9CAC7E77D79BA760EF4C53A3C983853DE8C5
FD3F25925955F36A3BFF3454FF7B226C0F001FCBC5484DCFA46DD8D89C69C886
AA0247C5EE233C9D7DCFAAEA1E34B8938673AA6D760A80C38EFAE41268C528B8
5A14387C3E29D017EC16BE7E6918E11E7AAE31ACB6E85DE4B2B15B93B7BACB79
AC25F37A4E4D1B370E59C78DC9EB4AE83D1CB6E4DF546FBC914A6FF52591CCD3
C464AA14A393F61610D617E196C9252A013C9532C303C68553C91CE83431F239
BE883C519B643E9EAE5142F698F4B47ACE43BFE59E3AA4C8B47CA18016F95C6A
212208CDE1635F4E5271224CC19B6D47261CEBA3DB1E042443B665E915991D93
2209B3F4C86C9763861923B2F335DE040A8C24E73A0DC3FFAD5A6A9249A29AE0
C70F71EA41B0A4A505263D6A6C70BA63EB2814D31DDE792AAD7AEB4FA346EC85
0781604DBDF2EB65869969F265341938B2C7D6B979342D93A9F5A23A3CE8A015
130A0FB817DE38359C63DB215965E218E892C350FCADB5F66EB82D0813EF551E
F65992B2E24B4FC8353951C0A335B53F68A8F8286A94521BEE28D7319ABCDFA4
A21B5DE536B34845B32A34ED5CA1F3D3EE2B04DC4CBE12FC99DA94FB2648B842
54D4FB6729B1CB7E86DB55FF4216E2F57A08E04B44BB36F27129E5E93EDC061D
348F162C03BEDCDF0521B9F31D29543DE2AD436B75778C0489533F3FD5742FC8
AAAA8A72683C54B45F81F355D9D19496D0F80470D6B289B760B6851EA1A9D31C
01577A0026C7929C87160EE0D8EBC305A07052BD82AF003A0EEBF1D6FF38B526
E2EA0A91866201E08792F03323228B622E30142E47BC752EB0EFF7BE8B688A36
22826EC83CC42DCE8356DB43399E6A6918A887A64B2EEE98060E47C0F4276DEC
FDCA976E967EED2CE2C439693E2FD2F2C26823FBE781CE97DF06830FC498BDB0
73AD2CA5EC36B4892379B00A5C8564FC9A915C85B66EEE33EA460AF6141D60E3
76B4E430431F049992647E2B744E48AFD33CF5041056A43F90D0E6A47C2521C1
058E8C66894928964B332A89C5DA71AFBF455E5A68FDD4DF74A8F1572F8168DD
E778337122FBBD1485F73B4EEC2651C3465557A320A0932B65C1FF77F68B89E2
BE7D6D975EEC017C4CC66C88F5BF25B0D84AF0E70ED77B0B380397149845CE59
EEEF6DDDC9E7C6127A68489B4B19F3D15F6C72AB8DD43CA69CE0AE0177D2B999
3DB6EDD24B6A4FBFAF7245D800115B62C9BD6E97A52671CF3F69A78D19654F75
3822663BE5461EE982F36B0027977D6B3738BA7EBE8FFE3928E471DD9502DF1F
41F853B486CBF6A62EC2D4975CE0BAE9D76A833969FB573201280B149CA91AD5
F57D3A240F66B12B30C0B8C3C25DE1E16BDBF5FFF3CD111CA5FCCCDC96631D0A
2B46A37E422D648CF65D7C1392E322DAD8CD3CB42B3FA767FC185F653F299CF0
85F2C3AD7BDE7C44FD3DA32993CCB41A92B29BEB26E60B05B105EBEB7A7476D8
31D2C0383F39344255823DB7D1D12E2435634CF69890D14A1FF76CD20F731C4D
09ED15BFCB1DC5530257DEDE728A19496AAF9D8BBCFB2DDF39DA7261CD6B1DE1
94DB09EA1744A0B6E3A9A1704083D27D5690B18843ECD420763B9E7F42912756
39C6DE6964F3607C90166D11C291D467B35592E73C61A2DC1F13CD09369054DC
5695355C6FE73DCD523582A4973275B64B3D8058783639676B4F8B47476E4098
ED693455F82F098F49FF487626BD1A4D4B3B7961171D67F8F6B26EBA8AB37B5C
35D075C41218D0E9CAFBC8078A26AB4F29F821A015135CD43127434DAB18D387
013C388D3840182F35ECB411DD16BEE85BA2BB40F538F55C11D50F882B739138
48C40C08476F761BDD8D791CF23DE48A9C407138837783A7A619EA936D0B6239
F72579B0E99370DA9C9AE14A6753DCA4A6667BB22C841A91A8AC118812C9BB04
9DCB608F8DC52CDD6C52BAD1A1502779B638DF933793E463238A36732C3ADACB
0EA238AB8B29F707E61583744893F2F2A1B0D13FDD0B2EEA663F57D3965694C0
DB35FBFC94B3118EE3B234AFF7BB6C64E01CBCDD5E4B65AA5ACFA2E8A0AD7187
9EFC5A05D11A6180606E79F42F69D722C98B8190EF4D2B88C75F5693C65BBBD1
02DC7A78F5FAD0B17EB23B52A549C48F7E37FD84714170CEFB37B0EED373D454
E11746C2F21BE512DE383DA77E7ABE6666DC5A8FDBF1AE8B44DEDD7C60F97CC9
CDE83E814C7DF4DFE150DB10E7E96BBA0C4F03A44E9C517EEA5EC90E50AF70AA
B831F5C39EBC50A961EE6CA0528232C3E4D77FE791437DE3FF6CE5BEB5DC4D75
4838B2415435E628A295E895B8019BAB90D7F314B4595C18B7A2BDCD5C7DA29A
5F37EF019F78CDF2F2C87A0430AEF9BF9DFCB9279A3AD2D7AA13FDD13235C6D1
08916318648507B20F4824440FC332666E5F5A99C9ACC79B6952D59C46B15862
07C5A1CF559D2ED72E787FC95B7327208EC71CFA493D49EC8A2A03707848E83F
D4D72FE9017FBACA70F73B3E3C1798A1A62A0A6F8E820ECB5FE4ACA6A493180E
0EE6F235FEA295910569FE6DD5995512562359CC821E85A52B0BE3DF46B4494D
36D844F53727F4B65D85450354F8EBCA79F4D0CFB5F9C44E2C537CC0AF4C48C1
99E9782A18BE396E177C09467EFAF26F3773067464CB460F7BC55596D411EE8F
7EB0EEC8BEC6A5578DE82101FCEE3FF27B48D9A2DF5D9A44532C11B9FD3383BF
9817F355C5BCCFF10D75DD3E43432CB3F9B7DF742C4CB44D5E0CD219175CB1D7
CEF09901038B7CF659434AA8FF66FC082DBE07AA13188633278729806A4273DE
38F3B2271C188A4F05BE2E674E3975B05D777D6B1B4021598DF9F767186C96E9
82428FE49289726FC97AB7CCA4EDCB4632D79E7008ED1E8A49229FD44F45CC0F
6CC85C210F761A23F1D55EDE81CD9A7D0EEDE17D01F0413547027923D8281A36
51C7D7C71639084E0D77352B7963829017D69513E47E2507EDD79BF25B181AD3
08D29C23074546BFD8EBF98D81D8D42F0A83A78BFEAD7F2B6BD949559B4159BE
4DABB07F7BB64332BA41E584EEA50F61F4C7048DA11D46D47B9C7A7991D1BAA8
A61764AC5EC0B4DC2BA432D7C8840351C3BD6136F0361F26BD3145C75C8379D8
55D11BAE4ED90966EEB16AC381F4F07039B6F9D7E2DE60C32D638BBDACC51CF2
2379D24C2A0780333AB3C830AD7671FED1E50936B0CE6E364B62411E6DF77D4A
4FB0A419828EB6E978C0D0DD1901FB57909918D07EA767FD3786B6EF38C81511
BA8FF4887F3EE4357A421575277CBB5D04B9536B65A0444036463015845D29DB
176899A157A76210B922C90F076D9ABF878A6EFD56BB4EE37CC61B32DC0FA9B0
00C5E6346C5D732DF9726C255825CD99C982B6A384D3544080599C565CAEA483
90E975E217AB457A7E88D94943A49C2FFA892D362C124A728BAAF587E6BBC957
E31B764127ECC5CD4D1718F1294B64643C9C5F76C2F9071A4BF4FFF2AFD7A0B0
6B3F26FB1370F107CB781E2093B59BD4F441A42C82FFC652D3C8175A258867B5
DBF0D3698FB728E5DE37103F293CAF490502CADAB5321245B0CD0A89C7B57A77
398605E08620C282FE1094CC8E20784DE04C9EE86D4E093715E313E311E51AB4
78D7E20938B639750FF981F5C988527B2ED63600DD8F10867B2A9A6426F6010B
1050C5F50CA931A8AED090233317E046EC3D22FD0D29B686CEC5D71A81C043CC
0B55CD9FF002209C1C76C4C646956668CB64B378A98BA5F7BFFE8E0FD257388E
7C54C8C90C6E176F8EB566673C6816780A6B16C2DF32F70AA7A8A473AE14B980
A7C357681D1AC42AAE92197EEBAB524642B77C830532ECC75487ED4BC0198F29
57A103CB2F0D1F55AA122628853277D7595EAD8ABE6C65104B2BC60DCD97EE7D
38869D666EC3ED010CC3D3B7A1ECFC649A614211EBEBA3D0A82B2004FD05F7F9
2B98BF47C18B7287111DA2974BB4CC54F9C49B2ADE56381BA275FE5987D36507
BC80085920AB9C323A43AF971CE65E6EB2296D1A267736C7F69AFC502C9A1756
946B3FFAEBF3970D6180CE16EBE8021E7A49B60F408C5BF14E72341790C7D753
E73571F3FB1CBBF3906801E47D6EFFA7BF5C5AD1A6C343D367E8EA1C017E57FD
172DC6C9EB8B8A0357B309DF51CA751548BE122F618D3CBEEDD7382241D8087A
946368F8147A7C3F74FBCA0743FB14C7795ABB3E0B74D89DBC02EA14FC9743F5
98E14EA7B576250373D8383DF96225FEFDC9FAD48952E044FFE85F034ECC85F7
8DC9DFEC342E27A763669EF26D672655D118F5B418877256CDC5A7A08C426A39
C954F78F478652B4A9581F46C913E16E44E53431D83AD47EAA982414C8EA1D6D
890713607A2C117C07604B899D0465B2457624DCB8FCA4872915C7253EBA33E3
8AAE46D5DD4E0230A6BB79660666CCF6F02A2710BFCBE86FDD3101BAB21E2FCD
C615217D9DC7A1D06EBBC91434536B00B72B415A4A943EA52291AD5033D0ED55
0DA2D59EFC52B1212FB6A4E8C577857F27E6671E663C8F925F1926F3A7B5A18C
68BA3DD3558B16E94DD6CBC32B1D1632368D09A9678E3B6999DB5E1A4CB1BF6A
6F67F27976C6BC9545728C91C0A70F58A3967DE26F93EB7C1019B8A18D4135A9
C091F0BC5151B2FB0997E30E10B11C2ED407DBF4E83F15D95FA5A9342C085C5F
D2C774FDCF4DB4D49970182C3E7DB09222835205F5FE1BA3D6CD2DFEB682C3C7
5A985D8553D90DA82647B305ABCBD6C49ED9DEE46462D60FAF07C0263E2634DC
B355054F1636D8A5FD22D5F72B9C91DBF903C17E5B0BC25F89AE84006216080E
CAF450DB056FEB78BCD800EEF2627BAFE016A3D11FC76133074C57E0A9F961DB
AA19CECE749A9FF24B7AB8A5C5A2BB74C7B7B4E4A0DEB874CDB1570739B1A1A2
13262E4D4ABE61E86E00840C6D8B1E72BB83B1FA8BCF37ADD8ED5D737DFFDCF2
6A4DA2D231954FB93FB790C6B8EAD46FE7E364A49D81A2ECEEE74705FEE01AB1
EA93615AFBFDD29DEACEC03359F62327FEA224A856E0B7309A9711146DAE4D60
A2AF15F95B724A60F17CF056FAFBE9E5A3AA58171DAD548287DBF1739EBD93CE
5355996C5A8354B7D461808DC5B08697FB213661F29576EB055D5841C30A6D42
2F17EA706917052C6C9B80FC4C543C3E0A0297C7842404AEC20DE775DAC6DC13
54D1C0E5ABC997C64F3C84D2C3B7581BC955B45C79E430CFFFEE1E8B31F501B4
01651FBC69B8A867F4475914BD17456E8AEED7CF4C31FDA73EF6DC3734B62752
C343DD3F3DC1599A2B89F3F57C11D3338681C0963D0355C85FBB37E90D825A61
B6714D5788BE542A21AFE6D9342153EDFCC32B212DD9568D55A983BB46DFD95E
5BAAD920CA5BDF2CC4DEF46FD4A183EB07660D60FE453BDFBF89D41141C599FB
05C360657857D5364B1D5B9D9F01F05B67594FAC20AE98EAD48AEDB936A29293
C510093387952E5A701E0F825B35DBBF865F372CC051A9D6C4FA8010B7500420
3E9C274FC1F0F59D7A86D619FE072165EF333E4549DB087BE86DB75D623BBD35
CA0C79E98774985162D53910DE1DA60560F84973A847723B6156E1350081834E
B15A74B25E1E5E8D234DB91B8EBCAF27F0CC4B080189CB72C8870B3848FBB0C0
7F2F66F99FEE1B7D34B73D8592C922B8284C6C64525B4CB3EBAD79CF5B1177D4
C66C7FED09C0EB1CC751A487BA9923561D959848DEB1F697D86AAE5286A0EAA1
5D560501A4A39A2FA9C4E0568AE3BDFBDB8295B01C0742475BE2721C72163A3D
9C27E075C724E2A53A27119DF6BCEE8ADB135121AE5C4FA3CBA5DE18080BD631
73C465D7252239E417C99507CE9EF796BBF90289413B4F8891DE19DA8C4715ED
555C06137508ACE8DB434EFA28D2A327DFF5132E6C1D7BA4FA6ED6A8582BDA67
622694A9C1CC46416ACFD62C7DD2C97CBCBA525B1CB68B11C0E04C024F4F2BA3
7E5DBF035FC8F3399F07B6C87D58C87BBD25392DD3720C58776A20AA07DD1059
8761181AD294B2B18D9A2E50D9085EFD7CC1A15DC14530341A1CFFEA243FEBAC
6BD4F649747AC2661E7181897AAD031B618CB8BED3F5BE7F28A69C183E498D5E
C423985F63F7BA5EA703122EF3B16967F4F49D2314398C04A3CF831C233B5B63
D82858951856157E3968A74D112B40A94279AA581FC4FDB124B11B6274DF0207
21BF4377397E895783A4CA85076E85A632B609E30B5DCE6F433F227718802B41
60E0120A64C829084F1D305197AD48A99FAE28983406A9C3B59D1F0962ED5BE3
17DB88E30C42D4BBB3F889B169C966551150795AD090300AC5C68153E7DC46AC
75E4031836536A9FF8F98F4BD294847E27B311C9F0CB6AC63BBCC0E1BC5DE74E
0C306BCD82386FAD5FEDAB9A24D99EB12F66F5579AD1B1B7C95869C26EF6419C
4C12E7A2941391819066BE3012B26209D2B777C13DEFAB9BBFFCB3FE9740C6D9
FF8C8102E63A95E4064CD4DC5903FA1BF5CC34C891A8CB5A276C08DAEB2F796C
0F267E8D7F4E2B82093323981CE213A9CB74386C0FA6BA73DBD4CD8492798E28
83C06E249B776587481EE93C448C09073A73F51F8DEEAA14486C9CF5A2EA8004
82A6BEE42789F610BA060FE662936902F5278588DE8B61DAF5CDE811259E02A7
025A55EC5D586D483DA69A578C1DBB413C33B97B28C87C60FF6DB66E823C08B0
50E383712610CABF60FABBC42680DA4693614FFF9EDA896ECFFB9944EB7EEADE
C7BD012E823A30A47B0984A69B07B477D8BAEFB53D58434B838046CE4801AB23
0A1B797ACE38376DB0321D7D2B33C37AE910E60126C506E32204ECBD388285D6
8264836889EB98763BAF93B4E3A10523D0D3A10238FAF971633F0FE9A9BEA109
284890D21155020EC83B7A46B8E5EEE428BC354E493C3C8E3C9E88984E0A07EE
094736F1E391B402EDE74ABE7055F56BE5C3FF93B40B41597EC87D8D3E3F95BA
CD1D974C8BD85E1D6CE7D2F3327A86580D7C66799C2AF5B8E780FBB5CAA38918
A0E2380DC161878DF0EA2D31C7B31D6FB16554FC30E961B7BF4ECF255178AF10
B4CFA959DF5FBF4C574642D0A9CF631939BC23A930E6B542DEEFF12FE35B2BFE
DF4CEFCB3F5725C946DB1D57603AF1ADAD37653497CF244CC95D118F3C68E143
6CF31DA3BE58B4DCAEDAEEE9B46823AD649CF3762935BEA6A1B92BB98F32ADAE
C10E51E15EF25933D3E508C9294D558161DDB8E2733B9A89343A3AD1D072E9FB
6F4FD96BE01DD08D1D7EDD3E0DE35AC5CE15B36401360DD1D3A7ECF49D9A109C
5A79293EF846EB7DE76BE0D3026F19A2F1C34069E2C3B58CEBEE82D396F2A3B3
276D8416EA2DDF447178DBA49EF8A294FDDA952D6D1DCB0481C4DBE8A6CC2905
1F96016D4D64DCEC325FB1ED9004C10C3D7DADC4AF3ECF5CB03B09A1E0F4E76D
7634AB97167A72810BFAD7E037E571ECADDAAED1A55A4848B35A67DD0F3AC45F
63D0DB026ECCF26590A7894CA6F91AC2CF4A142069393593BEA4EE929D0E7023
60464B8C3411B12176D834E8F8677D39050DD2BAC23CA90A1B3F48F7BA02A2AD
093DD4457422A90EE8A7E00080300F0A05D265549982D566148A8AC96EAE85CB
A7D0FCFEE888CC7FFDEFCBD57372571328F1B7EBD718248AA3FA53B85D3EE6DF
698FAC50F4137734F3CF4024628056A672802384A5E5DB25A29C3EF073094922
CD09E76AA9AAF5F82272BE6482579AABC91DFC61B392213A1665DE12954F43E5
359A69CD68985E449D98E790ABA77249D6562DB2B13644EE111AC51724A9E7D5
68AA1F5B257AE0F3D2F50BA8221F087318B006B8CA157F381C105AD89529EBBC
BAF38B5CA6A29AE2FB2FC0479EC585E519C10ACF592AE48593EE2C65BB593B87
3A717D6B548B9CD05F0909FDFF1DB7D89D00AB1F14DCCA171A3E4FC992950E4C
0FC0338BDA52A1542B27824D25606863C1E6062E25A581FADBE7C902B039575F
3C31D171A18CCD5790DBCCD67F292584BA2A471906D47C257629DB940D54DDFC
F2DB627140ED8AD5DBF7D86C88CFE8FAEE9987E0A462594AFB132AF95D2C459A
BFECFD70901DA37CB1682C0331241D87492D92E8936325CF2A1028DAE565C793
2B3C509D3B02172583CE1449920F9A073A595B28634D6A4D485945A5459ADB92
E9EE5714245B96CA48FBC57F1B0A7E8F6FB6C483282DE613E28E0AB1E663F0CE
856A4417B9F66703DE69A65DE65B00A629EF3A9C3B0F01017DB6D4137018EEF6
C9BF625A1596A7A3BC1DBEC929A89DBF371F08DDF47A25F389DE2C91C9E4520E
FDEC071CBB4C168386ACE8B249503EA4EC512D72FAF9AEDC3D0A32CFC097B05F
9D90CC4B614AE7F58F3BFAF6616F4CD48A5197F98F35341EA3A752FBF80C009D
AF1F7BB3CD9C5A5BE58B59C020B81A403D3D17671E15780F96E8F754462F21E9
A2F3C11C5DE4ADCD17E1B1862BBDEA926389B997E7182C83525F3704A6431624
D00ABDE9EA376FD88FD8806394F2AA95F0320828C6D74015EE6190513F091150
4B583015DA807673416491068203C8E9929CC68C4EE6544EEE1B5F966B881C29
77F80396C0B4ADB29663459001D65EB8E3B9F271D6AEE8AC2319DC293362FD16
A24C1262F04E6FBFCB61D0C84E4DD95E2179CD1D70E7085E2CCE44265EFE6485
F6B3554C1748D2016CC43256A16E54DFD6C118581E511E0FB8F5483928FFCA23
F9CF2A8E8348723DAF4A7688088ECEAC5727C2A483C8DE3BB31BC62675775A13
9AA618D39A02A0FDB7C9FBC784A13908D66958DB27122381DCA4AAA79A0DDDC5
FE2AA948AE738E0B2AF69C367F0DD4D73689183798A4A2605095672AF4CFB3B1
B4AD97C71B859F5A7BD0993656EB9C77529C2C14833B86412505B6FCA5AB5BC8
937AD9FF4898D97069421DC2A8C80A9ED14A027B59CB9A0F4115D7DABAD25AFA
3C179BA7B402E60BEA64C8DFF7212D71A06BD70910D147365B42246117A5BF1D
EEF73D15FF20CC36B4125F6CB64DAB96949EB2EEDB5F8D973541E770E8D533AF
E1A3554A0BE5B900C50A6FEA0337C0E140672C6445759D3B080F3FA9EFEB9678
504401627ACDC2FC3398C83CBDDB25A0D1A489EB0BB10369D89E5E7CF8E27D63
82A49CB88706982B6687B8E51E12F0AD378B8588E456171592ECF80CDD365650
AEAA5E1D52D8F88DD49C0761DBB47C789C795E97A537F013BC2BC786BDA32DCF
36D9E69D1C31BA552A09B30216F9A60D1F58E74D0936CF747196FCB95DC9FD91
A124F906D112B042674A9838BCDA2F6F6698E3A87BB0AA6BE214AC88BF14CB44
C210BF44141C72291EBB17C1EC97196C25737D3DC6DD65C90A8A1C2ED11A5385
2C8E8A3434A89A6247F6776FC13D29ABDF15BE759661779AABD623D260F7A8EF
5AA2548D5A70F7A701141598FE997208A12DDDA2501C6655411A4DF2DF658F42
D355F5A25DAD8E75DFF208727DC428911CB820B9211D2A3C6BE5F600C235888D
9E3D24C7DC65F407F99A68AD7AAE86F55730E50BEE73E6D0A48998527FAEA033
B10548BDA8D560461E1F89031611BB0E0442727748C6C1C87AF425E8D0992549
3350028443C6EABAF73BC1B4BA5328595955865ACC13C5B1D171268B38732EB1
EC33A1BBEAC0D02BB800B2626E27CE9E77ADECFE7A35AC47B935BF6B0578ABF8
33EB86ED4836767BA4F806B84974204A324D1EB9E78F51B5D7BC7DD0F437F1C1
A89AFCBF166B5E882DC1A9AD14D52C8ADDF2829CC78660199E665BDCF1E6EBDE
65960F8A52D827EC053FB651D4A4FF559B6600CBAB0397BAF2083D9DFFC0FBAD
B40AE130A9F2002BCD8A16FE18CD81B39A96D7FDE78F3A467E537E7C6F5D14B0
9DAA946D3F56E6CF780B37CE39F605793D904FA4650A8E2E1A027BEBBC9E01AA
7172A8F67A678714BD90C887E6CA89963E32C1C000CA13E1A1CF2080943CA932
CF055CE89011AF4EEFF9B5E92354322B085573A7EAD1994EB54543B5A6B6E1AF
4FB0AB0CE7F517E28F67D1FC76296362A40E789DBA81CB4DDE7D4A970A3162D9
03EDE2880DD720336C627BABC4737FC72F8F4F6BB7D73551EE33D21E338910D6
CACAEC65AFA2F6BF9C9FDEA1FAE0D25E6973C7188B7A30DE453A38BFE3EEEECE
F5EBEC93DA9D3E9B8818341BEED641D1DB07D0DD69386DFB3D8144988FE0A00D
B09562E82863F6C001ABEACCA36DAC81C30C1359C433C0C5299769BF8A3C47EA
80A353B71E82D1A53617F40E3530E2B903B64F1AFC905D7DB85F544A470357D4
CC6DFAA856E64BDB00231392BE88421A29705AC412FD71D11C60C1A0C99F8BE9
6CCAFB9BDD35DE010A9DCF0D92518C38ED00FC5C77003D22C3A1E82B87DC2C2C
549B171BE5AD8919376E03009FCBDCA96015D3822CF62638CA3725FB707ED952
6ED054C471B82AA52B6C090D4D1ECA493D65E6834192E0853AEB5B7643FC865E
74410DFF5481FA219E49C2F4D2C8EC80D9E187F9E15825F579D6407DDF328FE1
C6925884EDD2049ADC2E45DD3BF0F4B1504434BDDCBBD35418E9E9DAC3479D33
09DE69137DF64ED4E250E37FB7495F715F800C2C1E304C7B834BECCAB3E0D61A
CEF149B0A7B73F2EE0136A9C23EF64210685C80362D355933650EC8C92E3CD16
67F35F9666BF2EF01605DBBC4BE22B74FE346D9AD20730AFDD020D7B2192B7F6
47294D69198995C75EBDE2E0FFA891F7C4EB8CC05DDC913B55789622477148C7
437DB021B1667E274ABF858BA6CDD1B8D4BFCF8453386A3F4293ED9D24223866
90FB6074006BA0A1E1A4A307BD9015DA3F03FDCA07EE69449707BC0ABED19F4F
1ABEA27322584D473A1A888C05D9A0E71EFB7075790A3A1E11482D57964C8C34
5CB539B61E70D397D8181B63685B8E94077222B339700B83065C6C7F3565B4A2
6C6C28C08567BF5860D0930D7EA0083EE0BC436B346E014DB4099EDC67BC432E
470A417350594DF8CDBDA0E00E908F282425191A69B88CB3D1E776684570CF6C
8FDB960B9CC6E9435D6577D1CFB71C0369AC73507D4CBFD16D0B592E7A24A122
ADD6648E64229DA70042EA7FD8C960D6B0A97BFF954666906CB151C07BBA6380
0A37B6EDB5E58E81BCA267212F3D633FBC9228227D24A4362A89E46F7DC9E8AE
AFFD1D52C911AD378F4376FCC045461519CB97A434CDF2A2ACCAE877C3B56CB5
A29F919EDF2ED112C9CF98ACE7F8A4CB9C06F5A2CEDE9C68F323E4BCD56DC7B1
ED60BBA08F874D9E1B1661393BD85DEB50C786F0B59313804D6960AA6F0C136B
BED6E020CA50ECC4A8B51ED58C422A119E8C6BB471DF05580FB2BC843D925C0D
ACA10EF2A46B53BE1C1A79DBAC9CB39A6BC253AE77AAE210DE5DE94DEBD07C12
F50A5E7B73647BFF706002C039D265AC30E90C9E8E79938B34F7607861CB7A57
90607D01A19BD70782CA4698C639FE6EC028F530815A7EFC0828548474134736
DC80EF55BB1D5A1D7873601DC4B8F4DBF442967F828C6930084644D6F8C63665
87C9415CA573546B97FE15F640911E342A125982936B54E58293BD2E0B8771B7
BA9939D03AD638796BAB9535BCEEF31BB213854CB51175B088CCFBF6EEB46D7B
C3B3B23B3C032E03D0E0001285CC46471BBEBD35B275F372BDBEB61571A9C80B
B272BA01A17A8A9AE34FAE800311277308DC0E20D9DDC923F4CFF2865F95A8FC
0595724B004733F9B8CD4CF8552EC4AD3377675F361966D3B408BCDF5FB01E00
69833A45342B060EF38B19B97882E8F13AB78BB5B2AFB03CC96E0DDEEE9FE726
F7C12D5C234119A430E84F7113FD6D52BEC23C21EC0C0FDE2375719E962865F8
402029FE2439769D67DEBDC8AD8C861E90E5322B3E5207060FC8DCCD236CB286
C0A3E10D5CE9B0DB507CC5990C162A20E2A03AFFF9D6B0AF70E1D643784CCA5D
A625A3C2C89F64B7426E0DDEC4F73789601E45AA1ADCFA7D79FAC7524EE55393
019EEE61EF4B3796F6F20F51EC56CAE5E580CDF8E9B9EACFAE3A6CECAA632EBD
3B597897D561FCF5AAD0873312846B070B77C6D79C45080E79278AAE385AD7B5
87A7E8E59EF92E6CC1D2BC815E10C3FA79909FC7385149C47AF9325DEC3C47CC
8270B6B318B09D9DAFFD0B6C3C0914AB53A33413728AB67AA3AEA2383C75051A
6C198C74F39B53FEEC8C2A4AF378B0DEB1C805E96349386689386BFABA5CFC0C
E6369C638E6B3E290722A28D29245A4AFD3AE32BAE8DFD59DD2162487C85B4A4
7F74893F360FD2D6A980E6E4F77B93A92500C9653D4752442EB8974AB96F46DC
25B86B07F3BAAF5020DAD30F38B43E5506D570439F19193D5A4BC6257DD1C9A7
9973A308FC31A15F849F425C90DF7BEB2428FC6396032346CA7C8EBF4325EC59
9D755882E751A70A0EADB694D3FA34087DBD5DC869DA7E06851A91F7E0336CFA
DF6B0AE3200CD9B5E64328E0B31D43DA5529BB528DAC7437710CF184E6783456
BFC48FC51A1185D758C54FD492CD6DFB2A0D2146951138D6FA6A92D2DCB49F83
98643A5B3DF8D3666728FD0CDF7BF8C6BAFEFADFB285A85EF80376FA16D59787
9F762BF7CE394D18DC76D206301F7A11A9A3943D196A412094119F6C7B842348
893BB5494218B1385023A014B87059314CC9332BAAFF7C1EF5675314350E6C72
4CD682DC94D4A705033B67E3AEF408663CDD5D3D709E67CA767DC3D20929B797
E1AF1E95D492E7262C789B363F4B77BB6F513F2D1CF82BE364B0469FDA593645
AD3979D2F4AA17C624CAB35B85963C6DED200A5470749221081D1C75F39C3FDE
D02C7B5394E5358D42D2A4663A76F0F44232B4628BBCBE1DABC0F88441D7D40E
806774F325A94413CA311EA41C84EB8C661706FC3ADCE4F756CB95EA4C2F9F45
41B4ACFE9CA666C46C7F031325CE1D16865F3C7ACFF6ED4EA6DFDA17340E96A9
9071E04C9E37D08F89E84B1DCE7F2A0BB0078EB6BC812BD01F4119E6587FBB3C
5D950A578830C4D8725C47D64AB8E3D06A8573ED0BBCF641FDA888EB1B9654C0
CD086DEDF5E59B697DB8D31700E79B700FA46F18E7DA65773FCB940A5254D2E3
80A2957A352FC808C54FE793012E5A1D1B140F1219189FF54777E37337534BE8
EA33D9960FB07D7667FB385C61FFD25725C9AC23F19267358C04B20474A8457B
12F3D607619CB08AE72CC5BB3A342018A542B81AB7A9DE66411EC11874E8F570
E04190A0536160AE0137CB99E97048161FDD3D79BB1648BD39E15558B38E0DAF
510C5EF83D1C082F1869429B0A2626B6321D21A42A948E88B3B323E0DD7E5B22
9A8753CEACC461009E95530A263D604E53091F7B9738BAEE1BC63DF9EEC93C22
7C9995C6F0BFEB3F5BC0FE45B681C73C50BA9A447875A4F372CA460F99E254F7
B6EBEE687699E1E4C25F955BB75C1A20FC3A54B30B97E23CD3030B8255F7C59A
C21B60A53BAE828D3411D613F0CCAC20A2E48B37F8BA62928EBED46020CAC298
DAE701CEF14BFF0410C077515E7124A30C484EEC8FEF266EDF88F3E45F44E84E
D06B1A49F3F8F92DA0B1B3A34E9BB9BCAE0E89082ED18573F19CD0192A80E283
AF75C6FADB9B4CEAB82649FD0C59B7EE84AC125945B02F5E350BA327DF3F4F72
1BB714967C6488FADC94A77124E291CB27BF10E4EFC417FDB1182CBC899C23CC
B7AEBB5D60F011E319A23D2D54576AA4CD3F6B933B546475BCFF91C512F4118D
14B1C32C97302434AA78C33E121DA9D4AB827E616E7357557C23BD6180D4D245
F8A3D527418B5A668DF06463201B00F833E3C257724CD2F37B177FD24EC26F09
86C5350312E62606189F8B03EF068D17E4EB159CCC21A57879D8E1AA7A5C050B
B6A43063CC0EE57C97BDCAE5BAFB5AF89F949235013F1DAB34185C68A03BAB8B
E3D59EB3A023876736CEC8646372F5BCC3C7F61E10B7E4C9D479CDECAA0F42E5
B9DF796D0CFE51760C4C5E1684D5EAB3437D479FC45719E07E1DAFDBFC032CCB
B03D0964DF8D25F7BDCDE784223C43467A18708A41B051F31A13C3EA3D583D1A
A7FE56627F5DDCA7F73A5712FE96C9EBA74CCB40138AD0C178878597B3E9F6D2
4F2C44C65C620FC801B9A0375560D235AF160BD12FA07DF0B9E3900BD08EADBB
9EBE4B1886830918B52AE133CC3977DD3448946BD058A0C86C7CEA94F1648CDC
1F1D78B25DC8D6C61A1079A1FE96E5E92921C9C59C5F01E1821DEB511632C355
DA8AF33E9B57FF4F869AA4C14468B701EE11DA0468E18F946DF99C087855C109
EF02499A9EB93CA71FC9C0D3222E949E21E437BB4760F8B9A15A195A0ECD0A33
E8B690321E1A1C9CDEF5604049D39F50717E4670442DBC451B029ED37E23269F
AD1C4D85AF0220FE72248FE394FF0E9CC2AD41ED3254FD58BE2A16804A4997AD
FEE6E00F84F822BF828E25A93553CC5A757FA50D53E6AF18AF09A1B9C4792EEC
154E681764F342047FABD1B30CD997DD370BE73E380A7335BF8B5872580E3798
81BE02909D7E57B80AD9F00C69691D5CE7BEA436FDAF8EDFC92BA4E94A336717
06212E8D857FEBCFAB5B333511F10A6EF5FEBA354C797C85E59E3461F43D3FD8
EB5D429ECB3E39523830A33C0C607CA0E2D9C847A8818F1D072499EE8808C8B0
CCC1807195DC5DDB529137F181F8E16C76EED7384CA2716E22C30669A2D902EA
EDE6BD0744172772BE6474F18C4F7F19E6CE61C2B5E2B414F74FFFD19A9E0518
DBC7778086253F73CEF7C130D76E76E45CF7714EF953E9CA69E5EF713B4E11B9
0AA85D9E13468B9E3A7E548CE38C71E57A0C0E6CDA44E42592731C30E9AB566B
F289DF00DF9ED4675138F9DBA3B60F32108AE4AF6442C6388024212A31749CFE
6C662EA0701460B561C27A38B139D868369454232DD9269D89E303F37ACA22B9
01DEE03B85711E3B41929440AAFDD92534DA0E0876FACE36FE6F39331DC4E3A1
BFB3B4E4EE45019BA6FF7DF40D9FE58108584C65DACC88F84992BED1A2323DAB
45601994C67F6A07F238E7B764093448ED659308DBEA0EF8FCEA25DBE6D5128B
78ADDE5F17141196B0C9FAE3391095782AFC3D84143127BD38DF4FAB04CCECAC
1EA93988BE254E865898634CB76DDF1C423BA71F9BFCD1C4FF3CE4859D388D2D
0A57B94682C84CEF71F302F5C753B021E15E8AB8F55F058A728CE7E9A7145DA5
12BA6144E5F0C8CB4079C56F5FCE8A5583D01F27303F6B0229328A9A903334F2
ADB1B6E111E3A60FE9A988D87B4BF2E4FB6980E2BD51C0F54456B1F19B78FBDB
3B2F5806425C11DC5890EA64C535B8FD1B4C7D412400322021F3A75D9CE8B508
4386844FA4FC1610C5BD57D8396B2470522A8AB906EC8BBC060FFED5A4CA42A8
46C9BBBFFF95E63D3EBE096AB61E19B6C33E5A5CA394D1F63F755D6C5BB7442B
E59BF8BAE454F6F4DE088CACF45A8172CD0D96D04C75784D854645C6F7EF7AB5
4E9726AE61FF7244B8CD8FB1020260D6919FB7AD26F7DEC314ABF76A4FC2BF05
DB39983095D4CEB0EF7EC4D89C7F5CB2E3982162CD5115214C42D0DA63F497BE
67746A274DB41E24BA364692C317E6D350A8DD871A7341845B87AA490A9AB193
8442E912AD33B87854594361F9E7C2739E86D10692239F0804B6DFE9A595ED91
541B45783BD8FC6479AFBB1004BA15E3E5D0EE470B9811A0F51A1C24D00D30A6
DCB1642F75E02570A5B18FC63276D9A5896ED76A9187E8D4F0AF5B777E254888
910E51FD05F5A988934A2C85F8D5868AF1C8BE4C3E5AA3E3CD045025292B7425
9F5E5FDE432535564F3C2AFC4133B99D57B481BC0BBF01D22103FF3FD8919553
56BBE235B9065EB6B699AED4B664F28F8069481BD14470D256EFFD60F65249FC
E18E845B2442C20A5E41546DF2081E382C3EF62D8C0AFC12E055D666A6A2E8E4
F81CB3952E4CBA770768BAFCE9DECA3F1D73A570C40CA014096F54CBBC359976
9DEF9F31FBA557361D7CA62858038F6D2CACEF23FD8FC11F483C0CDAFE837D98
4A761286C277FC276DDA1B889221A826EC20ACC34211CAFF52FD70DA53B5DC44
5E5448E047B3CCDBD3693A0116B95E33338CB4A9A1ACC3C979C7DBE231399DDA
35222737D918A0173FD17F9C3A57CEFBF0DCA0B126BB5B3946A4A7FBF6A069B1
100429EDC9C7E83B9CD3537DC0A47EF44E277A02DD8B083BDBDC2C561CA8A240
B0F352645F8FEF6E20EDC227CC346B4BD01A301C9D89D9E2EA6A9B8E01EF84B9
67CE31C5F19D6659CA886E4815430AF558B9646AA2889473A6B0D3F9F9706896
A0CEE76494E39F5A5F99B113D62E1B0A2903B3C1FBD7A548991BE6295410E55E
977DBC2A3EDF686A72EC9BCFD5A0028A19CD0C17164927DB41157EEFFD286A65
FA79EC87D728527D60E881BA6DB6FAB1AC9AC6C4D8BE2527A3209A4EBAD2B752
1AE22A9BC3AA5EE84CAEF141DF5A91018527102AFB25C8051660B625791BCE11
EDF3D52E453D6061BA6F09D8EFEFF6C02E57A8D566239A69C3DEF3E720A9E360
7924D100D3CE0DD327ED5D3485386E04321CEAEFED56113CE9A3FB112F832389
17AC4579E594DDE2FFEE62511322031F5F170F9D634F08676AD359A3646AF2B8
3590320204DCCB1EE360D892CB32A000EFB6C3BB2003AC9FB50A60984B367008
B917A736A4CC6DEF343C59B0E7DAA99D2661C461357E01ABD31B5B7A4B382A14
521545F7D432AB99BA1D41D992E0ED22B3D31A5EE6602E561321C8F76D6B58D5
E88C5A4135A26500B74485489AB95B373577760C234B4DD7A4614C51263170B5
67769CC5CBDC7F8FC02CFD94161B1EED111BB98B0A37DDD77717465B285B171D
AA6BE7058205D17C7626484701FCDE760F5E842FFE31220C0314AE09632ACBD4
69CCE66C946ADD61BA79E99E525BEB29F8100DC3ED13662121244915A7CF558A
BED834E52799D841EA22ECD52C0B3EB06941D5230BCD2DD1FBFE9FB8AE53475F
15DA44D96BF21EC8BD842FC8919109ECFD6DD58F68349AA38237E4F85C48EEFE
916928A3B2B6814EEEAE2698873553F4B752D97DED4A2E17E511B758389C8883
2ED0904E41B9B0B901CC87248C9C7B1B00840D01F61B3059A47FFC1CA87BBC4E
6DD09F8E194EEC7488CE6E7B6B26D47F9C02A4B122A6A8D7967FEBDACB384BFF
17F010B3C3EAD84FCD81CAEE1F87C3284AE33357B2E1A0D84460B9EB62C2D13C
EA5C20E89919C3510129755A79C45A87C2F9B7DCE82FB0123171462CA824F0A5
9D46505846B447A0CF7A61D0667B9BDDFCF697898780190F135908791D3EC7EE
88132663A1B15164381022BB6445F96486C04D20462258D5DFBFD7DAF32CEEA2
096AFE70E8031B125231C7D467D7A65C52482D6EAC36541E40C62F8891ED66FE
D88709340A956B9FF0769FB1B374320AB359CFF328F08D902ED14A5930B52ED3
4C067E98ADC5E0DA1212BF4D61960D33C66578AA14691CA7F1DB841130E04E26
374ED5EDE7C3DCD59C06FA54C0CDBE19CBB0E0AF1B46C79ACA9E9C85E8352DE8
27E2B1F77D5096E32A76B1A859551EEC5240BDBFA9236A2665B97EB929BAE986
D79303CA403DDC25922123E8519202D572C83569FAC88CAE97BD823C0CD0DCFF
1DFA6BD9DCB19A585327C43F9587CA69B2ADE38D3DAEEF9D3844463532723B59
4B9EB2AC57A25D10A0AF9B597A4D38A4A4F5089964ED395AADB7F8939C23DB69
1CADC9EA0F7914E70132EDBCB06E4309A29C7AC5585FC3CE568F432A8FE65FBD
FAADC3A6CB5261E2943C331344C95A0CBE1DCC0EC2029801D218913A82B51D1A
19F3CA253174C9F8849A73B9D49874E6C74950D54F10504B85C0335245D7D86E
C86CEA1DBD69EFF01E928BCDBF3A744667964722361E0F56B5F88F7F10357AD9
8147CCE3F94B2C53DF9BC0D2F2EE68C64F19159B8B16E898870E3726C09CCE29
51339D1C26C411FC059C7CF20E77FDBBB7FBDB551E97DB8C7818FCFA8EDC3B3B
48F5D039F86E4CC69905FBC3D1B62CECD8562BE797F417F7BDE1DEFC618AF760
AD5E1778B1FEE677307A20B641E77FE1B9871199E0D9BECC6417A81EF0A03BF3
7815A39824DAA6F8EE4A82B872A472545EB6DC030AAA3FBE2D00E8095328740C
C8C45D349A7A32D003456BACAEA758AD4E75BEB48BB6E82048DC2AF18D0E7B62
6BAC1A12A09B4B944D5C5DA66E704B70A10165B8798B4A9124A2431FD7C6B5DE
CBF9DCA6936C944AF751B70F412145645702E77BFA599DB0894A695E16E5310B
B59422B302ED3F5E1479C3146D60245F0C1C529692C720F1B9462FEC0CE3A388
55D33CBE227549F1AE17A80F32FC1CF5BA5534778F484177B1A9ABED4B00573A
B3AC19FB924F8F3243488DAB0C573919D259126DFDD2BC5442F557EEC7DE1C83
657A4F16751ECD750DB79D91CC0D5A0EFCC08853CDCB028B1D9530498361603F
8825518160640698D86D9D81B4497CD5EED64BED64FFDDC683B50F16A3AACED2
042AFB7CBCC7AA5778F78610F6A47D8A5A322D01FD4258D7617C6A19973DEAFA
960BF81334F2F843EB83E52C8D96705AECEC9ED2D00ADBC4755A6130E9DE4412
E83895F01CA0339CAF2D36AD55A66C98D6F7039482CE3DE510AE0D52CF25C76A
6BA28045A5EC7BF1988BC68D7BC5D4ECACD7F66B4AA23342C0EA0C76B1AACEC1
D10EBB2B1A8558B88999CC43466101331D4C5456B53451DF167DB89DABA17627
0C1A78673AA805684A09BEED91EFDF386E7DB94892100F0DE10F8F77F70B1447
1CCDEDD8D6494CE17528BB4CE758F27B1B629B84F904C7BF9E8A20F5883B4972
06BCD391BB0CC87027A4AF6FE9FB092C875E7D85F1EE1AD073827D9B51CCFFEC
0BD57CF8C637835D375DC16FA862AA21AB6337DDBE55BDDB5A871D6C66F3C751
E4825BE3732F9571BDA6C8B47A57710E5D503F5BAD2A6654EF4EEDD5243C0ED0
46A6A6B2E6FAEFCAF25D9965CB16E7AD02B6123F25D2E5978D05E9EDF07B8E6F
61A8164D08882D647EAE23DFFDCD5D253F23249550AA1DC0369602F04DB594A5
70F789D1BE3835D18C0E9F841ED3B192B8E1B08128C176B397B2709C8009B317
F725C4DC8ABCA9663636C588FABFA8E0A201239470293B0F09EF27306E79E8C3
8779AA4F2213FD8D54012F00714F96F9E92AAFEC18DF37C2A072D853B65E22B8
53CCD5DAD4905832A6D797182069B9AEBEF01DDDF679DEDA691E30FDC207B103
0F6D805EF3EED1AD2371832FE35D5973F65DB1F030DF65F910890EB3FA3B9203
2ED2753D43F070E9DFB2EFDB7F4D2336BC6209C0524FE4DFC0596702233D8491
F9AC5279C44B40150760B0FCFAC1F3B1891BFC4796C12F353DCB7C02A2833A9A
E2E675EF11E395B9047DFA44E5ACD81969BB7B6E75FE8C67660B45DEFE03D401
128F28F978A1E8777AC20EE9F2068E6C73F537D9E907641D77C61A72E50AB04E
C03F201D70C31DC3EF93C51CA04E68208C2018458F9426AE104A44B7C0DCBC09
05F901B8ABF4CD2F7DCAD5870CA8995F98A24246DCABEEC9B81B78D9D790383C
82B453C42BAB08910C231E3C55B47A860D8D0F845A4C13130125870240589BA9
6EED89169D45718A88BABAD59AF61922F5E5FCAEA07EA280270600E05248DE1C
27F4643DF3CFE323AD60CF2CDAEEEF66335286F1A6E7DF01485EC0DF092646B2
B201958947BEA176B0AE940BE8DBB8E0AABA875E2888AF788B3D825BDC10C19A
4DFECD6E0A11BF52CD7FAC4F3C0F52A92DBFFAB8F5E0B3D8CDFDACFB18B894AD
CAE1FA4E39A15DFCE958B32A2F5108CEF3FAF8B16504CBD02303654E4D1A07D4
C3D49A475D3AF367496E342208CE4F0FD48981800F8E16EEB9AB9B6A396144BE
99359052AD7218FB7D759654E06270407A007BB5ED206E6E71DC7AA59B2FDDA1
B8714FF521A08254BAC7A5401D78E02753ABD45A2DC81349569A22239F1DC8EB
5767C0809544F5291F7E047B72FD370FCBF53C18F76B79AB072E704173D21324
B3EAA3AE7057DF2F0C16900F271EAE81F787600A7B4D3DEDC258F4A55988EDF9
EAD4BBD59BAD0A0E6B79DF133B4696F9412E08AA68F98674A8D0F7C13AA2D0B2
79F4DBD7649E3E3E7445C2A98782DF8717DD2C4B2B1A2604C1AEABB53EBA769D
09D7CE6C6564B925CA85EFAE4DD8A480C35E9EE81724A19ABB7BC7A246AE157C
341105B044E7AA0167DF047CC90A359EF1B5BFDC6187311F7020E63E2C78F006
91C58EEF4C8E004DC1489F1511671EA59008CA7C5958C54FBD07ADA4E5936A7D
5A4A0A05DA1A70063083A44D54B43A2D3B98F9423DE1E2A657C4E6EB5494B7CE
670CFE23D1DB956BB404CAAB9038A56948BE52FD491822DDC1FD01962E287771
F728FDDCE8BB0876873C49ADF8152818A61646F4D07774293F14F28ADE9DFE77
CD3E7AFE2BCBBB1EC04CC8F267CDDA36431BC83D98704404C2E77DE5741F7032
622538E0EDC575DEEA0C731B746BD9404C310E8BA4ADA17473DC870FD1EEBC3A
BCB266C4A62A703DCE5888257CDB652D095F0795BF91AFF7FFF155D0D6F9E89B
72013FBC7868AC923CA9F2D553C370DD59A0BF883F9ABE161B93244A8272A2EE
FC2912AC6FE59CD29D0593718975FEFA4A7B6A75C90EFAA27D6CD83DD31C7947
E23422942E1D62220C38681024A31EE584578B71159ABA83504664F9F6AD7815
3CEFE299EE745E666B6901090B2786E5848D7D8CCF4DB4DF6BE1D14394426C95
FA79F354B447141CD77CD1AD6B8D17AFDDDF8411EEEA6E12C9AABE7ECAA5701B
8D7A2C44724FC76B270717EF78DC9D9C6644A173941A012EED30E0315676E7F6
B3FD2A80A651D2BFE16FCCFB7700610FA02465AC554E0D15E60FA09044AD2A6D
55C76A711F0F5140A6533EEC2522EBAC06F1A65EA18F8C4E6C39EFF25E6C3CEB
E1A6915BA900671C484FE6721018EDDF233229D7D60AFC8B534992629A83B56B
4B657DE23503184AC5C0E91046F1B4E859D84ACC8B43C98684CA1AC7ABCCE6CF
63DE924E16D4177B3DA8833CFD9E1BCA34CE544502ABC9D8A2F684B6073C4E55
638BD16EA8C0CD9535A2616E31127DB0F97D2575F46FB1B3CB375F819A64C4DD
32B4F47EC3BD76EDB00C35268B21C0566B90CC8CD4DDF84065959259D62474DE
D8912EDD0C88FAB052AB99D7BAF4ECC952889B91345AACD838A62C8397342D5A
981D904C44E2AAB520E68F8F3F669D996A3A3FFB3A10B0319EE4BEC8BB126DD6
2669021A803F5AE3267FFEC3AC2A388271DBBD8906DBF5EEDB925BB1184C0FB1
17A335A8C748F4EB57212B0FA2ED3E062B30FAB52F379D725CE61BE0A9D143B2
79F8D8BAB31E7D3E55DE6FCFD4A1404976CA2504ADEEC75378E98D007BA98B41
75AC6BE1B34565CBDD234179177774380B4E7095A4950035172A3AA4AA3A1C7D
9D1FB232698313EE99797A2558E1F418725E24CFA068B6003BAFEB372AF6B9E4
9CF3F9AE4250406B1D1E85DF7D438BA5D27879A6A0DDB08B1D685C6239FDBAA6
00AC8EC6D20452EF7DA2B7170BED57F9A0E0F2FC5A448F9B520EA55BFC2F693F
9F16735E3BDF0CD8E7BEB53151B295365B9B9AEFAB1F31B03A6497C0B276424F
D0BA24AC7EC76B48C692F346BF739430053E38398BA20089C049E716DDDF5634
085DAB213BCA6649B05C72005C9C9B862CACCC4BA67130F2FA076E63ECFE4836
C0CB4AE8AAF4361C93D4D1AF2A52A4801FA8715FC91FFA1FDC522582BFA89BC3
FDBFAC578A525BF8B960B22DFFC19775C058BC13013E94942CDCF8E20DEC5CD4
696759CB07039B64BBD7D11FFECA4C326D6D0944F44F172945752485A0AE235B
42A398AD41EE259A313C3E4AF650BF0A58C8786FFF2EEC99B7B8FDBAE860DE3F
4A62B424FCE98F301BA9281AE29BC28878CCEC247635DCE803156D74CCE4A9D9
660F876A6D2048DB062B66919156A47A1D4F89C3686AA1450F23A5EBF94C4754
E8B988C24931E30FBAE70CCFB3266E4788BCA58E079D31421D9F153283488E5A
0BED3CF6F37F8DA70B5DAEFF3F10B091434FDE0700EEAB15972EABF2DFC919D7
E852EF79B5346A928FC0A31E096CE2ED5CDD2F76ED84249DE9570152B49DC570
931C27705BADFB24DE1CE654020F34D2E4564D557FF2F59C5E6A27F6FA07D283
C77FE856CD9365B3ED23E57AAB62B17BB63F289D282DB1C0E6042E84959E5D09
100D406E25383A44B1626514F8C71C4784413B89C5A4E827F67AC4E4EC3A17A0
84EF22FD4D3CAA983BB70DD42052096D69FB5D03F0CE3E9318CDD983EE4C43E2
AE2465717099CB5414CD559F65B1728DFED9A13E39976C99B380E2CD1541C618
EDBEBF74CDD68340D52E137B1DB6FF17B6647D8BF0DECC07116A05B5D6D42730
459DD44EB86044158B71F7FBB46BCDD7C352F3D0D1E6063CFCAA7A853AA40576
2D6D1286ED44A9812C75D21428227CA80B6F2515E61ABE9A60DDBA39B55698CB
B719BB5BFC4355965C9E55D173820A5D932DC3F8D6AB7242129A906981ED5E14
2E4E21FBADC66E78E597B6C42ED14A7BBCC6FD3E0945857ADD4428BBCE969610
A7732C5F38221AF8B207B57B80116C42EED0BE15D728D7D835AD3FD71AFD8754
EBF42AB7EF205B52EAB95E8A590966A1F129189161520C5D9CAED67D9869D7CC
5684BE0ADB284119D1469BB95E305320B7D6A69CE1B5FAE803D24BDD85930B35
701E2B0F63F82670E3F91BF29C0C9F2304325647BCF0057D7E03BD98EE97FA23
2B25E22FF8C6295696E231720C2569989ADB71EF844B419D394576AD358449DE
478B25859EEB9EC117FF9982F1095F04A460AEA2305C7F99B3702DDD5E66EDF6
65EC099CF69BC01816313959F493A6ABAD779960E30F055ADBDC2241259AD303
8CB7210C7F8A629B05847C67D61A60B599D99399E63B04218B0689BA4BBB7B73
A2FC354710EC3BAA5490676EB645821E14E03BCB63B5C583F5B45B6D9B62E3E6
4BE682605CE4E867F767FAFA1E8FE0EE6A8E81E6A3BBF9C1524C164F2DFD1A89
B3B60737C546E9A01A591EA3B121B082110C6CAD7BD80A3A3A5E09A7D4D6CAA6
DC45C5B6D65FC37B619A9B7BB69B640EEE157D150401823DA4DB9E92CC12A693
355894DCD3AFB240A6DE0484724805810A474BB813F593FCF3F3CF594893C854
CDEDFFA2A6E9EB4CC3BF3839C7284EBF8DB53DFB40774014A19AB04F46C2A763
DAFF6642ADC1ADB069D7BEB4251CADB282A7C9E9F163EFE84E8CB069ECD10D89
E9F69111F967A27B7D33C3DF5515240A504D0AFBCC51F9FF454078E0709863C3
5E652F5EB5B224917E5495DB8372012C320B635878512F34389902D8D583DCC1
634DBAAC6C2BE06D6CE08C45A3B401BE017B1595DD13A6A87466BB5C0CD34412
662695BDC4004A3E71F16BBA9E4094DCC927802CCD345B5C280BE9A7F7253F7F
00DB43DC3FA04D9F9FD511BC3C831FBE3453FF12F0BEC205E36026242CFF08D3
78148641B36FE555B8C513EA388D52AA1DB98255B9DF939FB12FD026E09A8608
B898B553DFFF535A7E5C6F41AA7D14736CF32569B2C481D584E4E06BCFF708B6
DC29E0E0E03461C073EA8F7229336DE3703B6892B61D3C3A1220861592B2C3EB
381BCE266753287FAA1AE38EB626E9A41CDC6BE62BC7B1FB49C5368C977D4BEB
CE7AAD6ABCEB874D8071ABD4CF20016E9DE3B8FA326BD2EDE7655C691171313E
06BE10AE6DA11BE2F6896603072ADBCD36FFF8986EB0A40B58839CB103E77B80
A9643541BFA570DFD8F4C41F743CA65DCAF15860AFD1DAC1D9EDEBA1A64811CF
F78285B9419B6B1D593E061FD85BBC6789FC44DEE553A7FBE5E4F9A45F432BDF
9045414DC16BF7C0C3F77734D9B62740560F0442BC7600B96C062AF723AFE5B9
4747BDE2E5CB448A51C7D6A8D3BBFB4EB0B807A962BA125D521239DE1CA0A1EC
334F98A74153773F3DB17F77F0DF5B094F605E564AAEDD2D81BC91FFBE6C83D5
61ED83E9D6B5C07B3B64D5D71F84C7D89825DE4C9A4020E6E3660F7AD427325B
4998F156F54D51D76CF525A8998430A559ED52660E9E16109F9C43DF40ADE216
5B72FB4DCD64E312A2D5ADF6881FBD66D03721BA9C1B8016258DFC478B1D854E
B79608E52F06734E2CE9B3962B4FBFB55CFD0A910EA98EFC31A04041B8A3E4A9
01284F589BCB9716BE9B78D0F4DD3B3B23D69A58E2C82C1981EB8E1E6E0DEBD0
D7AAE0F147D8D2FCB7DB9C8D91A19A2C089484A0C1C80C1B9E8FB902DEB08406
2AF10532AF70A4E177139F30CE546CE679697096D74B2A0A04EEF4A926B74080
F415640492E882E683B84AAAB25D258A18EAE5FFC08AB44A7A57F9FB2D7877E1
284817B0AD5CEFA1A5B0C53DBF61FB3614B788FDE4E6ABC85888DC059DBE81F4
0B65934AD2E4DF3C297269B724A0AB02F25F032E14C851C05AAD242C7810666D
7ACFC54A94F447A97175E18373A7A108C2925DEC660C87A56B2DD3F25D5A9F62
0224A0A463B7BC2C470BBBDFDA32B806286039E75042D590F24D8FE9F50D35EC
69C8C597030D4647E13682290EFFF7F72EA59BAEC0A47085A22DB9EE2126F3A9
076269B918E9C255C1D187CFAFFEED31E1B957545465E861476929ACDE4D4D13
7A381F18A16C459C4BC323B4A17CBF9BD61C65F514E3C40827D920A7BDF0276C
212CDDC0543D9B0B916DE65B9A8D44314BDB78C9BE7F98E32BD3878180EC9EAD
9D1990039DF41BE8FBD0EDCAEC895E385C6DEB5A2E318A2B89A108532235E574
71017A665837F911EF33F12FC35633487F2C0FC85B5651C97073905D5F48F6F7
89FF4E73AD9F901D26B430E8A3EBCB36C819ADC8129883E984EC2061DFB90767
1032B00BB5EEA91DF3D3DA82306D4CAEFFEC436523665A588D990D8BF76F385C
AFBB8005DF1EBD9B59F915118F16D86B2F48374DB420EDA60C043483206B2C87
D3A2696D225EAE85E5CE593D4FFCD7265AEFE9BE36A473687DB465E9D98209EA
C333EE21FB27553D9E68FD8E404198843C49CFA52A0E0884479EF41CEB01A598
A9F36CC6E5C7E7581607F9B98189A52E5372EFF1EA237F4C2652B3A528B9AB53
1D43E9B4B4001C63E6EAB8BF004BA387FAA82124715CC6BBCE0055AF1446D3C9
A163230C5D3A4A94455AE4FF23B3DF00FE2EE816E4A1EBB873907CD83428DB80
FBE9CF35EE8B219263F40C72D798FD802EFC051599BA2C41CF88EAF08A9568E4
03623C2E33770AB2DB84425BD3225175308DCD3A816033FDDE498750A9E7CF55
1269DA8F035EE5279C2D4A7B392FDAD2E5D87DD90F0F15E0EA1F5E7AA8413E3A
653F17CE3D33638C065EF056061AFA09D77BBBD8CCD04DE347E31D551BB63E42
B412C38925372F882003FDC5DA687CFA43C0D1856C461F97C7AED92BB65F5ADF
A4D0C3C442D34EF5E344A819CFACC305F24932D2109FC4A80CE9AAE79F06E98A
91B694C2CF7D02F48F99B527D596291A6F9C9C59AFC5C25CC814D29CD66D0BA8
B99BB1C6867B7A98106960746279878961F9291B921BF6ED601C000C52E5E984
9D674A1D115BD2CC7FA44044CF1E14A026561FC62438E51FE6492F44F5356EC9
2FA9101102BAEEAE5C1875DBE42C23E2D56B5DE161B8DECC065CAE2939F99BDF
7D2DAEB9186B99B5EAA0489C6D09EA559B9E0DFCCA1A39673371E800599BDC6A
984C0E944711C77542A66680C9339C7F2D5D5BC55CA837CF2D70FE8977957788
C0472218A35BCD854FD110A913779C7DACB01E8E1587D9C2843A426FD7322963
6A662F091CFB2CB3BC136D0AAA7AF6559396A793BBBFB1EB68A0B53C977307CE
56259FF842E91C82E428DFE8A0D9B3A39629DD1DC75B72C49C0060993F1ADBF0
58AFAEBA4B288580312003507D28A512510439180AAB408AB0092D92B78AFE3D
FB2E4F61DE6BAA1D6C07D3EC3937BB394F9D38159C8472F35181E58CE7F78DDB
940917756A2D719AE12C53BB3A2F9EBDFE12E8BF0C3E924CBF6382D93BC9E859
50B5EB2E86CC7E29C86F15544B28BD91B50FA2F35EA192D216AD8A987CAF1B26
7ECD9CEB86C106504B135643330AF0DBE9F6DF38B9526378D488DE3096064D75
B5E4A06D7C0D022BEF43BC1E37A8D5922C9E5A80D260228B79E1A02EC362C667
54BC13C1D332FEF12789B969A7243E45968D31898AD6A0037AAC753D79435C34
DA096A73013B1552B7D6A64BD860512EAA55D2174844CEFF5F1AAF49BC43D85C
D32C949F3D92AEDD0E2391A4398F807B63BE700B1AFB79F0AF65F72391965B8D
157DD339A1F2AB6AFC481DF98A41745435C93098E47BA3C7A1FDF166439EFB74
3329EE313D73F27B05EDB5F625CCC2F7CEB62427EBE388C427B33604B95396FE
C97FF63011D5F2262FBE5D5C08C85264A5B77C8561D4FC7989EE78FFB2B37BD4
CB3EC67FF81E7E60F7154EC47E7F27B2F662CBA3E7DF323942B77D128360D078
A97A01FA3F81E297E7AEA3F9B194557A082129B221864FDCC0CFF4DC221D4942
B039CCA43706F3542067C094F8557F1F7D918A262182AB3964573832CAFD3F3C
E57DAB63CC76C13CFE68DE87995F6904A9C72459FFBE66646D4199541F97EEFE
07B3C5F851B2F0B69DEBB1951580494A3B31311E14E61961DC45D963F35C7F7C
FBB5FE939989F556E64447363297ED39A36E5C7C9D966924F1246342BC3EA885
1808FA65D21C48CB36FDF606B81E306AAFEE4A089393FCA362BC59A995FE5430
B39CB5EC916B755E73994A76DD0CDADEFC54FDED994146FAF2417231CBAE4D4F
5953B443111849DAEBDA74FB33A631C33CB83AEEA04EEC66825F4E3073367941
CA39AA6DDE22DB474377F43ABD480EDCD343707D270F0236CC5C4DA618CF0A77
963CFEF4ACF26734A4EC34A6B439E3E28BA22CD6C83875721E469E73312F9F2D
76EE9208993B7603C329F27E8A9F9AE8BF9E2E340162023B85CFE6D9AFB6B923
01FABA18F0F71F72FF52A8A4C88C621EDB113A29C4DE7996EE0B3B872BA903B1
B6C66880887A8F8A6FD4408145349FF595E3850BA55D6096DD343532E74B5BBE
1B15072D732D073F4FCF983F6E922F751B981FCBAF8AA86D87C367B37870CB66
622888FF610841F050C2FECB415E33C8711F80C5D48200AEDD3AC2B6B7B7E348
4BAC6547A0D9F6EE04539F2A685E0E0305476231B11E3005F3FCED9345E21B0B
F87A7351F26E99CEC1CBCA4B0B8145D8AE2D8A7C7106AB660583C0643D0B5C78
D282C98740F3625659F253FA3073FD7339AF57CF8CC1DE4A1BA0D9455D414377
E4668760649B816EFE129661D5D17037A6CF7AFDFAA81AD2E91846D59CBAB892
68B6CB07836810985DD41D0B1CFAEC2921BAFBD868F611269F422913DE8B09F5
5D381F5512BE8BFAB497B0B6F05E8BF41095684101913FF7C8A1F8ED8540D3A8
68D4B493E54B0ABA2D822ACE55C29DBD4C2AFF9649145BFEA7A95096FF3F85E6
82ED86808C100D0CD3AC34D6DD77EF2507E2E96BFF47DD589CF149C645F79574
F31B4FABE38796865D9874323EEDCBC438F894FF85DB2EC54F7A9FAF3809856D
DE35FBD46414EF72799E945013469C3DFDAE48F1F131513EBA332309D6C00DF5
F2109C43785B93336E939EB40A8E211D62BD6A80B4080089A09EF7487CA893B1
9C9442280B7888494FDBF68A5DF0F153CE8B54AF8F650226A700EC262A7314B6
FA9BF528794F2A4AAA78672CAE793A820A25BB2A0B6F0B0ACCF1CA0A25AB10E0
0E4D5A8D0C3299FD377476C2DA760514F3096D12ECF20972B58E10A8538F7BDC
9C130D3E67D471EF229009DB3DB6B2DDCE64EB35330E04991E98626C58140778
0C49B827C75595D506CBC357956A5B98187FA019E78BC6361271CE5B9F22B78B
1FE4C54EB73C39A8EB2A7B29AC7030A12D764A43BE485CE28770007974E1D824
A5759DA0449379D2D2A0580CE873AE1905621BAE730A91C178F0AC98AB7BEDCC
5D9E5BA97484429B74ECBBBE08203E55277F279CC71C893CD98C58FB14DA87DE
71AD3AAEBF999E98D913AB360BFC2635D44A5291FA4017E674E413E2E719AD73
74B37D0C733C9D6D6C42490D080AD514EF95923D3599B3D66400238F638869D9
B970AC4A2E42725008E12A393D0F37B34C6F2DC9293C9CC3BE2A8F4CFEE3AE1B
10322D5EE7142C7158B0D0736C2AC98575E4DD475A3F64AF5AA364DDE7579E59
AB8F63B4E0D1C4D5047A27825D72653D9A62EF76D4422E27F4227102CF7D5687
3D6F4B9B68B3AA8EE192D9320E77806A19730C97F5486AEF51F2F77B2B47B4EA
06A0FC8D102EF10428F6E97C79502C83A7CB59287DF1B1F9CFBA59C5E2E70B90
6934A0B000AD6E3CD50AA38ACCB558417FF5DC5F9935F53073E0D177981F3025
4D82117B33ADAD9AA0A4BF9CA6ECEDF0DFB7AB6A738BCA994A1931FC94E4E680
5A4C690A8A773DAFB2E96D261F04C105651AC4B830382F6A4FB33262E46094C3
D519D0E8EEA22F43C572873A347CA8EDC2BDF338059F2E77C04CEA127335272E
18EA2642378D4963225137B70D82336DFFA12BEC04E14580D009CD58FA9DE198
37BB0102F9048FEDEC4ABD9B796CCDCB7B02A60319B227A40368158EBD90EA17
E949ECC99F49460B4A8FC12744123F2946AA9D8D7AA794C410F4E9C5BE8AB484
A992E956F4590FC90E1C422A9CF658B9D586C88E7F35CB0B074F8E374100814D
44E9D52609F10EAA7620CC6B87B5719981AF8EE6A59058E78860B13FEFEEA313
2FFA2D59089F700B3B3780CA052F7D42D3EC6C45BE6D1FB3F56C8F84A7A13CCC
A4C65C7AB456CA55695970C7A1BAF61C65666937A53417F10BB50196E8122806
234DDE3E9875915500675CC99D82DB34E84C311CFF8C869B92066FD5D51EDEB3
1493F2AE81B87B3FDA2CC3472D6D40775CD82E40FD7706935ED47D5326862338
562D9039641247C5F33B540E92D4C217462CC74BFB60D38C2AA5F2CDB2BD6627
49FDFF8E02F7AF80CD6A74273F5204CCD208C109EE75EF233DF3D0A04EF4DA60
248130F81F4EDC871BBF6CCBEF418373E9D7051181315AEF884EABB76C5B134E
7E0185E7D59DB5CAE5D39349BE33448D2F6258DA61AAF47917C66C7C4CAA5C4F
7B414A39B0EEA406FA1978FAAAC9543651AE4409EBDCF96A9307BF3FAEF57165
95A08356F07039756B8A9EB14AAA9752283E94DAA8F0389585B31F61BDDF0566
F65058FE9B3AB95CE02D75BD2FCC775E27EA978906F630C6518080E65394803B
84CEDBFF90F3AB2CEDF9A48560232BB139834C9488B28D788AFC504E893DED10
C01332ADFFE0AF2AF7C74DB79AAFE3126059009876F859E718452C05CE7C68EE
B0856E15B4FFBA3CD2F39595D532A4E0200372E4C2826D76AECC9742051F9228
DA0B47FE071D80080D42025BAF901113110691F34D8250A9AC16CC84825BC064
E46F3D779006EB64CA8229BC102BE5EB76B441D70998D12C7A7F6ED118CF0447
70CCF14E43979D2050F407F4F7D0E0F11B9EA52D63E6F15718DEA609CF8EE797
BF0B781D00CDDD6F55942F1723F29D513973DF94CC2D37A36BF40EF33A9A68A4
10A5B6A004C631ADB05CCA5AB16838AEE364DAA1003C3DA41F48DE5B7C4200B5
FB7E2D2A25DBBC9A1CF87C0412DE5D58BA9334E274E26C9B301BAAEE8A0237BF
C0A73F81C6E9A5ABF40025431120141EE5E2D10463FADD364BCF40A754B65AAC
39D1D9BDB4B94B9CB3446E3A56E3B6E4055BCB1AE739BE90C5C8294E49F4B99F
2B2AA4574F4831CC73D1AE5AEB5732B3EFD6FDFA76A19B44620797F020956A61
C93EC15ACC8EE5F47D870C0BEB7F9A7F928108402DF39C62DA2EAE8BCAF81DBF
DDD7125870AAA9146D643432F79AAD8F5C10E1FC57E98334431BA2B3323DB8DA
80790A6CBB7C8368BD6725203E9898A1C8DC1ACBA40B76C3E0DE641609B79E1F
19339930CE2FF2B77C153EF24C817D7AC9DD236007180F79C6315CDAE90A82A4
69B57E08023AFE910273ECEE79C6CFD8085E46626EC261D4CFD11CB1A45973F2
738DCE5A41816ECDDF97DC2C8DCF5C8BCCCC03EA0E74AC1AE73286559F73B1DF
BC1D26B5445FF5374BFD8D77F09D23B259D25F8802020152654A5AA7B9504DA1
1BED02EDB8E804C8D196F4752C5681FA12621207B9D3CF12DD4118FD8ABAAF55
DE8339B25C512578912735EAAE2E58757D6E68D227634AEE6D372121E7500772
C31B08213276E75489F0FAC27A309F12C55F3EABFE9F23A92835210EBCA116C3
4BE77FF57934CA646A8C3CC88384C452B7E839CF80B0D6348FD525521CED878D
E9ED615CB62A15E14E92E6DFAEBB195D58C72B4D7C07BD3B73E05E840FBD392C
E31FC34898B2382F1AF3D589030ED6F378C43DBEE7A6450C83A736479DF26E89
5899DF8403DC91461325F612CF1421F3099CCD799C23DEC172CD23E64AD5355B
48499C0FE7029A2D96030C82F616900CD5D522C5E9DBC5C59AF4C51B407D4446
8B5AE76BBA9A067DABC0B7529C9FF7C578B5B9A4E1A8F60B624440A84D85B4BA
6D903E3DBF0886FF17435BBA6DC173E038D59848E9077DA5978D84A771403D02
DF6C15608EF5E2458EB056A84100F9A4EF4612FA58833A4EFA2FB9F67E4B0D16
FAFDD66C3DBFE66021E86B797C0C6CDE8299D1A555D837FF204ADB67C3B3F91A
7E079681F03349CA0AB5D774D715491E2407EF797603F3F4FD6DEDA4861DE9EC
A8370A54BC29C3C91458A1DF89AF37C6F0DAB95770CE4A5BD678E2F2212EBEFC
4A56D4A62931F84B04F7419DD223827EB96042E474AE1E3A6956E53FA19EDD44
9F9D958811F2A069E84F9094BC2C298582D593F3B22395A26FA84E633F794D39
81DF53F0C66A70BD8DB9593DA3E783779722DAE022915303A75014EEC4FB0EE1
03B593C3ED4203C0281C90E67AB377C6BD16D11B96FCBA1E216D1A74EF9C325E
5820D3C9EF826C2CABEB81655705CFB92100E55FAE9C25D7384C0657A7B63F64
CA5A16B283C467A106DB9BCA527418FA8042B461FB6C3A524F146BC84955402C
E2D267B6F66D9465907BB3E7B2C31B3C768B7F6B8C3381BF4903A735B7746BB6
812FE53F3785CD0EC8659948F84008F4624A4F41B8DDA112B4296E62C57B2F0C
BD35C95A1C147437C1AE23EB9CBE9932C97455379066FC8C4F948986B1F80EFD
950B74E614A6E83DB216BD04A75CA357C34155B331E40C9EBA04B48A1F3E556E
083A550C2AD4F4EE3FB35F0F955D4F94700D174E4853E540DE3D8500CB57D81C
FED0DAED9F613CFABAB1BAC778774020E88A93AE4E6C759811C07BB9E0C33618
F76E5C0AF797744A09169D3B1D3A7989B706DAE2E1F2AF632754B587F41F1228
E21080334304E3446580262393B6EFDE32C4FE7F1B0A607197A6526AF71BA6A3
8E10F51F646E6A282516B7800BA8ECB866CC39A192BE91F8D48FAF80B44392DA
442669E8524D20B962DF2B9C4020AF4F0245779D1A8D79C0582A7F2EE7A9F3B0
341F765DDE7429DEA1424807E241C2871E7B5E6940CCE0A13AAD41E86A92F398
436FEF286C526C0195120F929E43696F3ECA394C284187BF757D1835465DB7CA
E284D86431C1C11CBF349CF0A3239BA218F0C2CD3FFCA3611A5C35F6D03C0566
20C2307D2F7F407656EE3319940323402671C602DFF008BD50001F1B83C73ACB
BB36E66E480B5CCCE72592049A5C9E84DD7EF191A3067A22B8B6B064F2DAB420
32262C1CE8EB7069C9E67E96EA825EBBA92EC6210B4F156B29734267EA705606
D6F3B9C93208E064E0FD0679E859E43DD8C872A32D175EC93CF8721B7ACDE325
5CA12CBA65DCA98F93E5E8FC0CC4A121305BE3175F4DA94D5C83B6B65DE1EB55
CC2C368CCCE02F411B2E353D217A98C0A7192AC4C24665D06D282A433E1C09AB
5B3F13C918F29EC4F5EE95F0988778ECD6E18DF41231C626B2B6D1BABF07DC52
B425D696354C9512A3AE32C60218983913ADBB1A948D9A04204BBBE1D855C3CF
4DE1FE6C7F052DEB37AB594D2A1B9DFC895BF0C016142C1A8B337AF585AC11B7
9731BE9170BA3CCF0FD7F8FC314A388A7045BDF79F8143589E66C30D9243CC31
AD035DF3642872150141C36D1C1901D8FE876D538B2F90D0808FBEEB77AFE927
4CC14073847935D1BBAC9330DE3ADBF4CABB0DEADA786DB778E3B8A09D8B51F5
A5DC8838C02F83FF04AF84B359432D5A9939640EF9C73792C331227146D0495C
B5F6302C7BF689BC9A13BA20AB49272CF364F6D713FD0563BE0EB24FAFFB62AB
6888011F98CF2F5748DD094072A884320204AAF874F71B83F0D950DAD2F3EB2A
432B33FCC33D67A75F80431D059BF7D7804181BAA49A39C1F263964555FB435C
ACD435A64A3797EA6539AC74D09B705CE3A205C3F29825075574FF2D8B1042DE
5B415C26E7DBBFE9546EE62B15D7C6578613EF9D6B5161F9E6839E833CEC62F5
2F8D057DC098619B462D7789C875F633128354713DCF6434AE97F67BDD87E811
63E68BDD4B8FE08CAC524D0A8C9985149D040C2D3DD064CB1E86D5B0FBB9BA25
282D47F1C1154498E0872FF23ADAA51DF3B1B76A7003F7C8EC8D25C8D12B6346
BEC24FE59880303D5CCC0E0E1F21DE664153B48D8BE48B2DC09FBFE366A81722
B2B63D78163F227F1385113B9D2A2F0C56DB55B7354F051E5A65818FB42A05FB
7803D0BB26FEDC511F8B1C8B7D32352AEFD997AD21C556376D21FB706D26251A
2E174830E256A366A29BE5ABE7879DB7FFB127700DFE7530AE9D37E9CD14A077
B05AC1D894BDEC87BB96D4ECB72FCDE2ACC996C889BB23ACC950355F6B935D49
902A31B9CC54150184FC1A299434634D772D2EE66CC0C4FAA5D61652C8EE2B3B
2B10399CA17B715C8A6DA4099DE691C02A1206FAE8F5F752A36C01D95CB3DB66
B016182945FF14EDF5CC29C627E5E1802A7A76A7BF92DDB84786A3E7B20B96C8
5568E76D34AD5D4D314FCC538984EDC70AAFF9BC84226287AFA57C086503BAC3
DBAB76EC3D8BF465B24C1CE10B3FC813D976E6E53DABD1016BB6BE17543A15CA
ECAE8F9F9E72D5784472E6D34C8EE10A3259F707B431A1EFB315AA5AF737FE53
0BBF2D38E8B49287A1D890E8CD6EF325DCAB3BBEB63D78163F227F1385113B9D
2A2F0C56DB55B7354E5BDC73CDE8F9B85C14FF1821B9F35B28EF86C23135C4ED
9A482B50F8B7224BC9D6A2C79FA0D79AA7CAF3D2777E1A59C8249D368641AE9A
6E013A08E5E92FE4CEE1737990AFDE682048F12E79AB5914DD34C2F288709F39
BF447532EE213BE6112E8FB0D17159B13CDCE1585927968AD35D9E4A8F87E325
D28ABD3F9C11F2934A5A28E8EE8C15FAAED650682C993CB5D9CBDC8F851F5D07
FB609A56BF31C0F80F599451ECF860E70FD80BF47537F63C285E2D52D69BEFFE
A4F3E266DCBEAA2DA6B8DEEC9719388217EE26619DD641402A25694B3E58CD86
A7E43B6219A8B2DD4249FFD635D9B107BBF43CDEF5D2A41B5CDED1A9D574718B
9D2B81FA7194FBBF91FEE78CE10B1283A38A53495FE8A1E4FBD86CA8D87CB293
347A95C4C462D94D7EE9B486203A7059F0816D311CA89BE9603906AF71C93A71
3D22C4F332B843C69DDF25E4D1B4F4A7CED4E7C5F18E4857576942853EB240A5
DA832CD6120D4B91E43F19DFEC8409BD602C428B54026AACD95851ADE806B783
3556D66E5A22B56F79FEF11EF8A1C9279F366FB11B9A9D5FEA22F080E71AC92B
0C868E640A8874601B226C1DF155C9695B15D7A73C7B544CB8A18AF1A0B3BE75
E98F6E712917BE7D4DCC8E5F7C535BA30DB34E373B20F89136385827B7980C2F
E0ACB1C29D054C538F6BD473E34EF116BDA16A8764526105E28838291B4353B0
76358780D1547206329F302AF6853E58C54CEF8BAAB3E33AFAD299FD002D2C1A
74C7969784706D8C7BF88EBC67BFD892E35E6940E94893E1CDFD27967ABE1896
65B05B32FC49160E566BCE9EC4ED830D1591439E8AFB0F2BABD93922C7DB78C5
4E81C2E4C11086C037999D53957CC273451A1629E9CF30CF57E1A5F9D20F5C87
7F595EF84710FBFC4A3D813CCF13D5DD6F803215202A3062F218582C59B4973E
4E9FB1DCAC3BA9A28CCA91245AC31B810E4C95C914AFEB2D746BEA9F6C8A6C84
BF89FE2CB956B727F6E0BEF0F4201BB0EF1F8E0AF47621BE942E0D7CA9B7F9E9
EB864F815827C794622DB4FFBE5C1CDC0A12FCF4746E835F558EB0ECEC0A284D
6460447DA484FED3E01DF34CCA4DAB06CBFE57FA0D2B32B7421352A35A3C62A1
A1FECBE5A1590A6EA890B3CD7CC0E9AA4AD6578C1A1B0014B757D5C77819E5D1
E269C89FDA013C34CDFEDED054248964DB6204012762BC0158475B43F767B5D3
D053D0EC7D42622031B432E31FB4F327842B7C07EDDF7168D3DBFDF7B037184B
0B6E6C0DA6C119D61DFCCFFEC643FBB593CD552E8988163EAC979F279D9C79BD
BFC00187CE8B637BFC6008F2EDFC9DD891B09A1C8C54E99205C371878C31C3AF
70453DE2AAA0ACD129B2CB9481D983E3AD24ED433955320DD85F28E98E689F5F
E3F2D1919138D6CED9B6BFD3D785CB20E8F7071B40A37C43EB451E840F0A41DD
FF2721CB8FC22B1E61760FE18F794A09927AF3ADE81FE9ED1CDBDA7318141F02
5E240FFFE457158A5B4C875AE2DB39A57553312266A32D67C545347BF5F3621E
232D5693716DC89369870818A41A247F252BE201C9812E43E8716526220C43A8
454FF13A281E3095E94DCB32122B275BB120C8A8CA3C7773AA9D573BB0770850
308EC2EFBF25696EBD47A2B1F2D51EAB57C3C8C902DE84B5DEDB68BB29D4A84E
4579128388AE8FAB1C999BD8C3911D008AF3AD8393084DE609023CA131FB5BB8
95807CE2A2F98499DE8A7884C6758AE268548507A7D52C3B167B47DFCF5E6D43
B8FE580B64C8CD900571480A0D6752FB682CF36C2638473A5945B3802D8B56D0
92BD961790EDCF740BE6D85F8F6F380C16F21FD01FCE3F8DEFFC2827AA28FEF9
E3376E5469039B2B119DA89FCCF858A1119B0D268B0097317D9CD41E6F5A78B4
3DC9B8ED9895B99A79E7AAB8008A372A98C817A43AFE645A3E8D011EADDEF866
69ADC6AB1A35BBE7ECDDDA6E7F090958CEE20BFEEB13DD9B2D305115BB8E056A
6475FD9318DD417C39C7B96F90D19A51D54DEC8B4BB59C9888A6C81DF5751EB6
0F044956385B9E51B85411BDE88CAA7FB2F00376003C289863B96257A5AC4BED
D5709CF060B132B7EAB26F9C8BEEEC9111A1EC192468C9E12744F12E1B416CF2
8508705BF55EB2D4453F6F0468ED44EE8353A6910E6807F390E6D62D3E7BA06C
4D1EBCAE80285FCA4B4727843FA88AC1E58737ADD367A360DF96E835B752DDEA
C9C81F11B00105444612C46E57488A0F87B2B9B2E8222660CD7049A6F4D83525
4C64FB01053095DFECEBA9004B97605AD497D5781A73D952C9DBA62FC9D88AE9
9D8F53D4D20399B7471FB06104FAC59BF0404A36DB4AA5233936AC8B9D1C57A6
6B1657EEDFE2BA6E2A4F9690092DE105A6BEF61AA02DBAF38145F1DACAB2F4F5
1022A0FFC7A5B89DA62F9DC83751B380205842F2BD07B23150C7EAF9CD2EBFED
B3167C5DC00A1D7B8B97BD09F8B76F97E3AE0BE6C063862AB26BCD305CB0B37D
1DA86C9FCCBC1DED258F66DEF80B4B04DE7BCD2D8AE95C5DA816AE7BF8158902
D15511DD097EB0065B1EA0AB61A79FFC70BF8F1FF554724D1428001128959D89
F162E76365F3143D53478F05F6AA3F3D33F7FCA77AEB5E00CA71356D632A5CCF
18C9B0A741874EA4F6E5396B67A90D9E473153AE1BF7506FDA25AE9C5D2E31CB
BE5321CC1C7954A708EAEA28EE8DE8B5E0EE860E408FA5ED6DDF9C202373582F
723442CA101BABC80FC67263214132CDCCDD96DB203F24A632FB81BEF722593C
DCE1AD33D5FD1B852703A196CC389D4F8FA91C0186FC0D36AFD23E9CC5F631F7
F500A051F74794363780BDF00547DC5B4EFA87C182997EE6BFB881DFAED5C290
8B697E03E89E38C8C3F902FE52636EEFAFFD8306E26289B82A4A8A8F875409C1
0403410B4C7EE099413365645FEC5B4FAB14BF9E5016509317D16451B7C0C386
A4BCFB0B711A7715E5DF24E4E3E66CC585F7C850FECADEB3BE06167C0B01BBB3
D209E28F481DA7FF303F4FA340902E1303FAF220D58731A241E114680418B9C4
A9536C74638D3643B3233871D73B3C57F7748ECBE8E4695B14A1804D150220C8
BF4661B23D9DEA109559CD363E366B3EFB11DCDA2DD829CE36C20E17E6FD9777
6C7B37D640DED60B931399C72CDA715D1A4328A4B90D93FA21F4E0F96B9CDD76
4A7168FF1E3532C1283971EBD2D10D56011244A3E174B7F581D1B317FBCE1B8D
C8C0C02930B9D47F6276DA9A6A66EBCDF48B54014CF8396540DBBE8AD889EECD
9040C51A26D828EC7B3CD8903E85E5F9DFC8C9093A07D4D4535BCAD6CF369E5A
9358C28AD8710BCDA86D4DF33527ACDB4317A096B045091494DE92C48DED688A
D3DD5AF797D15DC04D44DFCD0EAB0F38F4D5A3E177392EE1CD51C76474C76392
F4DEE80FF0F8B982101B97F3C16ABC5E5C3FB486101B38C74C77A301635DC76F
E964B2C6494E5E3B14FA0950FA23122C367537288AD379A7AD895AAA0065D910
943A34F775F3D8002C66E15F8DAEED5E45E48D56D6DE027C9D0E13519BFA07F6
E5FF01DEB3DD7B15D5FCDA1D1DF99BE220E6BBDB2B0B65D41163EC658B071B06
BF6FE1B4C27735A9CB9A32941DFF2B161DBE3DB6D33930A7D76EB1255ED697D6
9314BF89DEBD3FD140E9DA5EF6C27B5FFF1CD917B9A70789182B2E73FEE574A8
B3C5BBEC36ADDFD4A25F3AEAADD188D2070EF0A580DE39E5AC37E4B1EFCD3549
8A39D063E69F70043A3E5225E0377ED328C6E7142E2C82FFA11CD376A6FEBC07
CDC9F79E608D8619BB85D08BBC32CAC70A8210810FFB16A19AF8F3277178E423
EAD76B84A5C391FE85838F9D11149DE223A45DBA0AFFD13B28D9E80B247D48CC
93B470D7D42CB5C5949F9F7B0B17DA1BDA20AA9322715209867B6FB74B09986A
F031EF6014F69C6A79264A587B5EB867DAB5873AB2E3C753D5D7620B2E22056D
CEDFAE2828FA904FDB8FF50E6F31A6A7A65DF2F42FAA09D309C6E144DE4B3C66
2046BB1EBCD5E9499B38F295BDE61D167C85ED27E6578A6FED585DE48C39A62D
2F4406C2B7E142B539F763830325BC6836D60CF4DBD757D37D729302CCC88BE4
704E09C76C9ED8D1ADD5629A750CDDA8F5A1C5DB1D1CEAE0398DD99A002C512A
A431B87475A1634CB880AE76EDB22A1F4A85C975FAD0EA09C75128FCB20CA8F4
12A01BD230FAE813853E52B28006552726F81B43FB67740A2DA858854ABE75C2
9C51074B137CED215CDD3AA00B9AA19B24E942AD98F695E5D9C0604BCD1E0EB5
C297136450F327BBA4A9F8EE8A02DF46F9FB5A6BB9395EA4E6B63413FB84F35B
3C00DF975464C281D254F3A4747009C32EA21469ACA6CEBA5D3E4A720DC20710
938780E554E9F6B8491F7F6FD4546F9AD85E0802450E5F26858A0DB60DDDBC9C
5CB2C3B22384BACDB271E76EFCC0523EC2D6A6EACF43928169A257E01019E1C8
81391CD9074822781DD54CD700250B2572D1C17C880A244D60DFEBE780D28856
5525B1440F2BD4948071FD65785057E2461DA7A633D70596A77672B643A6F07C
744E8DAD46B7D3F025CE09DA9FEC2DD42A55E29145531A3BF944C585D700A6D9
FFC5D7F407F4EF7E158C4CC8EBBC1CA866FCF33A8AF88E98939F8599846744EC
3BEA80D627CEA22F9806FFA15EA764757CEDD43DB2D6CD55D0912A34532E23A8
C1188ED2CE553917FB5F0DADF773ECDC026F7B65CAF736AC35F0E352BC416FA9
079305989C17732B86C1DDF028B80BCE072741A4AC80F0682DCEA34855E07C23
ADAFCCEBB1D1A64AAC846D94E5DB519CB5E16482F5E147D766062A3C322CCC34
C921A0F97CDB6BA9B9A5EB093A2A3286266CB70F7351F71194F4ED8D3079CC17
49D968A2DAD4567B1B44C92E8253B2C75F687F2E588A9D4944277EF9763287C0
56E56AD66D0E06466D0B47EF9084F6F15591B27312E428EDA13958A286277450
C4B5E6156F9CA633E9638D43C554BC071299B5FA4F74A8AAA6A7A413351C22C5
333A59B8BA8FE0D0D09829E3E9415BF3FDD14D19653253912B26E3CD28F38FDB
AD57DC89243F6ABDC47D10DB167A5160104C4D003CE3057069C48206BFAE43D9
3654F1F9F0BAB89749450EE3B380C8D707A59415A65AAF61F907AF3B02C5DFAF
14A6E966B4BC1137872B51B2D3023E468A3B09B0EA5EC5223CBACE2E55E35029
2E62DCED79A5E15808580043FA54B46F50D0F88768211C3F41A8BC974AC15507
8E45CE07B751F08728211D9F5F0C5CAFFCB3B5D0D46F3BA29CFF7263084C61E9
2659C53C6FB3932B3ABB615C574286ED433BC407C9C493E256D926EF49ED2B0E
5A82372EE5B315A23B4CDC36AFEB2F6E484CA6F6542A044BB523CA36022A44A4
19746BA892CB617A104D3408735BB84290A1DC05B8E7184B9C3CEAD1F874D591
AF1F932808F97F4526BA55146C2DE4398DCA3A46BF3654F34AB81475951E843E
E1558E76EE7B8BD741522F1D7D0EBAD889CCA09E3D8F7AFA01C64382B1624586
45F4D1FB3D7C83CC8BEE76B614D0FAA56C11ECC875F0979370EC1FDB06635412
F187FABB714B73D73E25E8B728E94E26069E7595EFAF10D9857DE3BEC12F67BB
8B3F1DB21ADA25CDF621BD9FBEBB420428E90CD2EE966ED5305FBC32F80DFFA5
FB2BD261EE24253C10F1BC42EC5FFCCECDE0F18BE85EB0F6CD6D201852C492FC
2E7CE7973BF65CA35F7C4AF039C7D1BDDA52E3FF712FC6289E570B95CCDF5DC2
62060EE90DAFC081FEF75C6C5BF23B76C85D8C72EC1CFF33817BC123370C8797
1F55E64983F696516A5674E0279559D8162A210E943C496F9C22C72E5B55A362
F89A9089A6951381721678AC07F9CCBCB68EBE978C344E8DC2D8CF7F7382FA8C
B7F0B65521EE2FF83C85AC9435C06C158567D25BA3430FD9438AEF68DB0DF2F2
FFA4F41C1B37DE9C4EA059EE90BBD3A8DDD0D124B7DF2F0B5A121474B85C8ECC
99E9238B1E39BAF3F1CE7CA459C24CB59729024D4371CAFCE4EA1867EFC6BDC2
AB77B81A500A6AF46B5390C7791BC7EF75B6B483D222394299B2755B1CB36D85
D240B3C829860D4BB0E42E72D00E422F63D92E6003F8CB9176CBE5333BC16136
EED8B268B6AB7F678926E8576A0FF818D7C8E4F379C4873D709FC312E3A1069F
48568911CCFF9EA9F8F34BE6803535B52F4A24DDA174995F63CE171E470B32E1
8FC032C93BD5C25DBA1FF375616A7DFC4C5728ADFBFCA9C3FEB367C1342C3927
025B65E269CC08918519451944A0B949BDBD941EF2FFA5F618B52C801DF8118E
301C18F408BC17F9E5929B8C84F464179842CB9EF14ABD991C2DF2A9791286E3
88F35BF43B7A89B63652CCE0B5192B2F5D649393949BF758D35E8EF3E43D1F07
1586A53D78FAC87795B9D5F6D44A7741E635D19D65E6F7C19F3AA89593AB9BA9
52F56D67D85F4B2C8BAB55FC82C204ECDEC6F5D61E7A2C0D229B39BDF90B6828
58719B71D65043D5C60960791452B77091B9689D41B536A4317585E8B9644F1A
6D77E82353467E7A1BE798CE4C9FC62FEAB50E6C0E3F2DCE97CAFDE4BF54179B
5F3E80B5C30130D82D087A2188BC928D2357BBA18DE9D98B7FA8692F395B0891
04C00B45CB04DD9A9CD7037FA742F78FC9095C71E1680634D4535AB0987895A2
DF3D2530CA94B0DAA79BE8E1294A99B42A434E810EB362532A01A73CD1D90ACD
1CE7EA415016CFD1323B239944FC0798BCB0F0D7B63D784B61EA4AF9165A548A
8519BDF184E6602B0D2C1E4F78F064BBBE7AF9BE77ECC562940F8373458A7218
4108A4531E043FFC63B3534F951CEFD8389F3BF0C66490121F58F9137ECD9DB4
E219B58004064D30E640DD512F8E619C93840035EF945768699FA182CDD218E8
8BC2A67F7AEBCAD5400BD651FF01ACAFE87F879EB279F3729436914F0D8894BE
5968509EC972DDFE5750B90039AEA71EB0705DF222B41CF156267762C1F13245
94668C24A6DAA4588A591BA8A69A74B370F5B2F02ED6FD71A77616927A8B7632
56489E582BFBFBE1AC5D6FC96045BC450E2636200FB9036ADACDE64A3ADA2AFC
564F7A57B90127AF5AD62EFF128EF587AB797E701A6E1DE908780A52B50FEAD6
A8E4E45FE483FE3078F87091387B699C42CF5D41E462BD503919AD63B4865295
7CCE477EB3A9D953831711876D5C8C8440A877DD65AB4F2B2B56920ECC9AC984
9077B1764F557A5833197F45E633AD0792EEB731F6D39DA40442E6EA9264E8EA
33669F51427FCE7F490E3B5C6DB7C59CE951BEC99518FDC949290A5ABDD5B06A
FAFB4A0D0D87634B0C52A63CD07BDB2CAFDD3355D7DBA799033CCF9CC57ED493
0D924CF22755687537A45BFD273A44B1EB69C07BCB3C63554EF6E0075AB42049
8A2F4DD7B842E3147FF33E9BCB4470F0C9F818B3E620C5AD66060746C0A627E3
8E688574A3393A85908020DF6C5B8FB94C99F20C65017A11DD32BE502FB8B965
57047C0BBA75A8B822904C171B4AFADF0DA0C0E7BAF465B3875BA39C36AFA11F
AD7EDD3E03399B7FD9EAC7BA55519356C5CF8028B32806C47859DBFCDF676B2B
AF584E2E92C1AE250F8A0C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman17-Regular
%!PS-AdobeFont-1.0: LMRoman17-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 805 195 0
%%EndComments
FontDirectory/LMRoman17-Regular known{/LMRoman17-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman17-Regular)readonly def
/FamilyName(LMRoman17)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -252 def
/UnderlineThickness 60 def
end readonly def
/FontName /LMRoman17-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-400 -286 1338 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105D56139855A7DFCE26D44F42E43DCD4B09BCB2
C0B13FCCF45D66724D4F9BD1AE3C5DACA322D5F106264D18B14EA595343FCFF2
E1123332F6D493151CBB41DFD055E2CD496D222EF41B4531A6CF94D6BB6825C2
1FAB496F22FD3B47B1E926B9B05CBAE6422EBBCEC149FC0C70F6F86A0F810CDA
0AFDCB50F75368AC58AE244325EB6CA36EE300BA83D807CAED125E3B16569E7D
1AA186346F4F62D8BF78541FD9DE8C6F961A6753785923F4F221656FE25458D5
0A9808613A1EC6942E9B97B18F0E235388746DDFB04A5234ADAA9F2B59A2B48C
0C094FA865AEF464EFE617DB7A93BB5C2F57C77326A329B432A6BB3AE294D926
7D1EF387E9DD04FFC10FDE445DC4ADFE15D2BC0BFD34906D473A59603FB41480
D35869D2D71EB1F97B5CC81BCDC2ABB45437BCB13EFE608A1DBF25BF03B63C27
CF678B3ABF5C53DBFB7F3E4AF705F3518F7B3682A0C50B4F026D3AD818ECEB10
ECEA905FD14A5D0D09B7B38A3238990CD98B0256D11DC6907857007F39B09C8B
9EEE545A072FE5A265C9EDF7CED499645D848821594918F4F56B9D154A316567
BD9A2462398F07C1CD521F9F3DC87C721A67F56D69470FD29CF72CF5DBC7AFE7
C602AD7D27CCD4689F232657467C14A5FF7F7D1BAEEE4E303119C510A0B277CF
F068B7F4B6EC64A5D969993146E720A1EA0524D58468F113D6E65D18FC32F4C3
90363D9FE4273E24589ADB87E3094725B46F7273BF66A03998BD0D14E16A1B78
96474EFFA7572D9D2E0EB393022F3E8341FD99DC0382C7972E10609B64468C85
4DED836B378EC22C47D64389EC39A4F9559CEBE3FAF93BB8E469C01434A269BD
92AACB6C24C5C93C36059974A75F1CDC349CFC145EBC13857CE69AD4F14FBF35
AE0E25E3A1B65947D70FFEB85C9253075B5D04025AE0344EF76894B658A64DB1
299509A1E7F6F61659F406C52B44259FB9B1C3B24665009041CFE641946FC93F
1206E30F2B6DC521CBD912B11F31CD4425A622D80EDA1C2462F1D5A4F1F9AE8E
C65B71077FC38B7D5F12ACE337B70E29E1FB46C68793444CEAFB3708C00A4BDE
33B9B974EF9B30B725828976856569EF3F39A0A4E5F1AA194BAFA26CB0F365A6
7C3B6481CF7F0B32C147716CA5CAC05D4506ABF94C6914A674BE9C2ACB0648FE
C00842BAE3BAD9B777CADA46CE9DA5201EEFAAEE178CD38B9126DDAF9B52DB3F
3E766420B22AB9AA334582FAA7A0837A0DD1EAD10B0A7A3F70DB740709CF3651
1A142136A1277E259660759953B83813C9BC603B082CE208D823C0D02DCD209E
C01F28EC7B1CBD1F7A6F998AE6E072B40F17243EDE31995D77233E9BCE9D804C
05019B3A82879EDB943E49C22697037EB23F6E04619B81578C0EA3C3A72402DF
B9B35C8E512665555D81CE61C00B56F28F02FB1F11D7C48435ED11BFFCA24481
6CB6ECBE72B39A04D306436AE49441D0CA9E865D7C3B977284E5F84B725038AA
C6952E43E8AB34218E6B25E840A594C538AA8052854792C3AC179B65F6E5571E
7997ABF7A447BDF55731E6B46682BE291DEA72A6897F5696C127D3C11BF012F6
2927A363E28D4059507EF2E015E8D9C0F64025C76E0550BE31DCE776AC8AF5D3
A9DE88C7D61C01B842371D586BA39BF972145C6A25C355CF276F00AD5F5E4EEA
8D229184191F886F2B2BBDCEB0A04AD8EAEE5761B51B3230B00A9EFAC8828C25
C7DD412DB8410C0151D97D98CC41BDA1D7D31A9F6BE6F146289049680C282D9F
5217376809F20276C1ECDD3A63E5883BFFAD43C551A1D8CFD55EB82E0C05DFE6
8130EE05F7FDB1A8A6B3B9E466F025C1104FFC3259D41F4DC62354A35CEBABEB
30E421457D7FAABA1B604C266E6C2AA4268B56124C0C42CCFD882CF1827DD0B9
79E7FB2FF97EC724BEA6F27CAB18306462FC72D92AC07B132E137AD2A30F9CDE
995E06A82E0E3D4D0616EEEE3A9596C8184C35804E0E5F0C6B8D2D120C125B8F
75C5C3DE8404F8ED72CF2BFCD6BF52FAABE5F2F227A027264286E9DB31983877
FBC16B4E5EC481D8E9EF87B31CFFA052985DAA45786E411F8AC6D254E74DC132
2C0D7F55A5CB694336732534694A184539909D5294C013423B361FE7CEEA92A4
B32467966BD1C113A2A3EDBD6FBF2402581F6F84BE8AAA3CE7A906C63EFC4CEF
02570758CE347F60D3830085F5B2B4D380F11A63AC1BFFD233FC8DA5F4A317E7
64B8E34E090A8BE3010386CCBFB7C616D951BA702DBBF98C9D8B9704AB97510C
130D8B87A1507FB81BD5213681040FDA4FF30FB007D57FEFC2BC99037221C009
02D4D9B13CA2F70CDD4F96B7B9CFDB7B8324867731416D6C47683F3A0F55818B
8E0027068E06C356325B4456170E9ADEF02464A57D0CC0A750855D5ABA0EF103
567F98FBA5BAB5CCB5C196731EF7E3B566CD868B5F3D166C13ADC94B00E604E6
721FD2C1CAAF464D6C86F05088BD36B92F4FCE9B19B7B1996F14C5BA69177FE9
4D14189B85DFEF3367BEBCD432403C4F90367DD0CFAA01DAB7A5752742E65D77
FEA9809370992AAAF45866D8D63736A1E7496C76AE7950F5FF284FB2BDC18FE0
7B44B71BF2602A64A1FA91CC05302A5F9CD71974101F6C389CABC69B231B0331
3261A56334B97295BFA4099D149EE93FBCC6272AF549BB6565F9F845E184CC05
94188DC4771B8904EEEBCC20BF5B9A4F63E82747CBB98970AD3D2AD2C8B19311
3C841A0FA12A092840A740F3C75A30C1B241A0DFA7D0B9B351AF17E0C816AEA2
F5D3BC9B70FBC55DE4418ABC37A7CF5B0F58B4C250F283D739C2D2D12DC6CD0D
D3C3AE03D656334D7A3E9F845B49E2E0C1B754A6708CBEBB427E01E60CCE30B0
F2B691E3A8C1DD510CAABEE91D7D802FB65F4066B638056F697BA89C4DBFFA76
69ECFF4F8876134E5B5D5D1D811F297520B630C40A31BFB773789D9E08F493C9
3A3EC860A40E2BB12B9E18635F0C806A7F79AB1668CB03AA08FB060A2ADEA4D4
A523B18B181C72BACFBB9F3A3D031A22BBC602E5DC41ED854A7CBFFE2CC5EDA0
E749B9ABD3AA4636A99C72207BC789EEC011E3B29A07F16CFCD9CF65AC6EBBFE
29C193BAC9D1FC83063FCAE5B90560D4FC5963D1E78B1920D259C0095BA4D5A0
F9607E25DC31305B4D77035D241AD41FAE4BB693A50E24F925F3A8DB1A1CBB61
9C8036F6BE8AE71EDBFAD15C24E79ECBF64B19365218791DA09A09C7AB12BE2E
64A6DA55B6D135580E9B582F75D5CAB7B1B0B530C8CC5C411A0F6D55785CED7E
829F5B18B621B99B494EBA7C40428093773871502CBDEB3982F8572D8519BD24
B691FB11A4EA7C95D6264824385F1E9C6AD73172B8777A6A9C8A21DC1A985E6F
3CE8B6695B3C201F4B7CD67C0896D884E85AEADA1D290708A8224C649D3021CB
AB14E580A3E779009C4B3893DF4E25B71CA17D427219E0E2F1146E7ED0A1E1A5
53A05978A47B3D160A42384DA31DA8C62728B38441B5B6FE9FD922BBA326D4E3
F1DC5CDDCBB1254A1ED245390029DB47FCE3F28096A95B9ACE24B77BBC1AFE19
165F81D3012F16BF51E25FDEDE60F0532E3B730962F63C8145BD33FE970ED252
9C5E088C233C7A855614597763D2683A502A8E65CC48BF9CBE57898D2E98F3CC
F73796F52D6DB6827415BAFF2F1602E398D58763CA4C0234D36FF51BACC428CC
989ADD61913D31DB3EF8E7D0C2F12AB40F3AACF57476FE504CB17DF508280110
4FFE76273D0A94C8C2DE572535D55B1F77C28A164996CD000671173E48D4A90A
7DB5437D587ED501BDA85F2BF3190FFF5B3236F14977546B1D3C5FC77C66B8C7
B0E97A1715D744F76E0A72FF3F5D09A965A3F581AA672B92965E2EBA4725344B
D3C039A064E30B51D88D84788538D053AD12CB8CB171565D669B9D6D592FD96C
D06B3C08959B0B8708B2B6CC03D46CC925C03999939FFC6CC50503BB87156579
7EC537E2663D9582AA6642773A62555FD57DCF1448BEC02304BC812F4971361A
279F53E8F12EEF7E17116174B7469E78C8A4F76C9B6DD93C12E49D04DC071AD3
3B11836F7EFBD49CADFF1DC7AD838B897AD728B35D869CF78B86D62EBF48C20D
CB99FD2BAE6853877991059EA439F84721CB74159EA405C55CF780737A7B1408
D4DA14C2D485D93D8209C94E8875065A8D2F7D8A673AA442E5591CC36E692F46
24D84D70949442CA8BB93B63EEB2761F1FB99B83BF35C8C3C0F03DD8E221098C
BC3E05C346F6590D49978B1325CC654E70D7C81F03A2AD9E74B129069A7596B1
FD93AAF111F2F744C434C7EF5B7A7233F13A4BAC54E37D32E33AB25D55A1BBFA
3E1FF9624DFF9D8CF47AA03593193376AB667F09513B075F85976F9C2129F417
E95A8E1A84BA0C4BD4A6BF0ED7AFB4A1FB56D6CCBB9DFABA39738AF12C634447
587C9B9B56E1317D43A0FAB83995414E9D3900926FA8087A61383E01E64F9823
7D404E0A2787011D33F94B6D26195584679DD797ED657B9BCDD963E79046E453
8E1175311D5C8EC1832FA11CBF417B376266C585B6F3B17B1E23C26B4279C37E
24DA280555AFE0A03B16FF19B8626E724B27AFEB8682C88BA3E2D3B21F23C56F
76E3568322057E16C7309217D2143E2BED41CE8DA5C50E9EDFB70047B6D2CFA4
ECEF0FBA9E5A4B5B3056933A3730D29252DA027E97E534AC03C6D184E6656CFE
6D2A1A68C78C7A79A202BB5A0413958D6352EA88F4538F64D0A08C138EAEE72D
20F59CBA5523616642225A5AD8C4FBEB07FE262D75AA093A73E9E20C0714F6F7
B0126F2E1EA686D7693BB1BDB187E14D469FEA92E13430C7CA1FC658FA031AAD
0EA5B01D2222A8F57FDDAC9BB599A95E1F1CFD654ADAF5DE725EBF17B8CE4041
CEBA92D692FDB946D81E88F2A0BFD5C81EC70841746D0F1FEF45942CEA347D25
3E10733C2AADCCB04BB7AA11E1DD8A770D7E3CCB5524F6275E2E37512DF720C6
02EB5CC07CD313A25F3A0E257751978E5B0B9CD17F7A570E4EC81674B196E901
B0EEDEC46E94C594D4966F56CFCDC2DE5A13ED881088B6B60682F4DD99DD79DA
95D9239F0F41E86F2D4EEB998520A57985CEEF4463EED87CA978118AC0AA3361
059181C4A4577018E8150702C6F068D86A801BCFE9AF58090CC13DA30697FB05
CC80A3CD604A45763B67768AC5261DF9C7E081A7F60049B5EC34B526265F1A63
525475398013F04B49F67164F03610FDD7DA279097919A2254314FCF21D618A1
1C8FE5D4071886DDD520D8A429FCDCA476EDDFE15E63310A8BE721FAECD48E15
1DBE7DB966043D6E6527DA0FBC55BD73C8E3733A19B0303157409B88DA26F87A
E38BDF0272114C7B753B4CE703F00747B6689D8E51A39E859BE6FB98EA8BDD1C
CB62FEC5AE724457E9628C077A0C7218B75C8F31306BB264BA3599E962F01F52
DF6DFD04632DD50A6892055F56769DE68B5A430916F45E36D0FBB705DB067B41
31A2271F032039F412F71DBCF5EE596AD5B76320B50779468E29838365121EAD
77DB71CBA6FAE1532A43EBEDDB33A01F8487932A162CCCA0114944A1AC1E57C1
32327E0D9010C431E2D5BD26ED30F5D86AB32DC91F6FEA5F7B8DAF584E040F89
694E7E7977975282962120B9FFFDB9245FA7CF327CD80AA98451165EA950EB72
86B42EBF7CEC198632CC739EEB8A4075951B186DF6A9B62D9A8AA0BDFEBF16ED
33449F74C1407FB4E20EC3AB0A7D4F70B2EB67845910BBCEB2A446111B25F62D
C4A7E06D4A5B6BFC9D408297302124C1A7A32D8F5976F7CA9EB5919082927DF9
94271B1F39BB29575F0D72916AF4B387E8C7EA25E35A5F0F81B80C9DA0EB028B
84A130FDF9F47F6E4E37946F0C146B9D507EE79DC7A715CF4D65DB25632C1E53
6F87ADBF1AD9AA04D7DE2096413AB8B3C9E8B6EBCB517109806DD2CB6704EBB0
D4389D1217080B7633A1FB9DB4D49F3FC041809ACDA455C62A76B51D730EBF9E
C9E7DEAE85DC7A673BB1D8E2B410F5C5A738B3CA0C35AFFF9AC837B3386ABF10
48FE75DBA1D9EF9617E8725C926027C477617E266F152EA1F2A85E0FD14B7DFB
4AE3C63B2308F60ECA84440B3D7039BC23A930E6B542DD3A039CF3315CDAC848
3406A1AC1DF70188977249C809CD4F96A8F41B387AE7E4D6EDC2658A029D0F7E
E5579077D7E9ACB79888AF725FDD44F3B23F8FBACF1E5FFBE991A8B058F46A9E
1B1A2B01CFE59DC489CF112C663A58EE071444E379817760012E1331E9DAB047
409E478B5AA679332E793EC734534B91EEC5DDE1D8BF68483C3D26399898D377
74642CBB01A1CD423EB147F95B5ACFEF162FD27D5373C293BC00646EFA0A9657
0BAB2AD4C3467F59EA1F2C158167C6BA509BED34E0B0DA099434D7FE957999F2
F7001A3D0E8A24476CEB3AF69E875DE4F7903B6AF8B0B46004D5550F42CA253D
B791AF07085B236FF8B75B8F03EC5214CF8D728E34323537C57C4D9349C68529
53E9F753AA892BD9A7AD14F509BA49C6320EFB421F72D01AA9FF33CA9F9C8E6F
F154326F7C3655261C4ADE8A10229961818A54D0EB5353BE47D53DB0D8DB88F2
B44CA96B122954822C27F9880CA42AAC79E825472320B6248985CA35DA36AB23
0E3D91EDC1384F92AEFFB951414EA39F0F77B9485D1ED26C48BD4E096F1C03C3
AE5EF8D7F6C7340740A748F4FC18BC16B98845BBE333A7D198D4ADBE1CE72DCE
5CDDEEC7E3113C9510F18204616B93A009A14C24A407D408771341818CBD9212
AC5931D8E41B7EA332F3AF83E8680C4298BB02E8DF6E257FC4720F34E4E90865
91EE5680B98E72A5333860A8AA45EFF92E2473A8B7B88E1A128C703B117F616F
6E9F716F031933818E49A91E6EF714874953C224199FE70B61320E4515AD6DBB
2F8DB8234F076977B2016F185EAEB3B74487CFF6DDADA08CAAC84AB583421E5C
08469D8D97C290149ABE100A22A0FA9505D9A09C8FD62172610A719CD4E8F549
754F257028C2BD74CBD41DFF5CB88D0BDCBB4DB845A17B9E6D6C8ACF2C6986A4
1EF5F57E13555656242DE44291E0A9944C09B4037189A2B0D04409CB8446DF8B
D597B6DE0535CBEB57B88696B62F9A8127A1F17438D272070E6AAED5FB232390
D7239C22534FEE644AE96C5718E589E829A43389FCC27560074CD7A9D04043F8
BCE20460AC5FFFA53A6D2A30DB96AB7BDD560A8D4E29B7FAAE921B05DBBC4BE2
2B74FE346D9AD20730AFDD020D7B237B018F120A45FDE2CCCD226811D375A23B
26115CFA8F56050D5658FE6880E580359DB44661981E8B79C0C240FA519D94C4
1FD7DFBA480BACE78DD43DB1BC2E1EBC71FD6760949B7B5EE9B80D37D0EBD157
481C66507725A69E5421C8716EFBD51FBDAFE1177E614AAF343CFFE070740F42
2D4B14971C6890397008D96737F48EEB999FCDB7D356654DDB145511CECAF426
7E9D378CDCD13B00FDA43721EFEB23121A088ED33D3C48632CACC65EE792DB60
D5267FE9EB63076703B29D8D4DBEBE215533641C0026F865C25A312852770DAB
7D39E1217619DADD5A529C2363EC82C0BA3D2AF8649CE5AADCD3CC336BC012FD
2D7BD24D8F00C91C6711E16CAC2B2868FA4FE134A8307E725D2F8168DDE77833
7122FBBD1485F73B4EEC2651C6D160F29DBA2BFA67306C1B77FBCE256EA412CD
417BC8A148064158B875B02A026097A3219B55F9AB6DA5DB9F1E901E4D7C7EA6
78916CF881217B829D854069B850BAEA04E96DC81FEF6027264E9A58BFC3D85B
F8CEDB0E2FA50C793DDA099604F529192507F0B74B352EA746DEC5FF176E1FF4
CFD07444056D9EA9CBBB4C8A493A181DCB5104577F64CF34B9FD8A9CAFFA4BC1
5B304C88C2633A2DCCF915040D65566A1D0D80891CB5FE81144D50911D347552
5CC980A39E4CBD884D4994A7EC9407F5280FE5690CC036BE9723187596489A88
94E0373BF6D0E1D56EA24BEFB315DF194628D5FBEA6CF56D0F5346B6B6C1DA1D
D8DB5A7CEBDA867E2657828356256B69B89D275EFFE5BE1B9A1FD518A5849CB4
888A353080A6446C0D86A6F09F1D595D0877AE80380D6CFDBD8220812A59AB10
F1D7FF4A5199B53C95A6058C2E5BB6DAA5441046842659B533B6F86178F4166F
4343B61F89424B1587F85696AF202D90C75BEC45ADE4FF565671CFAEAC5BFD99
E207A62418DD31C081D505478FADFD7DCC0F4E58304A2C48FE79C1396B666935
91F60A42B9C475AFE71B5A359C4A09299EEE81BE616F5173CA2F44C6389E7A85
FDEBC0D0FFEECDDE328ECDA5EC2BE2BBF6DCCEE85F7A35F82463921962FDFF27
5A0A7A86DDD96474F7F7DD350006200EBD1DF4F97AEC0242D5A0CC311F98BD3C
1E18BEC7A472B8333B4D9438C2D541657DC358F6305450C4A820C8709AC2F0CA
56073465C30981210962424D9BC090DA2B26FCF48311E955631DB6480CE2CCAD
E0F132943AEE55FBAC84C857B0301FFC461601672BE6EED97FF91EA2A00C800E
8D655A8ADAFA9928106AEE7655662B6F1658F14EAEDF93FCFBEBC586BCB872E6
66A060E4D9241802B72B1A67E238C86B1A9EB6DD1A51C46F14D9CB5A1877B3F3
084130C380EF7154D0872A2221EF067D5A7F2E80A0F9D2A66CAB69D497F6D3B9
875B2B79686698AA4036F7EE60A5CCBBBA0E372FCA0A5EF536CA71E3A6DA9170
3D3A1C188354695617AF56DDA1FBC56DBE822492D04BF1A081B8EA09254B84B3
47E70457B09A1F5D83BE04723ED0B64CEC33739EDA87ED682689A81738CB70A4
F19C47EF4B9D3D2344662A65BA823265CB453323EF4415738C62BBA2C6AD31A0
D44B1E9FD3E9E8CFBC3572FA78B26E3D7A2C72B64493E5043685A5A66E5C53FA
B0758CD7435C20A34F783A4273244DA0E4AB11C078B3877DC96B0EC02B042F79
E7688002FD01D97BF158A6719662EDE7648A99D75B0C6E5665DF193233FB4633
FEB61C473EA292BBC6F33628CE825E163FEA3BE751DD38532E17C44157BE5CF6
E820011B63C4D1C12A72CEB48AE1335E8331A6DD5575409067295FF6345939F3
78CA635502AE3B9E9748CBE052AC7C80C0A7253DA38F8096C24D6AA92C4340F2
E793A0ED8D143B9CB5FD8950EF78BB377C223A8C82E274A0A0FC2BC1A334AEDA
418BB909362E96BD34C53EEDB7645170A6A6B6C1A85D0058926158D48D269ABF
00DB7D8E1A7DB1E86B93187E885AE2C67A865DF28EA5C8FCECC78B2444145E21
2662770E9DED1AB2D5FE06DC6D27AF94F660759B7B78206BB5E077D703D00DB3
392D71113C43E1AAB21148C4E64E81EB2D210E04403C9C200E954B4A6DA6617E
3A56D72EF332FB941F41AB154BC7389985CB4F5A32031AF9C7AD1B3986EF4BFE
A66D952A0F1382E9F2913A745245CB6AA618D8F66D666F8D2D70B0FBD115BE7E
BCE816AB40D2ECDB17E15F292854ED1A79961C8A15842664D3F1345CD967A08A
9C8872FCB1ACF80687D6383CA578157328AA019A4616E1C89949B4138450AE3C
9C1B184DF5E4681019A2F1C34069E064E643D728556B4481C7F77B18BBC1EEB4
3200DB0817AF4067C776E7AACAC39387F57BDA43636C5E19460402D953690FAF
7F415B3CCDE7AADBCF72697BCC9D14678DF12FE0609FA7DF61DB5F15EC186975
859E069F70F6221CFC7193127782371D3D4884B50E1295C517FC56B91B19FA55
8E3CD6B827A8DB1FC3466DBF5CA45728E9274B0EC80F4D60994B9841785AB7FA
3A76C89B41DBCF23109F933BFDF5A9F44ECC5B23462B2312B87322DC2D78E47E
9A722117650C8F7ED57684A4CDF5D554B1CB65ACA669C7B1ED60BBA08F874D9E
1B1661393BD85DEB50C6D69CFE67E259717847836C58DA3892211F2C244EF9CF
7332EBE12912B39338A6BD32CEDD4E8A51C229D3091690AD4425D2D64528280D
0A829D6889E75E678ED39991543E378F7CBBFA3387FE25CFEF435292714A8F49
1E2E305253E1B4B548A0EC5AA55A9FACED611429DADB394D28EA5725DEE581FA
FD1F33A85B6169D4794B1D73940FA53C84794B06B2827C2455060A8B4F2DA480
577C0B4B8717AD67DBD07968732B94C64EBB700C7A01863D4DB9B84CF4A623C6
3A895FE66E14641959655F235BD056D657540EBBB74DF4FC0A490BADC05A80BF
9BF5C44F374B8CC5376A2C3719CB2FB7C4B1311ADB97C07BA2477251EDB55851
F6908687246CB3073FA3CFF94506647E28D04659DC90B9FFF47FCC219A255616
9FE98FF9B3CFDF391B6B7198A802B68AF5A81208471F43D82DEEA1724656BB8E
2E248D6FDFED2C108DF9B0F646566E0AAE0D0D4E29BAAB740391B20163EEB322
5514A76AC74C34163D2CA4274EA0D5A8E7FA28212F91D8E6FB8B549C59237132
60B9AD469C60E18A0CD50C7E937BF66AB171B95B619C8DE2A19308E83F0FA487
B7233DC677AD402B32E799CA8E90DBA2DD7079F8F2368FD8D8279CD98C44DB68
35A2776DBD342E796FF285F008E8815DC181F7BCB30C2774517329893133DBEA
5CD1A744BFD64E7C8D738038679400A9C0D752C1B0F86BDE60D7C04D7C218132
B4D3680646B6A322D4E4B9F225EEF68B82816888826930854328C4E599366BAA
2EB284777A24DD129026E160A6453D3FA06D449303B1C24D5916E2A6F58558CA
274E9D40717E9761D69201F8BC3012053AF9EBC8C8A36F19DB4EDEF9E5EE3D7C
3A9742F8C5D2AF2FF88BE40D53E49DD66D39AFE84A5A873CA0A32864F262D4F6
4C91525C1DC02842F57BA97E009D6F40978896B8F7A0B472D1F9FFC68F7DDBF9
5C0C1472F6404B1AA6039BCA9DCF908AB3F675F82722F9A88B8D9AC87926FEC3
0C117BF05BAA1979E9962DBFC96A6B7DB7CA7FDBDE345D300A475AA9F5F74639
9917534D94483A58F043DB0235C7B7C1D182C9CFF6BF212142E5DC4AB2B15EAC
2CE1E3192849C4397A469C12B20727A4CA38A6CAC4F380B011B6C12327592F8B
086ACDB860B1B84DB9BCFED93A9D22D14C37AA9EACFF7CC81EF9860D5DA595CB
B65598F8F36DB986C6C618AA75E527C04ED4016B8B560B98DD4856627B9A8F49
219B38AAAE5471FD6A61176FA7E90671ED2BC4F1E12B16DA8FA645F56CF2C11B
51CC927EE175432DF3C803F934690D1EFCBEB637D31498283FDCD7C24466E541
0DD289DF78C335D2BE90B5C581D7AE6D68280AEA38F840066456C470C3226274
D60C73A8FDBEE47A05F1DEF0CCA48FAB214208284A8F508D04F2A3C641074D80
826B2C67C6975649BF090C1BB477C45FC01DF9C007E686DD952F6F82E1E4CA12
B1A794168CD5A49E8C6792D3B1BA80063E3556AD68D0B2AE350504DE8940E472
8D195114A9B35634AC999453690C2945D128FE4F7763160F3F2AF7CD40352982
F402E135F41F3D4DFD372BBCC25FED541C36130671C924761C3BAF25E1DEAA52
05CB504793522591E005AE22F2902A11B8BDB894A877F1005C5B8BBDDB702DCA
151C8064D9033EA065C6281A5041DC0191890203800FA9CFD36EB47CE4A1E973
F0CCC8484B378AD48CDFB645FF9DCE1B9456A8F32CF8CCFEB0B5E24F51F3B7FC
5C87B2FA8CD5B651B7295552436E3C6FD56EDDB76DC502CBE81F9D33C17E0756
D67978B6C2897F69823BAC1B0B67C888528EDA585C83533AE099DAE9C138DDD7
3ECA92B70D58AEA8BAD797B3D3E623E356C1A83904F00C6F8129E347C6489FD4
FC798ADCBE7579F910B174AF933326ABB47935AC900487A22739B7380B4F66C9
F9C1A3BAC53475B5A70CA1B83D37D270DC5A0F633FA842B9DF64946EA241FAF1
EDF50092203A64BD5B8772DEADA57C5C246A92A4664E6FBBB8EC383492569E68
332769DD43B3A7B5995984F847014BB62670C962D5755373CCF3C501C3D569F9
8DF2A628BC51C2DC7F62ABE8B32B8660D2759970340F342E48FC8DA1BA1998B3
EA74FD3B43A178C86F9A97423815F5FA2C09BA5BFB6EB1F84E9FB2EDBFB4B885
3524F58D4E1EB98EEBEBDD605BC6D2991FD8CCC05A5F22FEFDB64E42B73A9B80
53257AE2B08EF5ADC765E59DC22D831094E3986C1F01D68B59B8D7D1ED800D98
35E6CBA7F3E2DB20C2D8530D10EFA0DE65AE6D1C2CC323880D1B2E0EA015221E
BEF61E23947CDD08A647D93504EA067D21563F33124B63BE3976B8113DE184E6
83D203AE0DA141A1BEA4E6E3E77DC0615836FFD27D21F892B9AE92E8480F5B8A
2AB1B8791285FDA690E7F50875DDF46EE841D521A3FFC26DBAC726E590FB0BEF
17F7C10D58787200C749BA0DFA1F59474A443019E16FE252C76C2147E8495CB3
C2BF2D19E7DF49AC23753D39FB2685E03CE9CB18633B63A89B4E985BE10420FA
526840EF5367946F3DF67C10B47377A99EBBC96ABCDD68CC1860B3EAEAA56496
1A7F9523E1DDB6899913DA30E866859BF0F2368F5DFD963BF8FFA5642F937706
15EFAD684EA2927843B2F5BAD762873DA1826598766B752EE4D03A6FCEC59387
A057AA11C9B137D6546F30DD208282ADF04ED5C2264211DAD907074BE3AB545A
035B0D41B177BFFBD9B94C2C008FF74A20138BEB2D0EB3F0ED7B73DAA4D5026B
7DC7A4E63C80D648918F1CEAD091AED01BE45C36BC39D9C773F95AFB0C215B9E
38FE2C3499F333C02C1BCB7046DAC7FFBE3AD517E8C75202454904DCBB1C1FF1
2E5BFED5253156E3A76B45CE9384437D0E02532671082D805DB8A97697501B6A
40A3AE9BD67E68F5366491D1BB097D8FF4A71966D42DD988F48E61671A5D69B3
A9B39695AC4C95D2B8073B0700F3CF532BA92F1036043824B686988EEF3E3FE1
9460C85EA5E5F4522AA52EFF3D6DBAB167D3D5F8C9E32673F7190954563987DA
D29CEA4A4A57E1FDA4437978818B4C8EB835CD5701D9477A7DAC80AF7C824491
7DA635EEFA010F66C717BE682F55D46314BE428EAF295655A9E39C505CCE666C
A0F6F9D726CB2CD81B49A9F47C12FF76284D3B0500B1684BB471CD800A378306
459C022F4127F2E2207148F49E1B5E8D34EB46F04E8ABC5F4D367639B4216AC0
3CD0EA808A251E388C77C8B304AA01866255C1E881ED7733CA552AB2211E6DBA
D7D7931CE6C467F9CB65F0353F453891F4A5DEB67199934371EC8910E5644EAD
188548747F25D576445C5771F654CF59FB94240B438B67BDBE9B34CFED328F39
25D3721996296E34BAE5B247D73E2F7A4552A03DDF0BBEAA28E83B5C94175DFB
9E11A2CBFDA0C9FCC9DA54ACCFEDFF8348445629F196BF168360C23A6227E1D0
3B98C42383BF31B68F6A6309C9BC0123D3A9E9B5A02A09751D51CE19FDB55A11
282FEEFFF3E327F9AB9D5F77E601BED695A5684A1B63876F4735431C1E85767C
F909DC1249B2200374537635289B228121B25771139A757CA11233A368C66616
8D45B8D27B5956598CACFABE7529167111B5E309EBADB7CEE9BCCA216C19DB25
93487C2944D35418E9E9DAC3479D3309DE69137DFA8D0B83A62A0D2D3A7BB065
9B58E3E4F021F638EAE514C3566DC51D99516B2F8353F69FFFB5D736F85D789A
A617F75A541D57004DD0410AF49106890688CB5BC413766E982B8E51F67A14B5
B2C6F84E9503B6429B70C9A67A0D40D534E795EF9019F887473996793F6FC92D
A11F5BD55D6EB6A63CBA788D18B0976D0581EAAAEB4173E3C0C904F40E523624
57EA58E510BAAB41A1A7F349E230189FC7AF7585D1B5855E4A02B8CF0CE31B93
F38B2FABA16DEEDE2E732DFA6BDFB4C1D0D83185542DA621850138F1FE6E983C
B566D63D97119CB34E5B87902E04E1970D716609D033D80A82CC481EAD70AADE
0E2676CAC466EEB40EC77D964CF167FB16E49BBF7BCAEE19FD0C6CB95557A8D2
E421E2A0CCEB2AFA2FDD93834089E0C8B29ED3F4D777D61D73663F18B1AF20B1
0BF8CF003A6A09AA0AAB67589B48C84DE86FCDDD4D184B193736C5764EB8CECA
4DF0B09DB190C7FEB04E13FC963C0478D72B621C8A9B8BD15445C0D8E2DDCD90
67EDA333D8394D3C4E935A70234852938403FAA5AD122CB4A90F479AEB32B0CD
3B2747E94188A4298D6A7ECA57A9254FE680E5344B935B99D945A72A0D9F6031
3880362B868DE5F556B5B7EB7424D37F507FF94133927748C386DF1C1EA2F61D
C34451CA52DB45A2E8BB824F2E0310C59E864A74877AB5257E461626B5EC47DD
E14A666942B10E15F853CC86DAC0A1FB859F2B46DF97AE05915E791F1CE84915
4C53C446D45D1BBC6051A1F0E5EFEAA8C7D2D8DEE7AF696EF5BF16834CA55DC5
4B2B25B0996C2C590BBDDE3789C01AB80CF71C5F5FE5DA048E15F885C0A3B24E
090B54A955B3E490153C95555805F13A46336CD2171FFC355965BDD3ACE7C6D7
4E85AFF56B0F9630FF48D6569DC5C166ADC35207F27174A5303B534F3BBA4DD0
9492576A8AE7707A6D3A333761183D0C720073C05A2F6D7CE4EF45440716F141
65B5D6586C5DD7E211AD8685DC7F06D4C04ED9C6FF05F3683D235A0CFF213560
9BE8E89D1210716035D7FC8AF47B945A369294E30730C5AC0FE18757EB205AEC
912849F5ECD4DEEB154FAD70DA94BD3F6D96ED689EC26A937BF3CF980657CCE5
506A7AC923DC5E300B27F32614AF30A52AA3E631B7417F217B0BE86CEC32409D
8B66D63D4EBF29885A69D8D51B47E08C814B5A0C25055F21BC9D445FC32005C6
BE4758530F02C10DAA800CFA6818CC0E88FFC83E4168467A22AE09E5C7F478AD
CEDDDBC2F581DDED690D96080BC8A4AB8CFFE1809DF7903F6844B3303FD68C93
3A2A880F5163D1BBF55D50FEF0A022000C064C538F6BD473E34EF116BDA16A87
64526105E28B4990608B75D86D9F7C1E986C2DDA71CBF33FACEE675D72E23E3D
0CB6910A4072C474AAE956C8FE085053AC0D23C0BB98816531D1983A33A1BE73
94B42FD72BF46E444E228B837FDE0271B310BDB076E1E5D2187136E1E88C735D
D80FE8A7B6C80DFEDBA2A03212B688B37BAF7CA8F64FF98FCE5630E66BEBC837
25BFE348426805353EB08CBADD4324A5E869EDFED7666402545B9F610C308769
B86F1FDA02B22AF2A316937A37662E5A9F62E131E8C560FD4A515995310546AF
ED54748BAF73E59E91D2B4E32F8791B01E61A2DD28EDA14B5FF1EDCABA255741
58A8F84E034BC1140809BEDC6CA9CB85354476F3534D7B91B88CCE34026878E5
B1194E012C1DAEBDBEA79317E582ACC2042325A2CDFDC1DEF6D30E5A58D65A8E
6DFD583B59FE89533D4C2E65C7CD5562F3FDE7DBAC99DC13BA691947EDEC9643
7250C43D32222BA390DB627D9C246F4F7355443775A76C52EC37CB7FE36EEF28
B997BE41947BAC175101ADFDDA5711CF4DDD77C9561F3682A81CCF909592B235
119311B9888D0BE96AC4BFD340BCABB8EE5F79C30B2A89794FD537D7AC87A594
FF69F8EF94295928DBDF35181C68B2BBBBFF91738A9FCBFE2EEDCFB12B2A9336
E1E2418FFF1B4429A564AB857F1E23337C75E72C8E1560A14440DB21AAA7719E
DCFFA927B9976CC89743DDD0E75678E57DE1F7E7F31F709A4B71156AE7ADDC16
9E86B57B67071A8CFBB6CAC323167D9D96DBE2AB54280A76B09E123754F77525
07DE77C8B35CA1A3F7D176D9F7EFE3CEA40FD502ACBB139DABD34575DD1D9776
5E4F6C5753E2B8064E1DB19FF9809B3218CFB4EC471D3DF890B0E83E4BBABA6B
5866E245E496357193569516DA8B0C689793C85487C0571E75403D111C5EFE83
AB5351D0DF7C6072F77720ACE22C9983B434CD778C286374763B8E779D0F7855
EEC149F95C853E0ABA4975049E84F390AA4FD95546DB11FA32359BBBA7F8046B
52CB4BE2C7A5C5480F81DF32984302EB1804481D62AE03D5548714801BB11689
0407B39D34B68BB61B00B146D2E8F794C151C4CB8DD60FD6FAD3C8ABCD673A03
A694FA7709C320C3E921B83BF619817A00CFE9FC5B0A0FDF982B147D22960EAC
DF62AC15B5B4B0C5D6D1D0BDBC1A0A79148DC1141640C893D942C145C2204CFC
D6A5C69FEFC25B60E41731DB30CDC57983FAFC88F684E6A2C237143FF92C2641
4DF351F4D8FC4782D9F7D8B8807B5AD4103C9AFF6CAC158D7332E2A02DE729DF
56CCC594B5AF193DDCA689F085FDE6DA899EDC907556CB0EB4C766A2D241AD2F
9E6ACA21A121D2D3EA73BAB53FFD35C67AC9C3B91DF9A4D4CEDBA7676C7BDFE2
3406C55DD3FA8E6BD89DB7995369FD069CF3315CDAC8483406A1AC1DF7018897
7249C80C50B45856B0FC7626D42E7B65AC7ADC46008D953CD807DCA5D175E39E
DBB8852D862D7D7AEA53A9EDE1682E00DCA9FD4BE5ED75D83C8174AB99A32FB1
ADEB641E1652E46F2BA86B74865A45D3C82058957883B5D74BFF42EA506A2539
4D4D0A8F215E6A0DADD9075E4D95B3F43EC52F0C685156270A536E5DC0236DA2
4612993121152E7855CDE11C0E801D5099765AE51E69F5A96C3FD32EB202C0FC
411AF90632E54F8CCA66519CBD3A8507938756932FE2F8F66E8C07CC430D70EB
815B198890C950FF79008DC35A23E9F871159B2F3CDA9654D2FCFCA727506D01
4B79AF0FD88887EB7830EBB7FB142EE14E7C12BD59A3CC2BA3CD34EC6F25EBED
E4E7172DF87627CBA95D01077701D45908186740C9412068CEBAB515DF56E83B
52503354E551CC04883568743F501BB40ADB8DEC07D5975E1E8ADC8E01E4559A
9C3DD8F6F3795F08AB34397B53263DCEE0F562A8FE056259BFC7302C7B37A245
44943A92021265886CAA5F0136DEBDD9D4265B8B8BF3A39487DD78FE5D663FAE
8008AFEB27205E88D8256DC4F273989F5DA61865DFDE675D073F415271514ACF
A19D2B9D2E2B86D1ED60D7967278469F8151750EBC9BF2355EF3F59E749A07AF
E277481B78B1DAFE794126057DBD2C462F610BCBA09589514739523752C27645
31F3545D0A6C52661FDE220B9D12A4FB00F763274628831334E1E727FEE91E0E
04B5D4D40F80BCE763C27BB9B68F8E8367991AADA6F94A21C9BC9BA5D0107429
B5953FB1BE0128C6BD43A4A17901A44E7A65D278EFE0C676826DBFC268474EA8
5D08BE8321430B4EB6B72238B57AAB07DDEECA4ACA5AB037D6A16B7EABC23C59
43095BF1E82A90ED9258885A523B440806E12982F5D6814AB81011538DD052B2
D4C7AE81EA919D0D096D862AB1F528ADC04010B860F00BC0DEC3CA674D6810D5
9EC974EAF5160D6800FA73D978E6797EEC3C2D7229929156E236281198EBFF3F
DB304CBDEEF4A55C30B639A49CB552C5181DE9034E422D8DB0E26A946B4A568F
4FD0F1678F122519B76F5EDF7F8AF46EA687ED1A4DED7E9C7841090D30FB7725
555E470BEA449EDA32C063DACAD44429FF264F9733C71AC03BAD8ADA10EE0CE4
C5D5F0585FEBB9C94698AA30C1C6A97CBEE249E866B40F704EB52CD36DF0B255
0C18E501A9588EFC7CBFB86718C5FCFC0E51C71BC12C3208B9FF934A1DF3070C
16D6E08A6F32F46760949B7B5EE9B80D37D0EBD157481C66507725A1978BD28A
9D37D1EB182F0772719B6F398DB7B747DB49C94BDC7AC4D4B4C56E14EFF907A4
12323CC89CF705853B6FF015C18644942E93B1C51E20F7B23D8A22E7E605397E
C100F79EEE03CF3D9FA900F836ED755E2513F956827582B5A9A7E4AE474B2BCD
B5FCA42BF8D919B5C06BD78829BFB0D977506958E27C278B680ACC092F0FF928
D07A47F82CD19134494FB44D662AA9A2C60B238F2DBD2B08F10B57CA144C06E6
02E9822DE2DAD048D53992E7B63ED2B5F2530213D9700802797A4611B53EF604
E3F18A312C5DFF02908D80E35F53C24078B3E107B78EA453C735542644EA3306
FF52E6CDC1A0ED8C40E93387D60AD2C57950899E634D204845D54D88904AD23D
3FFBF1AFBF1164062F545BE743C0CA6CF4EB93729D362EF1C610E85FBBFC6151
D81BE22628D088379F558C23B2C29ED75354427E16368E1BF9255CDFA6B9912B
2BC39C571BD450577D67587A09B607B8ED022FED68325E310430B51618A8A46F
962F1A85D04B75D207F2CDD4BF9060828DFF06E524F3B399841DED2C36F9BD22
3298B33EFF251BE6650783B395005C3E3646244B0949C0134240BD2D13D6B637
68718398CE840C1F2D97BA5A1CE70DA9EDB28024324D1C93D37A135783DB2AA4
FBF8911F31464448C0709C1710DA050C922414669E32B814F435FE14F2CBB589
22F0503241CE88F7E280B79C9F27486A6277A32F6D5D10F8D4EB8147315E5BD5
FBE88965BFC7A1CFE8F85CCDCD23E9182604CB5D0752DD37CDA63721EFEB2312
1A088ED33D3C48632CACC65EE792DC2CB972ECFAAADAFEE78E1D8D2B9E94AF57
AE0A20570D8A5A9D65F5C97BA8936194BEB61340EF3F8AD3E1BBEC945A0E09C7
9F2AE5A178E37F4FFE0300932030C47C0FDA8B8A138EE3B234AFF7BB6CE48E4D
28DF25A018A6851E9E62716273C4781B457EDB416C9FD86A60C9473B5375AE97
322028DEF45218C64D2BDF47696EF885121E26ACF0886E09A82DDDAD041B4CE7
44B4D63CB255397E927D94E4B041471E761AB710538F6C354F40B7EC09797C46
0577FBC125917DA748CEC6BF77FB3AC9A5D60FCF6CEF24A7404F7BD42FCF81EE
DB2DDC2F566A681E3ADEBE7FDE983CAF4351425504BC2F5B00410996030C42BC
B6B3F9537C90128E80BE0BE927F5DCAA3AFC3F9AC49A65428B6C612A68AF3235
552A795A35F5B81ABA5E1D0B046F31B977F57EEB4B3176C53E28CE2D349ED433
E7687E625157CBF62BA50CF46530F97641332BD7C2CDDBCD8E12243E6BDC0C6B
CFEE788A6433A3E2E6C1FFAF5AD1CCDE865C2D8A3FEAD2ACCFC9F172076AA916
EF44A4C71319460531EF06C3D620E42B145626CDD287909F4E902B17E59092A3
376F58135BCFA5DE0696385BB0FFB6345B7C0C724E7899EA21255A08232EFBD5
5535FDCA4956CEC853B2744592582C29C6D43663530E54B8FDE4CADC47CBF48A
0D5EE404B577E83C450DE3165AE6B23EB42F36A00E2B0EF6CD126B318FAC1B33
B1B332CD7B791821EB650E5ED0661E802902C89B32FE067DF35FA845BBC3FD41
3A37773C1527BF38D6B1F63256D5372F6AA8E597A371890B36BD310D1A184C08
4913958D22575E85FE8586D4A2227B717D3E2A53E09A4EFE530A666EE9AE02A6
39816FEB195E5FB218CCB914449B44FB92C6E63D1A5D31DA7B47189AFD58B3DB
618F788D9A77FD6B341C76A2CC04F7C7F0879E6FAA3630D313E6B7BE70C02F2A
D42F88358A528D56A6FBE9F3002E56EA59E9C2459EEA57B83F8F23AA05505670
EBC3A55E5E44DF8F5E3971566181CF58BD803A85342A87AD49F6A5CC01141D75
2343D1AF6B6C4FE4FF8D2628713E0D49D6135CED3D099859A7CA907881DA2CA0
B7AD5352E7E2C579B99D5D8A72CF8AD4EACDA18A0B143E4FA73CFC331B340F44
440F50D925361356F972CC48FC04FFCA73D7CC2395808CCEFFA07947CC3BAFCF
72C78AD7E77153A0571B4FA93713FE54DF3719C4FC4247DFAA802CBA10E78FFA
5A91E9AE289225410D9DCC9FCD627C9341EE5EE7B62160EDBB03404266DB71B2
3B0A9CF1F1FB873365EA1FCACDD36E4027E22BF30706C80B42BB37178508EB5E
B02F088194A06AAE9331C14E263C15078FCB6FF651F45CC360CED92DAEA2FB9D
B4D49F3FC041809ACDA455C62A76B51D730A64E9AC2EF0E723414FDFFA2F98F9
2AD5419695DCB32F34DEA46536EA67FFF92B4BAD5F8D20AF9AE73DA2EBF101D5
A60D34799EB0CBF974F84DA510FC82C8DA6CA3CD20A7577BAF69930568678505
ABE8B068AA1AF3A022D2DA6F430395489A5ED95EB8E3E305DB3F493C27EFAED3
C63FA3AE935126E72E876B043B371F75F8E4BC40BA7BC39BDEA9DCAB0FEB03A1
C547FCB7263E83FF650B12ED84C761DD1D4EACE3C85DD061FE42C18B1356C925
FDC554AF5491360750649B22063B127E22D31D8E81F0A8DF13BF807AE7970719
A99C66B5E181C1A9DC3689963C3C5300BE119913DD30FA9B2E8100B05353501D
4030D85A5D40BA6A6869B07E8E4CDA380CD1305B6224EA5D4568AB2B1DCB59FA
342A2BEF7518AB4AA9AD3CE8818625D954B3EA7634856DF64281C9CE0D5D4817
B34C9D419A770F1B882B73248DBEFBE0E0F51C49B16022E06A761A65CBE72813
003B36F513A7966016246CE2FBB04C34D5062BEFC9041CB8AE33E9C8D193CEF9
4FC02C79B3E9EAA8EA4A028DF1E2065090894BC8200DEF93B057C7F66A86F5DD
59DB33A4A8A1BE6742EB71BC09CF1FCC9E7E83A50AE7B34886AF235C0907269F
D2CA5D87CDA57D2501D1D9EE52A0D32733B6EA08A261F936EDE7E4745E67F5E8
9A6E63CDF1366491D1BB097D8F74C4030AEAE6336D60E6C99AAB79C1B5B106EF
0E3CA46C275582A8CAC96969C35BE052A9712F8460AC960767268A90E102E8CE
F5829FD701870AD4C75D5372645969946C7CBC5EE977F6AB3699B56A60D19EFE
D7D65A1C31E1EF31347807DFAEB7D1FE2901AD5E7B28EA43908E42EC58B17BF3
510521588C8BB16860D0BAABB431696CC3266096682A66E04BBDAC1D41C639AF
02693C47AC404ED625056509BC9BDE9DEE1E8951142A28319378A51209F574A8
D39B97395B46C494BC0F5C1F111B48BE82B67AC7FCC9878D2F97D0E3E98DD466
CCB4EEC3E1642A87AB7755F81B3E69FE843FEEF0899DD0F8C2F957399D351200
8C71804A8D2F25B580BFAB9F2D969CECE3555E3E6EBCD1396F58C6EC0922F248
B945E1C6E29156E04737F826C6E56BA3356F66D123C08884E9D27DC1FFFC23DD
692E992D53EE1580B823AFCFEC40B59C0ACF7EB803CFCE38B12E61B71E6D7E5E
1B83C6F530907D881A998056A61694A576A29FA99B5FB728AC5FF2ADE5F7F1B0
AB81977C78DF2BDD7E95B54355A1077633F9A8CD7FA66B9F5762E3D023D32100
73DCDA48AD9F5C3F850B6EE405BD3FBCFE41B5900ECEE7FEDD7AF1AD89A2C4DD
21BBB1436DBCD4D5F1B81AE0B9BD7AE7696D31B3ED5FAA6F7B42601ECB00305B
894723028E0529C6B747E58310BBA39C60AA36D82E71133EC8B444B7E7DC4801
7132AE6CD28293E98E6D538B2F90D0808FBEEB77AFE9274CC14073847B948BD0
EF50FC3859C0CCD704BF425C64379E8F07D1B217E27E4306238F06F910C43CFB
7809656D574C1887F48130FA9FEB325D9B4567CE2EFECCADDC8A013BEBF5867D
78B2E8AF3DB3E40BE9E22D7346A518C7B6B747685242B4805D48E87054CE92ED
AD3E4E503B07EC3DF25244092D87CDE8DB8724D14D4DA223CDD16E6515EF0693
6511E798AFD69717A52C2A3DAB5BD24A94FD83A99CED369BBA899363372DDBEE
44AA952C2C63A8F527E398BB7D8C21B18DCADDC108F28872C2ECC0FFCCD14958
504653E2E658439B21C8FFE9378D415DBBD5A55FDF5F34ADB361A9DF77FB6251
F2178C0113BC7EBC97EE5673F4A9B6CCB64E160E29374ECA8E985FEC263E6C90
BC56E0DEC1E95CC07CD313A25F3A7EDF8C39BD85775BDFAD10476A6202DE9AA1
188161B781699A789DF7D532A0DE89C93E762C7BB2FDBE84F5B0D50BD6AFFE8A
76B2AA6C0A8B0DFD117C7262AA080F4E873EEBB8622B9ED302ED3E4D3264F0FF
9E138D51B87F3E5EFA1D0DE1BCAEF75C34B1C0A04A31B244147EA1144A970FD8
B12EDD4ACF4A6774795735CB0EF177EC0C2D3AAD49BD2A0BF511A722FDCCD197
92EE9BA2B1D94596650639A3839F7D033BD7CED36CC513A8A1AE22778230E2D5
EB6497E5FFC3F42F921D984E70A07B2925CD49A174049A2B5B3951927354864F
A399233D6CF5E6C128A31DBF93F0566A59DF25AD24664C9A2A7364618562DABD
7DB8E7F480D0521581902848649E23699A918FA6C536D97CA3805B6AF48C7C20
E49586F84059141860C239FD3649D4356058F46C35C1FDAFA7C2DF4669BBBE7F
59D359C188F8D6F5D6D67FFAA12B256FA7D81ADEFC852D2E598734CDCCCFD8C0
5DDC3040E38A64E0AB315D335B1A481FE3DB344A5F50DA95EF3F0F9653B91939
0E4B63696553E3B2843AC6516F43E6C280FC2CDF081776D00F1B54515F06E68C
5A445AE324B07646FF12E69FB6EBFB330495BA033E0179705CC4DEC8E56134D5
16ECDC1C8C7CDC25785E00AFB92E91348DED81EA64F45DFB91070588BC6A77B5
8B735C1F44C5DF7CC1F8FC60222DD0D159923519E3E7D441978E38D6C93D7639
98E988F4E0E7C56C93EAFB9C7745EE9FA75E2D69B1B8BB46BA0B2A96E810DECF
6C6DB8F03151EB9F005F956FA7DC5893341815D40B5BF0736BF1523F30B480DA
49F31CA82B278A73BCD044A7886164FFD25ED2DC848F6FC8DA7E7CD7DAC27026
3550BA374D54D4BC31F74003E1D7AE0F38F4D5A3E177398EC3818A40FF33932A
8E79B6101270D15AA6590DA4E9FFFDE23B9AFBDC82C3CF5FD4048C6E2D1B0AC6
224CFC85FA9DC019E9DD6846588E116D008528BA5FF99B1AEAAB5AC7DD22CD15
7327F8078F6809CE7B6DBDE25174B6919CC88FB05D871D43A5866F4F5E7BE573
36A0CC4F925415F9F6B65DD690FB26DD72E4D15D0E8C5B0F468202F91976A5D9
C8BDB55144FD478A39D9B043D922DD870F06852257AA441D84DB68FFA8094040
F2B528CD48CD2F8B92CAB744D01CD4CF2398A0BA2BD7E5531864C90F027CC337
67A58057CF521ACF6F28C9131A963E18B6332AB35D35E02407B10D04DEDAE5DE
9DDB141074433C98144F76B7C19EA4E5E056BF2E10843332FF7C2F9B79EF6630
9D729F86E5AC6FF14C14308F89DB3A57862DADFCB06C2F76072C0ABF5FF31AA5
8FD5822538AA7AAE2558F64752C2C28E59F7E7B856605F428997E2A731A4F0D5
ACF1C35F6938DD79049927CFA9BCA1F6164C53B7660C93CE7C9B35D08E6D3C3D
F11ED0A79F0D71E2D065D2160EB0C9274D38D73921F3A811A6C64C5B527ABF1A
A6095ADA5883534D7B8680D0D3062AF0E81ABC55AD124068F19808CBDB6FD772
0E2F4AF7DDD22F1873BDE4D1092029F3333CC0516EE29A951A0332770F1EB78C
7DC42D45C4853B13A2D88CB67CECA9A1D3498D569DE012062FAAFBC9EF112B6F
FBD4E372B3B8A2EED5BD7E9831D7D79B5A1D901CC241B070023CAC3F28171E14
A2C376D08305B03D05D7EF9E4D0FFB8310DB9AADBE366185D2E045EA479F7F02
77BC8FBB412C7282604CD7047A421A841C9B745CF02D7378466CDB231C7A8994
31DA79EF5372815FE92AA7E3D696B97D6C8D1A7E9F4CB2CE8882889987CD87C7
F57B650581E5A7AB8D40EEE7FA0C9557FEFD966D8D665D7AD4D88D93C0C8AB11
9B54176F13818AD0BCAB9E2915E8B82A5E5CE852D15B4CD271C594D11F3C327A
BA6CC1652B70E906F44D4893A7B1C851885FE029189A88E5BA2222CC9924FBB5
16676B00F7C8894D369A4741B7ED4BED366D2CE36D64EE6AA4C8D0239A29AB33
46E68E92436541040CCFE0C249EB7C66B766663913C8A0B24E1725AEF973E3F4
E5F1A14EBF827DCA38CBF9A44C7230705ED237569345F676ECF81AC3D3C4CBF9
F6CD7D34085224AF2D6CDB429757D2C24C9344CD28DA71588E5454278DD2561E
EF396F36AF158A0D81A491ABEB4018196E03F36A75482AB01D1425FF06DF3671
E2423ADC32142D7A48801C93F72BD152843B824961969AA1317F148B69D0D6EA
C709B039F529F615707BF2D2151A145089EB3046F170F3EAFC1572D2E56F2F0F
692831903D209791AD8500DAE6B1C55D5BF69E8150089C5C67725159E3C9B839
07DEDAE6BF72C1BF9124EA7ABBB7B8375CC98CC68EFED2A8BF66B823C43C75E5
EA815FBDD0F08D8DBE646486E4E0A6FC3A0C6CD24600D6CFD67F9DA4FF163F86
F1370268AB1F0E9E41C1E7B82193A0F5CF51A67110BF2838BC4C0021571B3CC5
4019500DDC798B57B6D3608B077C5A8F315DCE323BD9ACF948EA6965A64782EE
90A126D6841809D5F0B52D59E6AF662CFDA9AC18A33949615D1FEA4CE01663E3
BEC0954E1391127278913451DF8FEA6512A0AC1CC00800832AFE4B841DD77470
62821368DCAD080F5B1CCDBA678620BBBDE41CF0C04899E3D2E9CDAB6C133AC3
DB55A9E502D237B04DF5EC040F3011DEA55E45999C1624E9ED303EB0CF034D3E
A181090DE36FAB1F06080262C0D9BE2CFC49FB390CBE8D4CFF08DC9540350056
C19A1856B9B2EF42FDEE525DA402976A52E428EDD5367CC0D134374CC5FBCC1D
DEA0E7B467F98BB275494DCC86D3C62FE9E069A1725AEBCC5CB1F7AB9294325B
92D4A4D63EC9131ADB2503521B69B90ECD4FBC790F903D4CE668212EFB2D9858
6A41374E647CC5D12CDC3F15CBCACDC8543F9BC05F507FC520FA501E81031F85
FA6776BDDC433CACE72E04427C549642AF94A4BB66F40FD286D9769861DFE168
3E2CBBFD0D571E05A266E189A3F9D0EF3AD7DF43605CB4EF2DD8EC34C691E368
8E6A0EC0E65F5063436840DBA43758911A8B6A47F399E09D4ED56A73AEA5A2B1
D5C4C6A2BAEA093DB52698068476B55C10426C6B620BF1890A7406C2B88DA61D
D3FADFBC43552E075CF52E6F149345C500DD62C9121E11712C9DB2DD051A8506
6E4C8A831785480846875A62492E44D2391EBD6625AEEDB22442CCEB84061427
6496D02DA951336995D2DE6BE506F7CADABDB3E6292941A3701DE89F53C20F1D
823F2EF64DB77DDFB68E2DF853926BD79B95B45483E7C3EA372CB4B05FAB870A
D779AD3393806B86F68A2B24998E20AE7ECB82DE000B102238B66C68DA69B1C2
81E248D4D9F8809DDD97C73F3D5B7217D0F46FDC29D08D6CD71B9E1DE1C50C1C
3C87A34B7E84B46119AD70E23350C13A50F6D110323B8E210C99C8500084FD75
CB36F23C0BEA5C55AD278CA8D552FB1CE1BFEEAF8F8A91E309075446D1E6DFCB
130E3C8801B3CA031CB50E8719471BCAB0BA1876010405CD72DD2011E74B3935
67B047C6B35C478A32F50803600AF1540CF95A275BD597FF89D8414DD5C735F6
0728A919CDBE7AEB8CC7D5F920DE08713B8F3A5B7343DE5E11432BF54C80E629
F3306A5183BC623F91A30C178AD7D667D4808E9FC8F28213E5C3BDE4B4350148
2C0BE8C9059DB1F04895DF000C2F81D492A9799B23B51DBB9DCE93D5063F7D87
E6F759A29F32ADBF5D37B697E5D318ACD3D593D3E2644444F7539E67A8C054CF
8FFA68216E564EFD275B651BE40E47DAE192AB59AF4963E1B731DB687B10EEA2
F1D2F4353AD17B0329006E4AF46A83D706A73EDF714E0C8692F37CF1D7E3DEFD
43B2B428FF33075D2BD19712926E230DD02AEAE6461EDD83AC9359C95FC4E875
136FFD709A15AB5222CF808EEF614A417AF660F962F957C199FC3EEB1B2CAF8C
3E319E894B54BB8A26600C577CDF514D89222B39F7D09A121118428CE1B195E1
5353819A4300A2FA85C197D0443B9CBE917B046ABE4815E33196056BC687F886
C067FC70DE0B05B11204B40E7D89DCEE471A182A205D85B6DB655F64D923DD77
E445DFE0E7484FB30B628295F941E30A5D2EE095ED5ADD511017E77DE30E4887
C0E7B8F2A0D884F8C09A5F6325C0685B03F604B930772A4D52CF1E3480229AE0
8350AA01668CDF3DB7D7DA528D26A932BF124C2C8F4A14B7394D416B911DE781
563E26C08538E038DD8EF92434F73125ADF683F07CFCE2B470E0CC73118F4082
594C8BB26343B901F6B601D390E2DC1104F91B54A06D57CA55C175593ABE06FC
429FE06F9122E7F8EC158A3A9D45C7FF2D74A6E861B6A448F6772028532182D5
3CC7898D258CD0B38E8990EA013CFCE96533DFB4D4BFFE983EFFEE7B8E1A1CE1
0BC86DF446ECC1B69AAC2294A0AFAC8FECE3ADD8AC4B24A8DD842B31F76C3596
F43A6F2BC6316C26CD0F254CD8A11ED77D05FCB64F261AD82C48896019C9B1F9
D62740A6C1E4ACA130DD76A67920DBB346C0CFEED06CDE91DCFC11A6DABF34AC
911826F482D917A73ECD62EBE43B473FEC1F76DA6C55089AF3D95E3FDCF384BA
B090E3434034B8BF9C336D7991B97D2C102E47746CF825DB774EFD3AE4D7F6B6
95E7A7A4ED77EE1277BACA031CB50E8719471BCAB0BA1876010405CD72DC7960
CCC959A59D93608E66A61B5B69129D74C011E17C7306F088F10DE2078E17FA0A
86A5017656773E7A78C2DD0BDF076B0AEAD03AB485F43DD669E9F6D78F7F3A3F
FD6390727543507A36A01100B17076AE6C6FF5F775FDE33A0B4CAE6647582C86
E8E8FE7C4E1BCF5B686990BC6749748010888BAB47F407E883211A17C5B44960
014D7B33459D3ABB1719EFA24171D3E508B67D68BAF10B912467289F0C2133C5
43BCB734F552B860C295991CB996FF5E948BA3817DE8E54F71FAC584426F531F
4A3F9C49413A4E0E2E64636F77F4A0CEDA6815412C9200C5AA034D17A6705EC0
9DF9CF7AC51625CCF3E37034BC07111BC82037AF99B6DFA104B79CBD8B495F1F
C7DB08C50259CBE6C837D19CBE53B0896667EC7D138FD0B2102894D7FECB5B22
5ACBE62F7A7D9611F4BA35DEED31C914BE552C85978977212EF17AE578C0B403
EC90B4E3A10523D0D3A10238FAF971633F0FE9A9BEA49758594189F167F40EED
0DF7150DB40D2B141DCC1B642536036354C6BF79126C436F4C14079CD216A6C5
8ED13FE1B227A9D9173422A333C45C6436DB9C6ACBE309FEC0DDAA7351CA4257
0F44CF36440962A3FB2407FB95E96CAD3917128DE2205D27D2ED7271F16CE482
6618615E53A573C5F8987CDF2672DF6276A805DFFB0936772A5CAD2340B5912A
1A4087B40585F1CE54AC20A4B455D06075CC617F17D431D216D9C57B7B762A1F
3C555B5355D6B9D21DBA40DE2F1449E1A789FC4F376EE1B1D46E695879B1A0D9
86D709320935C85C2D1DD16D2ACFC90A1ED23A6DAF8FBF2C848E0118B599E23A
3A72F7D6E4937F145E65ABEE4F4F668465F9C2C3F6501F4BA0C82C6A9456D147
29E8002E4507A1AFD615AD0A613DDA0C4483B2AFCEE2C65525E3972E426CB8A7
5DB1D127B4AE7BCD89DF3950EDFD6CEA20D0649071442B2916EBCE5F4B5FECE5
B6A63B0039BE04F56586456A82408AC414443609A70AA5311FB05079878AD491
27A054DD75488BD6D0C00750E1C40EDD6DBD115CB6E00E3866E88FC69A121766
9CE1570BA2AB068CCE168552299361D62A2BC2C0DB7EC60FEA8683E7E4461F10
B8C0035BB079C538EE56D2E4C9F9A7B025EC8BA4590DD3553C12E67D0232F53D
C783E03212C4007EDC7452F2289FCC04727D117D86696214C739C274F28F0DB3
DB67437872653CF58EDCC6B7AB68072C206621C532DE74EC422D7CBAE78005C8
BD017B134DD4EC46F53015E5AA02000F39551CBDB104B590BEDF47F6C1806B10
B0E13E89EE8F18232821DC9FB1A3D79838629318364E5A09910970249C242B57
65DE750086910D16FD2ACC434DC5B3D7BDE64177D18907706E2EC4109E8FCBFA
4B8F65D8B9959A9855B99748A4BFCBA72B34061532308D2E4286E9DB31983877
FBC16B4E5EC481D8E9EF87B75D82D1C3166B2121ED6639F9981B91DCDA1170FE
1A13A3A4B324F05BD01D36D82EEF86CA96462CC10A9928184CB90B66780E5053
AF0610A01ADE19328DB37F9448D392FB3499BBC0AAC68B23C5040989825428B9
A87CE2959AE0A2F472BAB2F4AECD6D198EBA263056B5AEEDFDEB4DCC15FB214B
82459C026B3A1226E7BF21558D70B5529CAF6D550B6CE0190281BA4CEBF16ACF
A4FD94730CDF2F40CC5760009233FDE0B38CD4EC1D07A9F817ADBD1FADB2CF6E
32FA15B53C70BD06F06681193AF93A55066AB447387ACA9492AEB601D13C01F5
68CA8236BDEECC24E9E10E3C15A4935ED92E290D814C354B7465A948C693F554
9B1EF734B90FF8673C700BE824C2F376C73608D46452504B6C74D1B121580CE7
B4D382439AF172F4D03ED7B859085AB38822032A54D441B35C4ED46D104E5A89
28286996E8099252953888BF4BF469071963E5A576DBB19F3E748799D49C3060
7C11815686A77889F32C7D3BA4D9E714F936E27FD9D7E93BD15F47031D6AB1C3
00F291BFAA072F4BEAA2610EF0F9C5FD4CCB61CC8B279A83B37EECE68CE51197
5D6CCFDF2A522C41BCC160FB1D79C130216C2D17C277A513578A969909838CD5
19B1F938CD8854B02920BE88F84FD3A50D077FE7AE2463F40DA89824D1C5D17D
C70E1359496D41353FD1495B99CBA96ABA9147ECEF29D69BD30ECB1F063F32C6
9E40D0F63977B44DC57D2D73A7B25D906DEF079E42B7F676EBD85E5F21FA095C
1BDD305F557C1D2E69FDADB27871E711B7F00F668A0240AC9A7D179BA8F662CD
D5480E97BB4606EE953350A75AD01DA8E2D7E5343BF2214C20FF453386DE9F42
86F02E496E8B60B7A0DFA3D23431DE441E0D14ADD66C3B5C2E9F7BE3D108A600
D78A9A97D2774EF4D5FBC8032955669B0469E35063CE160CEBC4F8E80A54D110
435B8D61DFBDBE592A170BE3AE9629B0275AF422EB5476C2F259E6E8AFC57CDB
F91AFEFC1C4A2C31FA7F4F89D337209EC858B9FFC4778D62D1E7D85A98CD8D71
BA01CA74D342A75088082B65BE802CEB52B1DF86A32A0946A3BD1E8ED4B742EA
90548BB0833E98F45B76D98F7F115A67578C90CE30A316B28A29E808668DF5AB
B0728C7DDE3A5E9F665AF8A5A7AF72B4058172DED8AB858A3708405E2A42E5C4
7B6FB437464409215DEEF49B959AE6CB67471140028BDB77F8E36952ADF512EF
4559B770873C6CBF0A66D8989A6B0111B3B73C53BA5C3565C2240486DA75E4C9
49DE048D1CEC250628C19BBDACAB70E1FF207560FABBC42680DA469687C0BF8D
8BC323DAAE9B274EE5B7EC24A018DBFC1FCA623E0055EBA91893597A866F289B
75B6C623DDC0E219E65E06F008EC7289246D873BD543684D927C597918FDF4C0
C2E9F820D2B1C9B1598BAEF7CE0226917D674ED1980755C8D1AA1493A3CB5616
52422325472D4C4DAA66D84194903E95BB43D0EC2CAE0C0EA17574DE3DB12BE2
44E210E2BA4E584D121D7BEAB06747625E216F8AF60EE132FECF7639ED7BFF0F
B7A57BCCAD899A3107F56611D41953D3FFBD1A8EFA284D827690BF7B6E45B4F8
674A6FA270F14B4944F2759F238CFB0D10ED1517489C3ED9E8A3E46D69E5D786
25C1D365C84D914A718710D358014F05D7703139CB391F45594859D2A47248BA
AA2A6D4330094BC0F348A0C85037E45FB05B53E1B9BDC776BFBE74BBC7DD92D9
41DD69F800C71449E90BD6EA65B8E7DDBC69A7F7EE56670751ED0711E50E0EF6
EFD917EE28E980A062580B9FA11EC6401AC7448C1719C88FE99BCB73F7DEA427
FBFCDF4F092ABCAB092BC46D3D72DBF4A0960790485372B219651D6131D46E2F
5AA2BC7C534357A65C25929B54898BA9BA86508A543C549693D3DDDBF8B9E8ED
BE199B899A6C6112AFFE7C406DC55C0F4705EBE271BDCBEBBFD886BCFF65691E
1008B05E8F31B235ACA40C12BDD72980787CC7A118B735C050E3F02A9636E89E
F795734A43944A722C8E9D30DE5AEA07A6EC2C658547487FC2B68443083700FD
8720C3B24A9AED4951270EAD8B3FB7FFFAD84AB0C607FCEFB793A917B3B60427
1FB764FAB871F7AA5A5FC5F1F09BE8D2214231D8149BF18154B2258D551E75C9
AA76E216B7F259D4D3D6D1F0B06737D3F368BFF332A75E7640920166606FA10C
B83E2B3AAE03D9BA8301AA84D280E8C079081797A9C0717CF7BF9BF842BFF6F4
AA214FCD0032C147716CA5CAC05D4506ABF94C6914A674BE906CCCD9EDB93D12
1B912F50AB9ED5D4D7857FA703F2889DACE5F1199B3D73FA940D5283A76BF2C4
4C86E2EFFE7BB9C552D929AB5E98A4B4085F9A0EB7EA8F1A89E064A5B1EA1BE2
2629A6B656367716330544611DA31760F885FF513A68F605EE15EFE9A1F11325
2B3D74888B64534F499545704B75DA313653BCD0673D7D6C5357D1A48FD726D2
4ED63CEEB367F9F8A115EEF9C829869BD98DD78BBE409438C2D541657DC3F1EB
42EB08A87A0AF43A08124C107C2C1B2EEE1A2F390859EA000EC86D72F84EDE5B
E71499F6C9D2DD45EE388793355FD02B45B995C5DC2C329C3F37C93097905683
D42690EC170457BAC3C614B8199852C68195F55AE354733DECC38B3E437800AF
1682D9B5B00903C707372135B875DF11219E85C1F90A3A1878D6B8002A76DF80
3FD691EC4AEDE5E4204C3B3753E0199531AE26EF145184BFF70CE0AF7245BB49
2CBD7B5CD4878A0E0AB280F71DAE9C122D785E9F14F83CA1643626577FF1DBED
F0C8556168DEB103FF247068EF9B36570102584EBE73D860519394F9693203B1
AFF159A613AB88B8644EA34E643A4816693F0404C0316BE32A0BA920BE9F470C
5E35007BB44AD05FF8AAB18E275EB0CF680A4B9FD4D1978603B6377DB9D6A364
0151343D5EF22A64D5A98ABDADE1C8034D35DA1B2C6DF3BB97B1BDCC6E03558A
812E2538A35D3B769A1A1DBD41DB89C4959F4D01CE774A89D5251EA3EF9E9DCC
0D664606A1EBB1F7B0164FAF03ACCD3A262F9FD40B8C9CF768438644E88B7924
0AD1BF2DFA6E50F10F482046D12D08305285403FD525376DEB06EC5D6BB8B67B
1C9A8164B538651A6C8174E4DE75AACAC47BE24900C327E20248F7FCB9F161D5
739C5EFD1B2422FABC7CCF01377AD5FB8362CDFF9A4E4270932A4243919E53BC
21C88A8E8AD821DB8F17D0D7ADBF7A203401141DED2F5DD9C60114245AF5111C
AF4513620B7B6E9B6E4DFF4FB442E90EF6CC3AC286B0DAF8C1EDEF0FD3F2509D
262204D6D23A7EBC359A70D3E74C8B5D3E3CBBD825A48174DF2EE868D1C3689E
2BC573C25C2F06AD062ABEF507572BD64BA174EBD9B1F8595868189C4817054F
1960377D67BD1EEAF12307A5BF54448AE27C22515F25EEDE876B08F74719230A
241A5A759B8849967AD1796756AA64116E0D6EBC97E384C08AC760007A333E41
083B9A39909904C527858A2EDFA7010D2A6A69A06BB082C842C25C07A162A003
A46B76F7422253320AE331A267545CD2945BC9C00C9ACFAA61137CDB856C9BFE
C148B574B8A1E9D0886452B334981CD374B66E291C0961D5EC681D5352CFD484
B07D7331B951AB7D2F6B238F7F92F11C205C740C1EDAE1539517A611C2B005EA
68048BB4F0EBB7ECECA410049A5E7DA24DABE08BEA52E07C5F43EB338ABCF054
E14C3FD090551F0766C7E13D25C0A4279357DBEB2514EDF9EF9CFDEF1B39E3A2
8A26C51CB86DC0CFBE04E1C665B3FEC2C115808DD18E91478D8369D24931C9E3
82E25586679208513DCBB1B074B83D6D7ED5F92EFD456986F268ADBEE6FADFAA
15511AB9368A761303B6A4D2C85AD55D5547F834136FA3C4E2371C56D8634F8C
B0865EEFB739FE10E65267EAB0FCBD5524E98420B58C918E4A7D92FE8941390A
A634D124EC9F33B0CC08616BA73C4B4295EC426F103267637CD744042B565746
C2BE5BB780DB654CEED08FDFB390FBF3D9D7201DB311CD19F3823F1E79351341
707547865A4B625378FD636E71C2305FE1F2DA280ECA17C8DB813F5A334A536B
6878D67A2AE130A10AF45384D2F5C1939F54DB426476FD3B1655EC2B934AD1E8
A74B72E2B3E329FE24DD5E66E7A0DEB874CDB1570795164B3F60BE3236A9E87D
96190BF46EEB1AEA246575DFB57B01CFF2BCA40101AD2B61C7AA8A247A2AFA0B
249BA50EA013257C2F4D5D8C11BEACC5DCE3CE03FF4F1F3F0FE5D021110C6FA7
65425F272C6D7875CB058EA61F649BCFD9A8650A7CA97B81C5753844AB53C733
0B7963BCF380C4F11535E5A46E2780855EF8E7B733CE59128391EF1E90C6E37E
64B906904EA3ECAB874AE17745B297082BDDD0D6F8FCD6F861FE71AB0E976C39
D41396C4357DA1900FE969521447D49F8BD4E6F598FA5C19A52D063914B0634E
237AFF5A80C3BB4CF717D37A57
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600
(Guia de trabajos practicos - Parte 2.dvi)
@start /Fa 100[154 155[{ enclmts1 ReEncodeFont }1 143.462
/LMRoman12-Bold rf /Fb 69[41 49[76 136[{ enclmts1 ReEncodeFont }2
99.6264 /LMRoman12-Regular rf /Fc 100[107 155[{ enclmts1 ReEncodeFont }
1 99.6264 /LMRoman12-Bold rf /Fd 12[56 5[31 11[54 104[59
2[62 44 44 46 59 62 56 62 93 31 1[34 31 1[56 34 51 62
50 62 54 14[84 1[77 3[67 2[42 3[74 3[85 7[56 56 56 56
56 56 56 56 56 56 19[62 28[{ enclmec ReEncodeFont }40
99.6264 /LMRoman12-Bold rf /Fe 139[63 64 66 2[81 90 3[49
45 3[74 1[72 29[106 1[117 9[81 81 81 81 81 81 81 81 81
81 48[{ enclmec ReEncodeFont }21 143.462 /LMRoman12-Bold
rf /Ff 5[54 6[49 1[54 3[27 3[43 7[49 102[43 51 51 1[51
54 38 38 38 51 54 49 54 81 27 51 30 27 54 49 30 43 54
43 54 49 11[73 70 54 72 1[66 76 73 1[61 1[50 35 73 77
1[66 75 70 69 73 3[76 1[27 27 49 49 49 49 49 49 49 49
49 49 1[27 33 27 76 1[38 38 2[81 49 7[54 10[46 46 16[{
 enclmec ReEncodeFont }72 99.6264 /LMRoman12-Regular
rf /Fg 133[52 62 3[65 2[46 2[59 65 98 3[33 7[59 14[86
3[88 3[60 16[59 6[59 59 59 3[33 44[{ enclmec ReEncodeFont }17
119.552 /LMRoman12-Regular rf /Fh 69[66 186[{ enclmts1 ReEncodeFont }1
172.188 /LMRoman17-Regular rf /Fi 140[62 3[79 88 4[43
3[70 1[70 14[115 1[117 1[108 124 119 3[81 56 4[122 115
113 119 14[79 8[61 61 40[{ enclmec ReEncodeFont }20 172.188
/LMRoman17-Regular rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-128 109 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -128 109 a -128 109 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -128 109 a -128 109
a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -128 109 a -128 109 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -128 109 a 0 TeXcolorgray 0 TeXcolorgray
1027 611 a Fi(TRABAJO)53 b(PRA)l(CTICO)1722 818 y(N)p
Fh(\272)g Fi(2)1531 1026 y(\(Decision\))1538 1322 y Fg(Norman)37
b(R)m(uiz)1444 1555 y(Jan)m(uary)g(19,)h(2020)p 0 TeXcolorgray
1856 5956 a Ff(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray -128
-95 4016 5 v 0 TeXcolorgray -128 208 a Fe(Con)l(ten)l(ts)-128
427 y Fd(1)91 b(Ejercicio)37 b Fc(\233)p Fd(1)3190 b(3)-128
645 y(2)91 b(Ejercicio)37 b Fc(\233)p Fd(2)3190 b(4)-128
863 y(3)91 b(Ejercicio)37 b Fc(\233)p Fd(3)3190 b(5)-128
1081 y(4)91 b(Ejercicio)37 b Fc(\233)p Fd(4)3190 b(6)-128
1299 y(5)91 b(Ejercicio)37 b Fc(\233)p Fd(5)3190 b(7)-128
1517 y(6)91 b(Ejercicio)37 b Fc(\233)p Fd(6)3190 b(8)-128
1735 y(7)91 b(Ejercicio)37 b Fc(\233)p Fd(7)3190 b(9)-128
1953 y(8)91 b(Ejercicio)37 b Fc(\233)p Fd(8)3134 b(10)-128
2171 y(9)91 b(Ejercicio)37 b Fc(\233)p Fd(9)3134 b(11)-128
2389 y(10)35 b(Ejercicio)i Fc(\233)p Fd(10)3078 b(12)-128
2607 y(11)35 b(Ejercicio)i Fc(\233)p Fd(11)3078 b(13)-128
2825 y(12)35 b(Ejercicio)i Fc(\233)p Fd(12)3078 b(14)-128
3043 y(13)35 b(Ejercicio)i Fc(\233)p Fd(13)3078 b(15)-128
3260 y(14)35 b(Ejercicio)i Fc(\233)p Fd(14)3078 b(16)-128
3478 y(15)35 b(Ejercicio)i Fc(\233)p Fd(15)3078 b(17)-128
3696 y(16)35 b(Ejercicio)i Fc(\233)p Fd(16)3078 b(18)-128
3914 y(17)35 b(Ejercicio)i Fc(\233)p Fd(17)3078 b(19)-128
4132 y(18)35 b(Ejercicio)i Fc(\233)p Fd(18)3078 b(20)-128
4350 y(19)35 b(Ejercicio)i Fc(\233)p Fd(19)3078 b(21)-128
4568 y(20)35 b(Ejercicio)i Fc(\233)p Fd(20)3078 b(23)-128
4786 y(21)35 b(Ejercicio)i Fc(\233)p Fd(21)3078 b(25)p
0 TeXcolorgray -128 5836 V -128 5956 a Ff(Jan)m(uary)34
b(19,)e(2020)1255 b(2)1413 b(Norman)32 b(R)m(uiz)p 0
TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 2476
-114 a Ff(T)-8 b(raba)s(jo)31 b(Practico)j(N)p Fb(\272)e
Ff(2)g(\(Decision\))p -128 -74 4016 5 v 0 TeXcolorgray
-128 208 a Fe(1)162 b(Ejercicio)52 b Fa(\233)p Fe(1)109
427 y Ff(Hacer)c(un)g(programa)f(para)h(ingresar)g(p)s(or)f(teclado)h
(dos)g(n)m(\372meros;)57 b(si)49 b(son)f(iguales)g(emitir)h(p)s(or)-128
548 y(pan)m(talla)33 b(un)g(cartel)g(aclaratorio)f(que)h(diga)g
(\020SON)f(IGUALES\021,)h(caso)g(con)m(trario)g(no)f(emitir)i(nada.)p
0 TeXcolorgray -128 5836 V -128 5956 a(Jan)m(uary)g(19,)e(2020)1255
b(3)1413 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 TeXcolorgray -128
-74 4016 5 v 0 TeXcolorgray -128 229 a Fe(2)162 b(Ejercicio)52
b Fa(\233)p Fe(2)109 448 y Ff(Hacer)36 b(un)f(programa)g(para)g
(ingresar)h(p)s(or)f(teclado)h(un)g(n)m(\372mero)g(y)g(luego)f(emitir)h
(p)s(or)f(pan)m(talla)h(un)-128 568 y(cartel)d(aclaratorio)f(indicando)
i(si)f(el)g(mismo)g(es)g(p)s(ositiv)m(o,)h(negativ)m(o)f(o)f(cero.)p
0 TeXcolorgray -128 5857 V -128 5977 a(Jan)m(uary)i(19,)e(2020)1255
b(4)1413 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 TeXcolorgray 2476
-114 a Ff(T)-8 b(raba)s(jo)31 b(Practico)j(N)p Fb(\272)e
Ff(2)g(\(Decision\))p -128 -74 4016 5 v 0 TeXcolorgray
-128 229 a Fe(3)162 b(Ejercicio)52 b Fa(\233)p Fe(3)109
448 y Ff(Hacer)33 b(un)g(programa)f(para)g(ingresar)h(p)s(or)f(teclado)
h(dos)g(n)m(\372meros)h(y)f(luego)g(calcular)g(y)g(emitir:)p
0 TeXcolorgray -8 651 a Fb(\210)p 0 TeXcolorgray 48 w
Fd(La)38 b(suma)r Ff(:)45 b(si)34 b(el)f(primero)g(es)g(ma)m(y)m(or)g
(que)h(el)f(segundo.)p 0 TeXcolorgray -8 855 a Fb(\210)p
0 TeXcolorgray 48 w Fd(La)38 b(diferencia)r Ff(:)46 b(si)33
b(el)g(primero)g(es)g(menor)g(que)h(el)f(segundo)g(\(restarle)g(al)g
(segundo)g(el)g(primero\))p 0 TeXcolorgray -8 1058 a
Fb(\210)p 0 TeXcolorgray 48 w Fd(El)k(pro)s(ducto)p Ff(:)44
b(si)33 b(am)m(b)s(os)g(son)g(iguales.)-128 1262 y(En)42
b(cualquiera)g(de)g(los)f(casos,)j(el)e(programa)e(calcular\341)h(y)h
(emitir\341)f(solo)h(uno)f(de)g(los)h(tres)f(v)-5 b(alores.)70
b(Se)-128 1382 y(sugiere)34 b(resolv)m(erlo)g(de)f(dos)g(maneras:)p
0 TeXcolorgray -8 1585 a Fb(\210)p 0 TeXcolorgray 48
w Fd(a)r Ff(\))g(Emitiendo)h(el)f(resultado)h(solamen)m(te.)p
0 TeXcolorgray -8 1789 a Fb(\210)p 0 TeXcolorgray 48
w Fd(b)p Ff(\))c(Emitiendo)i(el)e(resultado)g(jun)m(to)h(con)f(un)g
(cartel)g(aclaratorio,)g(p)s(or)g(ejemplo:)43 b(\020La)29
b(suma)i(es:)43 b(10\021)116 1909 y(\363)33 b(\020El)g(pro)s(ducto)f
(es)i(21\021)-14 b(.)p 0 TeXcolorgray -128 5857 V -128
5977 a(Jan)m(uary)34 b(19,)e(2020)1255 b(5)1413 b(Norman)32
b(R)m(uiz)p 0 TeXcolorgray eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray 0 TeXcolorgray -128
-74 4016 5 v 0 TeXcolorgray -128 229 a Fe(4)162 b(Ejercicio)52
b Fa(\233)p Fe(4)109 448 y Ff(Hacer)33 b(un)f(programa)g(para)g
(ingresar)h(p)s(or)f(teclado)h(dos)g(n)m(\372meros)h(y)e(luego)h
(informar)f(p)s(or)g(pan)m(talla)-128 568 y(con)42 b(un)f(cartel)h
(aclaratorio)e(si)i(el)g(primer)g(n)m(\372mero)g(es)g(m)m(\372ltiplo)g
(del)g(segundo)g(\(que)g(es)g(lo)f(mismo)h(que)-128 689
y(decir)34 b(que)f(el)g(segundo)h(es)f(divisor)h(del)f(primero\).)p
0 TeXcolorgray -128 5857 V -128 5977 a(Jan)m(uary)h(19,)e(2020)1255
b(6)1413 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop end
%%Page: 7 7
TeXDict begin 7 6 bop 0 TeXcolorgray 0 TeXcolorgray 2476
-114 a Ff(T)-8 b(raba)s(jo)31 b(Practico)j(N)p Fb(\272)e
Ff(2)g(\(Decision\))p -128 -74 4016 5 v 0 TeXcolorgray
-128 229 a Fe(5)162 b(Ejercicio)52 b Fa(\233)p Fe(5)109
448 y Ff(Hacer)38 b(un)g(programa)g(para)f(ingresar)i(p)s(or)e(teclado)
h(un)h(n)m(\372mero)g(y)f(luego)g(informar)g(p)s(or)f(pan)m(talla)-128
568 y(con)c(un)g(cartel)g(aclaratorio)f(si)h(el)g(mismo)g(es)h(par)e(o)
g(impar.)p 0 TeXcolorgray -128 5857 V -128 5977 a(Jan)m(uary)i(19,)e
(2020)1255 b(7)1413 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray
eop end
%%Page: 8 8
TeXDict begin 8 7 bop 0 TeXcolorgray 0 TeXcolorgray -128
-74 4016 5 v 0 TeXcolorgray -128 229 a Fe(6)162 b(Ejercicio)52
b Fa(\233)p Fe(6)109 448 y Ff(Hacer)46 b(un)g(programa)f(para)g
(ingresar)h(p)s(or)f(teclado)h(dos)g(n)m(\372meros.)84
b(Si)45 b(el)h(segundo)h(n)m(\372mero)f(es)-128 568 y(distin)m(to)39
b(de)g(cero,)h(calcular)e(y)h(emitir)f(p)s(or)g(pan)m(talla)g(el)h(co)s
(cien)m(te)g(del)g(primero)f(sobre)h(el)f(segundo,)j(sino)-128
689 y(emitir)36 b(un)e(cartel)h(que)h(diga)e(\020Divisor)h(Nulo,)g(no)f
(se)i(puede)f(efectuar)h(la)e(op)s(eraci\363n\021)-14
b(.)50 b(\(T)-8 b(ener)35 b(en)g(cuen)m(ta)-128 809 y(que)f(la)e
(divisi\363n)i(p)s(or)e(cero)h(es)h(una)e(op)s(eraci\363n)h(in)m(v)-5
b(\341lida)33 b(que)h(no)e(puede)i(ejecutarse\))p 0 TeXcolorgray
-128 5857 V -128 5977 a(Jan)m(uary)g(19,)e(2020)1255
b(8)1413 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop end
%%Page: 9 9
TeXDict begin 9 8 bop 0 TeXcolorgray 0 TeXcolorgray 2476
-114 a Ff(T)-8 b(raba)s(jo)31 b(Practico)j(N)p Fb(\272)e
Ff(2)g(\(Decision\))p -128 -74 4016 5 v 0 TeXcolorgray
-128 229 a Fe(7)162 b(Ejercicio)52 b Fa(\233)p Fe(7)109
448 y Ff(Hacer)33 b(un)f(programa)g(para)g(ingresar)h(p)s(or)f(teclado)
h(dos)g(n)m(\372meros)h(y)e(luego)h(informar)f(p)s(or)g(pan)m(talla)
-128 568 y(la)h(diferencia)h(absoluta)e(en)m(tre)i(am)m(b)s(os.)-128
689 y(P)m(or)f(ejemplo:)-128 809 y(Si)g(se)h(ingresan)f(3)f(y)h(8,)g
(se)g(emite)h(5.)-128 930 y(Si)f(se)h(ingresan)f(8)f(y)h(3,)g(se)g
(emite)h(5.)-128 1050 y(Si)f(se)h(ingresan)f(-3)f(y)h(9,)f(se)h(emite)h
(12.)-128 1170 y(Si)f(se)h(ingresan)f(-12)f(y)h(-1,)e(se)j(emite)f(11.)
p 0 TeXcolorgray -128 5857 V -128 5977 a(Jan)m(uary)h(19,)e(2020)1255
b(9)1413 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop end
%%Page: 10 10
TeXDict begin 10 9 bop 0 TeXcolorgray 0 TeXcolorgray
-128 -74 4016 5 v 0 TeXcolorgray -128 229 a Fe(8)162
b(Ejercicio)52 b Fa(\233)p Fe(8)109 448 y Ff(Un)29 b(nego)s(cio)g(de)g
(p)s(erfumer\355a)h(efect\372a)f(descuen)m(tos)j(en)d(sus)h(v)m(en)m
(tas)h(seg\372n)e(el)h(imp)s(orte)f(de)g(\351stas,)i(con)-128
568 y(la)i(siguien)m(te)h(escala:)p 0 TeXcolorgray -8
772 a Fb(\210)p 0 TeXcolorgray 81 w Ff(Si)f(el)g(imp)s(orte)f(es)i
(menor)f(a)f($100)g(corresp)s(onde)i(un)e(descuen)m(to)j(del)e(5\045)p
0 TeXcolorgray -8 975 a Fb(\210)p 0 TeXcolorgray 86 w
Ff(Si)k(el)h(imp)s(orte)g(es)g(de)g(en)m(tre)g($100)f(\(inclusiv)m(e\))
j(y)d(hasta)h($500)e(\(inclusiv)m(e\))k(corresp)s(onde)f(un)f(des-)116
1096 y(cuen)m(to)c(del)f(10\045)p 0 TeXcolorgray -8 1299
a Fb(\210)p 0 TeXcolorgray 81 w Ff(Si)g(el)g(imp)s(orte)f(es)i(ma)m(y)m
(or)f(a)f($500)g(corresp)s(onde)i(un)f(descuen)m(to)h(del)g(15\045)-128
1502 y(El)c(due\361o)g(le)g(solicit\363)f(a)g(Ud.,)i(futuro)e
(programador,)g(un)g(programa)g(donde)h(se)g(deba)g(ingresar)f(el)h
(imp)s(orte)-128 1623 y(original)35 b(a)f(pagar)g(p)s(or)g(el)h(clien)m
(te)h(y)f(que)g(luego)g(se)g(calcule)h(e)f(informe)f(p)s(or)h(pan)m
(talla)f(el)h(precio)g(\034nal)g(con)-128 1743 y(el)e(descuen)m(to)i
(que)f(corresp)s(onda)f(y)m(a)g(aplicado.)p 0 TeXcolorgray
-128 5857 V -128 5977 a(Jan)m(uary)h(19,)e(2020)1231
b(10)1388 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop
end
%%Page: 11 11
TeXDict begin 11 10 bop 0 TeXcolorgray 0 TeXcolorgray
2476 -114 a Ff(T)-8 b(raba)s(jo)31 b(Practico)j(N)p Fb(\272)e
Ff(2)g(\(Decision\))p -128 -74 4016 5 v 0 TeXcolorgray
-128 229 a Fe(9)162 b(Ejercicio)52 b Fa(\233)p Fe(9)109
448 y Ff(Hacer)30 b(un)f(programa)g(para)g(ingresar)h(p)s(or)g(teclado)
f(tres)i(n)m(\372meros)g(y)e(luego)h(determinar)h(e)e(informar)-128
568 y(con)48 b(una)f(ley)m(enda)i(aclaratoria)e(si)g(los)h(tres)g(son)g
(iguales)f(en)m(tre)i(s\355,)i(caso)d(con)m(trario)f(no)g(emitir)h
(nada.)-128 689 y(Recordar)33 b(la)g(ley)g(de)h(transitividad)g(de)f
(la)f(igualdad:)44 b(Si)33 b(un)h(n)m(\372mero)f(A)g(es)h(igual)e(a)h
(otro)f(n)m(\372mero)i(B)e(y)i(si)-128 809 y(el)f(n)m(\372mero)h(B)f
(es)g(igual)f(a)h(otro)f(n)m(\372mero)h(C,)g(en)m(tonces)i(se)e(deduce)
h(que)g(A)e(tam)m(bi\351n)i(es)f(igual)g(a)f(C.)p 0 TeXcolorgray
-128 5857 V -128 5977 a(Jan)m(uary)i(19,)e(2020)1231
b(11)1388 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop
end
%%Page: 12 12
TeXDict begin 12 11 bop 0 TeXcolorgray 0 TeXcolorgray
-128 -74 4016 5 v 0 TeXcolorgray -128 229 a Fe(10)161
b(Ejercicio)53 b Fa(\233)p Fe(10)109 448 y Ff(Hacer)30
b(un)f(programa)g(para)g(ingresar)h(p)s(or)g(teclado)f(tres)i(n)m
(\372meros)g(y)e(luego)h(determinar)h(e)e(informar)-128
568 y(con)43 b(una)g(ley)m(enda)h(aclaratoria)e(si)h(los)g(tres)g(son)g
(to)s(dos)f(distin)m(tos)i(en)m(tre)g(s\355,)i(caso)c(con)m(trario)h
(no)f(emitir)-128 689 y(nada.)60 b(Recordar)38 b(que)h(la)f(ley)h(de)f
(transitividad)h(de)g(la)e(igualdad)i(no)e(se)i(cumple)h(para)d(la)h
(desigualdad:)-128 809 y(Si)e(un)g(n)m(\372mero)h(A)e(es)i(distin)m(to)
f(de)g(otro)f(n)m(\372mero)i(B)e(y)h(si)g(el)g(n)m(\372mero)h(B)e(es)i
(distin)m(to)f(de)g(otro)f(n)m(\372mero)i(C,)-128 930
y(en)m(tonces)e(no)d(se)i(deduce)g(que)f(A)g(sea)g(distin)m(to)h(de)f
(C.)g(P)m(or)g(ejemplo)g(A=3,)g(B=5)f(y)h(C=3.)p 0 TeXcolorgray
-128 5857 V -128 5977 a(Jan)m(uary)h(19,)e(2020)1231
b(12)1388 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop
end
%%Page: 13 13
TeXDict begin 13 12 bop 0 TeXcolorgray 0 TeXcolorgray
2476 -114 a Ff(T)-8 b(raba)s(jo)31 b(Practico)j(N)p Fb(\272)e
Ff(2)g(\(Decision\))p -128 -74 4016 5 v 0 TeXcolorgray
-128 229 a Fe(11)161 b(Ejercicio)53 b Fa(\233)p Fe(11)109
448 y Ff(Hacer)28 b(un)g(programa)e(para)i(ingresar)g(p)s(or)f(teclado)
h(la)f(longitud)h(de)g(los)f(tres)i(lados)e(de)h(un)g(tri\341ngulo,)
-128 568 y(luego)33 b(se)h(pide)f(determinar)g(e)g(informar)g(con)g(un)
f(cartel)h(aclaratorio)f(que)i(tip)s(o)e(de)h(tri\341ngulo)f(es:)p
0 TeXcolorgray -8 772 a Fb(\210)p 0 TeXcolorgray 48 w
Fd(Equil\341tero)p Ff(:)44 b(si)33 b(los)g(tres)g(lados)g(son)g
(iguales)p 0 TeXcolorgray -8 975 a Fb(\210)p 0 TeXcolorgray
48 w Fd(Is\363sceles)p Ff(:)44 b(si)34 b(dos)e(de)i(los)e(tres)i(lados)
e(son)h(iguales)p 0 TeXcolorgray -8 1179 a Fb(\210)p
0 TeXcolorgray 48 w Fd(Escaleno)p Ff(:)44 b(si)34 b(los)e(tres)i(lados)
e(son)h(distin)m(tos)h(en)m(tre)g(s\355)p 0 TeXcolorgray
-128 5857 V -128 5977 a(Jan)m(uary)g(19,)e(2020)1231
b(13)1388 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop
end
%%Page: 14 14
TeXDict begin 14 13 bop 0 TeXcolorgray 0 TeXcolorgray
-128 -74 4016 5 v 0 TeXcolorgray -128 229 a Fe(12)161
b(Ejercicio)53 b Fa(\233)p Fe(12)109 448 y Ff(Hacer)30
b(un)f(programa)g(para)g(ingresar)h(p)s(or)g(teclado)f(tres)i(n)m
(\372meros)g(y)e(luego)h(determinar)h(e)e(informar)-128
568 y(el)k(m\341ximo)h(de)f(ellos.)p 0 TeXcolorgray -128
5857 V -128 5977 a(Jan)m(uary)h(19,)e(2020)1231 b(14)1388
b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop end
%%Page: 15 15
TeXDict begin 15 14 bop 0 TeXcolorgray 0 TeXcolorgray
2476 -114 a Ff(T)-8 b(raba)s(jo)31 b(Practico)j(N)p Fb(\272)e
Ff(2)g(\(Decision\))p -128 -74 4016 5 v 0 TeXcolorgray
-128 229 a Fe(13)161 b(Ejercicio)53 b Fa(\233)p Fe(13)109
448 y Ff(Hacer)25 b(un)g(programa)g(para)f(ingresar)i(p)s(or)e(teclado)
i(cinco)f(n)m(\372meros)i(y)e(luego)g(determinar)h(e)f(informar)-128
568 y(el)33 b(m\341ximo)h(de)f(ellos.)p 0 TeXcolorgray
-128 5857 V -128 5977 a(Jan)m(uary)h(19,)e(2020)1231
b(15)1388 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop
end
%%Page: 16 16
TeXDict begin 16 15 bop 0 TeXcolorgray 0 TeXcolorgray
-128 -74 4016 5 v 0 TeXcolorgray -128 229 a Fe(14)161
b(Ejercicio)53 b Fa(\233)p Fe(14)109 448 y Ff(Hacer)34
b(un)h(programa)f(para)g(p)s(o)s(der)g(ingresar)h(p)s(or)f(teclado)g
(cinco)h(n)m(\372meros)h(y)f(luego)f(determinar)i(e)-128
568 y(informar)d(cuan)m(tos)g(de)g(esos)h(cinco)f(n)m(\372meros)h(son)f
(p)s(ositiv)m(os.)p 0 TeXcolorgray -128 5857 V -128 5977
a(Jan)m(uary)h(19,)e(2020)1231 b(16)1388 b(Norman)32
b(R)m(uiz)p 0 TeXcolorgray eop end
%%Page: 17 17
TeXDict begin 17 16 bop 0 TeXcolorgray 0 TeXcolorgray
2476 -114 a Ff(T)-8 b(raba)s(jo)31 b(Practico)j(N)p Fb(\272)e
Ff(2)g(\(Decision\))p -128 -74 4016 5 v 0 TeXcolorgray
-128 229 a Fe(15)161 b(Ejercicio)53 b Fa(\233)p Fe(15)109
448 y Ff(Dados)28 b(tres)i(n)m(\372meros)h(en)m(teros)f(y)f(distin)m
(tos)i(que)f(se)g(ingresan)f(p)s(or)g(teclado)g(informarlos)h
(ordenados)-128 568 y(de)k(menor)f(a)f(ma)m(y)m(or.)-128
689 y(P)m(or)h(ejemplo)h(si)f(se)g(ingresa)g(4,-3,7,)f(se)h(deb)s(e)h
(mostrar)e(-3,4,7.)p 0 TeXcolorgray -128 5857 V -128
5977 a(Jan)m(uary)i(19,)e(2020)1231 b(17)1388 b(Norman)32
b(R)m(uiz)p 0 TeXcolorgray eop end
%%Page: 18 18
TeXDict begin 18 17 bop 0 TeXcolorgray 0 TeXcolorgray
-128 -74 4016 5 v 0 TeXcolorgray -128 229 a Fe(16)161
b(Ejercicio)53 b Fa(\233)p Fe(16)109 448 y Ff(Hacer)35
b(un)f(programa)g(para)g(ingresar)h(p)s(or)f(teclado)h(las)f(cuatro)h
(notas)f(de)h(los)g(ex\341menes)h(parciales)-128 568
y(obtenidas)g(p)s(or)f(un)g(alumno)h(en)f(una)g(determinada)i(materia)e
(y)g(luego)g(emitir)h(el)f(cartel)h(aclaratorio)e(que)-128
689 y(corresp)s(onda,)g(de)f(acuerdo)g(a)f(las)h(siguien)m(tes)i
(condiciones:)p 0 TeXcolorgray -8 892 a Fb(\210)p 0 TeXcolorgray
48 w Fd(Promo)s(ciona)r Ff(:)45 b(si)33 b(obtuv)m(o)g(en)g(los)g
(cuatro)f(ex\341menes)j(nota)d(7)h(o)f(m\341s.)p 0 TeXcolorgray
-8 1096 a Fb(\210)p 0 TeXcolorgray 48 w Fd(Rinde)38 b(examen)h(\034nal)
p Ff(:)45 b(si)33 b(obtuv)m(o)g(nota)f(4)h(o)f(m\341s)h(en)g(p)s(or)f
(lo)g(menos)i(tres)f(ex\341menes.)p 0 TeXcolorgray -8
1299 a Fb(\210)p 0 TeXcolorgray 48 w Fd(Recup)s(era)38
b(P)m(arciales)p Ff(:)44 b(si)33 b(obtuv)m(o)h(nota)e(4)g(o)g(m\341s)h
(en)h(p)s(or)e(lo)g(menos)i(uno)e(de)h(los)g(ex\341menes.)p
0 TeXcolorgray -8 1502 a Fb(\210)p 0 TeXcolorgray 48
w Fd(Recursa)38 b(la)g(materia)r Ff(:)45 b(si)33 b(no)f(aprob)s(\363)g
(ning\372n)h(examen)h(parcial.)-128 1706 y(El)f(programa)f(deb)s(e)i
(emitir)f(UNO)g(SOLO)f(de)h(los)g(carteles)h(an)m(teriores.)p
0 TeXcolorgray -128 5857 V -128 5977 a(Jan)m(uary)g(19,)e(2020)1231
b(18)1388 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop
end
%%Page: 19 19
TeXDict begin 19 18 bop 0 TeXcolorgray 0 TeXcolorgray
2476 -114 a Ff(T)-8 b(raba)s(jo)31 b(Practico)j(N)p Fb(\272)e
Ff(2)g(\(Decision\))p -128 -74 4016 5 v 0 TeXcolorgray
-128 229 a Fe(17)161 b(Ejercicio)53 b Fa(\233)p Fe(17)109
448 y Ff(Hacer)39 b(un)f(programa)g(para)g(ingresar)h(p)s(or)f(teclado)
h(cuatro)g(n)m(\372meros.)62 b(Si)39 b(los)g(v)-5 b(alores)39
b(que)g(se)g(in-)-128 568 y(gresaran)44 b(est\341n)h(ordenados)f(en)g
(forma)f(crecien)m(te,)49 b(emitir)44 b(el)g(mensa)s(je)h(\020Conjun)m
(to)f(Ordenado\021,)j(caso)-128 689 y(con)m(trario)33
b(emitir)g(el)g(mensa)s(je:)45 b(\020Conjun)m(to)33 b(Desordenado\021)
-14 b(.)-128 809 y(P)m(or)33 b(ejemplo,)h(si)f(los)g(n)m(\372meros)h
(que)f(se)h(ingresan)f(son)g(8,10,)f(12)g(y)h(14,)f(en)m(tonces)j
(est\341n)e(ordenados.)-128 930 y(P)m(or)g(ejemplo,)h(si)f(los)g(n)m
(\372meros)h(que)f(se)h(ingresan)f(son)g(8,12,)f(12)g(y)h(14,)f(en)m
(tonces)j(est\341n)e(ordenados.)-128 1050 y(P)m(ero)h(si)f(los)g(n)m
(\372meros)h(que)f(se)h(ingresan)f(son)g(10,8,12)e(y)i(14,)g(los)g
(mismos)g(est\341n)h(desordenados.)p 0 TeXcolorgray -128
5857 V -128 5977 a(Jan)m(uary)g(19,)e(2020)1231 b(19)1388
b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop end
%%Page: 20 20
TeXDict begin 20 19 bop 0 TeXcolorgray 0 TeXcolorgray
-128 -74 4016 5 v 0 TeXcolorgray -128 229 a Fe(18)161
b(Ejercicio)53 b Fa(\233)p Fe(18)109 448 y Ff(Hacer)34
b(un)h(programa)e(para)h(leer)h(tres)f(n)m(\372meros)i(diferen)m(tes)g
(y)e(determinar)h(e)g(informar)f(el)g(n)m(\372mero)-128
568 y(del)g(medio,)f(es)h(decir)g(el)f(que)h(no)e(es)i(ni)f(ma)m(y)m
(or)g(ni)g(menor.)45 b(Sup)s(oner)33 b(que)h(los)f(3)g(n)m(\372meros)h
(ingresados)g(son)-128 689 y(siempre)h(distin)m(tos.)-128
809 y(Ejemplo,)f(si)f(se)g(ingresan)h(6,)e(10,)g(8,)h(se)g(emitir\341)g
(6.)p 0 TeXcolorgray -128 5857 V -128 5977 a(Jan)m(uary)h(19,)e(2020)
1231 b(20)1388 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray
eop end
%%Page: 21 21
TeXDict begin 21 20 bop 0 TeXcolorgray 0 TeXcolorgray
2476 -114 a Ff(T)-8 b(raba)s(jo)31 b(Practico)j(N)p Fb(\272)e
Ff(2)g(\(Decision\))p -128 -74 4016 5 v 0 TeXcolorgray
-128 229 a Fe(19)161 b(Ejercicio)53 b Fa(\233)p Fe(19)109
448 y Ff(Un)33 b(nego)s(cio)h(v)m(ende)h(distin)m(tos)g(art\355culos)f
(iden)m(ti\034cados)h(p)s(or)e(un)h(c\363)s(digo)f(en)m(tre)i(1)e(y)h
(4.)45 b(Los)34 b(precios)-128 568 y(de)g(los)e(art\355culos)i(y)f(las)
f(condiciones)j(de)e(v)m(en)m(ta)h(son)f(las)g(siguien)m(tes:)p
0 TeXcolorgray -8 772 a Fb(\210)p 0 TeXcolorgray 48 w
Fd(Art\355culos)k(con)h(c\363)s(digo)g(1)p Ff(:)43 b($)32
b(10)g(p)s(or)h(unidad)p 0 TeXcolorgray -8 975 a Fb(\210)p
0 TeXcolorgray 48 w Fd(Art\355culos)k(con)h(c\363)s(digo)g(2)p
Ff(:)43 b($)32 b(7)h(p)s(esos)g(p)s(or)f(unidad)h(y)g($)g(65)f(la)g(ca)
s(ja)g(con)h(10)f(unidades.)p 0 TeXcolorgray -8 1179
a Fb(\210)p 0 TeXcolorgray 48 w Fd(Art\355culos)j(con)h(c\363)s(digo)g
(3)p Ff(:)43 b($)30 b(3)h(p)s(esos)h(p)s(or)f(unidad,)h(si)f(la)g
(compra)g(es)h(p)s(or)e(m\341s)i(de)f(10)g(unidades)116
1299 y(se)j(aplica)e(un)h(10\045)g(de)g(descuen)m(to)h(sobre)g(el)f
(total)f(de)h(la)f(compra.)p 0 TeXcolorgray -8 1502 a
Fb(\210)p 0 TeXcolorgray 48 w Fd(Art\355culos)37 b(con)h(c\363)s(digo)g
(4)p Ff(:)43 b($)32 b(1)h(p)s(eso)g(p)s(or)f(unidad)-128
1706 y(Hacer)43 b(un)f(programa)g(para)f(ingresar)i(p)s(or)e(teclado:)
63 b(el)42 b(c\363)s(digo)g(del)g(art\355culo,)j(la)d(can)m(tidad)g(v)m
(endida)i(y)-128 1826 y(luego)33 b(se)h(pide)f(calcular)g(e)g(informar)
f(el)h(imp)s(orte)g(a)f(pagar)g(p)s(or)g(el)h(clien)m(te.)-128
1947 y(En)h(el)e(programa)g(se)i(ingresa)f(un)g(solo)g(c\363)s(digo)f
(de)h(art\355culo)f(y)h(una)g(sola)g(can)m(tidad)g(en)g(cada)g
(ejecuci\363n.)p 0 TeXcolorgray -128 5857 V -128 5977
a(Jan)m(uary)h(19,)e(2020)1231 b(21)1388 b(Norman)32
b(R)m(uiz)p 0 TeXcolorgray eop end
%%Page: 22 22
TeXDict begin 22 21 bop 0 TeXcolorgray 0 TeXcolorgray
-128 -74 4016 5 v 0 TeXcolorgray 0 TeXcolorgray -128
5857 V -128 5977 a Ff(Jan)m(uary)34 b(19,)e(2020)1231
b(22)1388 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop
end
%%Page: 23 23
TeXDict begin 23 22 bop 0 TeXcolorgray 0 TeXcolorgray
2476 -114 a Ff(T)-8 b(raba)s(jo)31 b(Practico)j(N)p Fb(\272)e
Ff(2)g(\(Decision\))p -128 -74 4016 5 v 0 TeXcolorgray
-128 562 a Fe(20)161 b(Ejercicio)53 b Fa(\233)p Fe(20)109
781 y Ff(Una)34 b(empresa)i(de)f(electricidad)i(cobra)d(el)h(servicio)i
(a)d(sus)i(clien)m(tes)g(de)g(acuerdo)f(a)f(la)g(siguien)m(te)j(es-)
-128 901 y(cala:)-128 1022 y($)c(0,10)f(p)s(or)g(kilo)m(v)-5
b(atio)33 b(p)s(or)f(los)h(primeros)g(100)f(kilo)m(v)-5
b(atios)34 b(de)f(consumo.)-128 1142 y($)g(0,12)f(p)s(or)g(kilo)m(v)-5
b(atio)33 b(p)s(or)f(el)h(consumo)g(de)g(101)f(a)h(200)e(kilo)m(v)-5
b(atios.)-128 1262 y($)33 b(0,15)f(p)s(or)g(kilo)m(v)-5
b(atio)33 b(p)s(or)f(el)h(consumo)g(de)g(201)f(kilo)m(v)-5
b(atios)34 b(en)f(adelan)m(te.)-128 1383 y(Hacer)h(un)f(programa)f
(para)h(que)h(dado)e(el)i(consumo)f(en)h(kilo)m(v)-5
b(atios)33 b(de)h(un)f(determinado)h(clien)m(te,)h(el)e(pro-)-128
1503 y(grama)g(calcule)g(e)g(informe)g(el)g(total)f(a)g(pagar)g(p)s(or)
h(el)f(mismo.)-128 1624 y(Ejemplo)i(1:)-128 1744 y(Si)f(se)h(ingresa)f
(un)g(consumo)g(de)g(55)f(kilo)m(v)-5 b(atios,)34 b(en)m(tonces)g(el)f
(programa)f(calcular\341:)-128 1864 y($)h(0,10)f(x)h(55=)f($)g(5,50)
-128 1985 y(Ejemplo)i(2:)-128 2105 y(Si)f(se)h(ingresa)f(un)g(consumo)g
(de)g(125)f(kilo)m(v)-5 b(atios,)34 b(en)m(tonces)g(el)f(programa)f
(calcular\341:)-128 2225 y($)h(0,10)f(x)h(100)f(+)g($)g(0,12)g(x)h
(25=$)f(13)-128 2346 y(Ejemplo)i(3:)-128 2466 y(Si)f(se)h(ingresa)f(un)
g(consumo)g(de)g(250)f(kilo)m(v)-5 b(atios,)34 b(en)m(tonces)g(el)f
(programa)f(calcular\341:)-128 2587 y($)h(0,10)f(x)h(100)f(+)g($)g
(0,12)g(x)h(100)f(+)g($)h(0,15)f(x)h(50)f(=)g($)g(29,50.)p
0 TeXcolorgray -128 5857 V -128 5977 a(Jan)m(uary)i(19,)e(2020)1231
b(23)1388 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop
end
%%Page: 24 24
TeXDict begin 24 23 bop 0 TeXcolorgray 0 TeXcolorgray
-128 -74 4016 5 v 0 TeXcolorgray 0 TeXcolorgray -128
5857 V -128 5977 a Ff(Jan)m(uary)34 b(19,)e(2020)1231
b(24)1388 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop
end
%%Page: 25 25
TeXDict begin 25 24 bop 0 TeXcolorgray 0 TeXcolorgray
2476 -114 a Ff(T)-8 b(raba)s(jo)31 b(Practico)j(N)p Fb(\272)e
Ff(2)g(\(Decision\))p -128 -74 4016 5 v 0 TeXcolorgray
-128 562 a Fe(21)161 b(Ejercicio)53 b Fa(\233)p Fe(21)109
781 y Ff(Una)25 b(empresa)i(de)g(v)m(en)m(ta)g(de)f(b)s(oletos)g(de)g
(micros)h(tiene)f(distin)m(tas)h(tarifas)f(seg\372n)g(el)g(destino,)j
(servicio)-128 901 y(\(com)m(\372n)34 b(o)f(diferencial\))h(y)f
(compa\361\355a)g(elegida)h(p)s(or)e(el)i(pasa)s(jero.)44
b(La)32 b(siguien)m(te)j(tabla)d(indica)i(los)f(precios)-128
1022 y(a)g(pagar)f(p)s(or)g(el)h(servicio)h(com)m(\372n)g(p)s(or)e
(pasa)s(jero:)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
856 1161 2049 4 v 854 1281 4 121 v 906 1245 a(Compa\361\355a)p
1387 1281 V 100 w(Destino)h(1)p 1893 1281 V 99 w(Destino)g(2)p
2398 1281 V 99 w(Destino)g(3)p 2903 1281 V 856 1284 2049
4 v 856 1301 V 854 1421 4 121 v 906 1385 a(1)p 1387 1421
V 484 w($)f(200.-)p 1893 1421 V 217 w($)g(150.-)p 2398
1421 V 217 w($)h(300.-)p 2903 1421 V 856 1425 2049 4
v 854 1545 4 121 v 906 1509 a(2)p 1387 1545 V 484 w($)f(220.-)p
1893 1545 V 217 w($)g(165.-)p 2398 1545 V 217 w($)h(330.-)p
2903 1545 V 856 1548 2049 4 v 854 1669 4 121 v 906 1633
a(3)p 1387 1669 V 484 w($)f(240.-)p 1893 1669 V 217 w($)g(180.-)p
2398 1669 V 217 w($)h(360.-)p 2903 1669 V 856 1672 2049
4 v 0 TeXcolorgray 1077 1832 a(T)-8 b(able)33 b(1:)43
b(Listado)33 b(de)g(precios)h(x)f(destino.)p 0 TeXcolorgray
0 TeXcolorgray 19 2176 a(El)i(servicio)h(diferencial)g(cuesta)g(un)f
(20\045)f(m\341s.)51 b(A)m(dem\341s,)37 b(si)e(el)g(pasa)s(jero)g
(compra)g(5)f(o)g(m\341s)i(pasa)s(jes)-128 2297 y(jun)m(tos)c(se)f
(ofrece)g(un)g(descuen)m(to)i(del)e(15\045.)43 b(El)31
b(due\361o)g(de)g(la)g(empresa)h(le)f(solicit\363)g(a)f(Ud.,)i(futuro)e
(progra-)-128 2417 y(mador,)j(un)g(programa)f(para)g(ingresar)h(los)g
(siguien)m(tes)i(datos)e(p)s(or)f(cada)g(v)m(en)m(ta:)p
0 TeXcolorgray -8 2621 a Fb(\210)p 0 TeXcolorgray 81
w Ff(N\372mero)h(de)g(Destino)g(\(1)f(a)g(3\))p 0 TeXcolorgray
-8 2824 a Fb(\210)p 0 TeXcolorgray 81 w Ff(Compa\361\355a)h(\(1,)f(2,)h
(3\))p 0 TeXcolorgray -8 3027 a Fb(\210)p 0 TeXcolorgray
81 w Ff(Can)m(tidad)g(de)g(pasa)s(jes)g(solicitados)h(p)s(or)e(el)h
(pasa)s(jero)p 0 TeXcolorgray -8 3231 a Fb(\210)p 0 TeXcolorgray
81 w Ff(Servicio)h(\(1=)e(com)m(\372n,)h(2=)g(diferencial)g(\))-128
3434 y(El)d(programa)e(s\363lo)h(p)s(ermite)h(ingresar)f(una)g(v)m(en)m
(ta)h(p)s(or)f(v)m(ez)h(y)g(calcula)f(y)g(emite)h(el)g(imp)s(orte)f
(neto)g(a)g(pagar.)p 0 TeXcolorgray -128 5857 4016 5
v -128 5977 a(Jan)m(uary)34 b(19,)e(2020)1231 b(25)1388
b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop end
%%Page: 26 26
TeXDict begin 26 25 bop 0 TeXcolorgray 0 TeXcolorgray
-128 -74 4016 5 v 0 TeXcolorgray 0 TeXcolorgray -128
5857 V -128 5977 a Ff(Jan)m(uary)34 b(19,)e(2020)1231
b(26)1388 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop
end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
